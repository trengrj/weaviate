# source: http://localhost:8081/graphql
# timestamp: Tue Jul 17 2018 11:21:50 GMT+0200 (W. Europe Summer Time)

schema {
  query: WeaviateObj
}

"""City"""
type City {
  """Official name of the city."""
  name: String

  """The city's latitude"""
  latitude: Float

  """Number of inhabitants of the city"""
  population: Int

  """True if the city is a capital"""
  isCapital: Boolean
}

"""enum type which denote the classes"""
enum classEnum {
  City
  Person
  MoveAction
}

"""
Filter options for the converted fetch search, to convert the data to the filter input
"""
input FetchFilterANDInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: FetchFilterANDInpObj

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: FetchFilterORInpObj

  """filter where the path end should be equal to the value"""
  EQ: [FetchFilterEQInpObj]

  """filter where the path end should NOT be equal to the value"""
  NEQ: [FetchFilterNEQInpObj]

  """filter where the path end should be inequal to the value"""
  IE: [FetchFilterIEInpObj]
}

"""filter where the path end should be equal to the value"""
input FetchFilterEQInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: [FetchFilterFieldANDInpObj]

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: [FetchFilterFieldORInpObj]

  """path from the root Thing or Action until class property"""
  path: [String]

  """the value to class property should be filtered at"""
  value: String
}

"""
Filter options for the converted fetch search, to convert the data to the filter input
"""
input FetchFilterFieldANDInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: [FetchFilterFieldANDInpObj]

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: [FetchFilterFieldORInpObj]

  """path from the root Thing or Action until class property"""
  path: [String]

  """the value to class property should be filtered at"""
  value: String
}

"""
Filter options for the converted fetch search, to convert the data to the filter input
"""
input FetchFilterFieldORInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: [FetchFilterFieldANDInpObj]

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: [FetchFilterFieldORInpObj]

  """path from the root Thing or Action until class property"""
  path: [String]

  """the value to class property should be filtered at"""
  value: String
}

"""filter where the path end should be inequal to the value"""
input FetchFilterIEInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: [FetchFilterFieldANDInpObj]

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: [FetchFilterFieldORInpObj]

  """path from the root Thing or Action until class property"""
  path: [String]

  """the value to class property should be filtered at"""
  value: String
}

"""filter where the path end should be not equal to the value"""
input FetchFilterNEQInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: [FetchFilterFieldANDInpObj]

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: [FetchFilterFieldORInpObj]

  """path from the root Thing or Action until class property"""
  path: [String]

  """the value to class property should be filtered at"""
  value: String
}

"""
Filter options for the converted fetch search, to convert the data to the filter input
"""
input FetchFilterORInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: FetchFilterANDInpObj

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: FetchFilterORInpObj

  """filter where the path end should be equal to the value"""
  EQ: [FetchFilterEQInpObj]

  """filter where the path end should NOT be equal to the value"""
  NEQ: [FetchFilterNEQInpObj]

  """filter where the path end should be inequal to the value"""
  IE: [FetchFilterIEInpObj]
}

"""City"""
type MetaCity {
  """meta information about class object"""
  Meta: MetaCityMetaObj

  """
  Meta information about the property "name"
  """
  name: MetaCitynameObj

  """
  Meta information about the property "latitude"
  """
  latitude: MetaCitylatitudeObj

  """
  Meta information about the property "population"
  """
  population: MetaCitypopulationObj

  """
  Meta information about the property "isCapital"
  """
  isCapital: MetaCityisCapitalObj
}

"""Property meta information"""
type MetaCityisCapitalObj {
  """datatype of the property"""
  type: String

  """total amount of boolean value is true"""
  totalTrue: Int

  """percentage of boolean = true"""
  percentageTrue: Float

  """total amount of found instances"""
  counter: Int
}

"""Property meta information"""
type MetaCitylatitudeObj {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""meta information about class object"""
type MetaCityMetaObj {
  """how many class instances are there"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MetaCityMetaPointingObj
}

"""pointing to and from how many other things"""
type MetaCityMetaPointingObj {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Property meta information"""
type MetaCitynameObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """most frequent property values"""
  topOccurrences: [MetaCitynameTopOccurrencesObj]
}

"""most frequent property values"""
type MetaCitynameTopOccurrencesObj {
  """property value of the most frequent properties"""
  value: String

  """number of occurrance"""
  occurs: Int
}

"""Property meta information"""
type MetaCitypopulationObj {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Action of buying a thing"""
type MetaMoveAction {
  """meta information about class object"""
  Meta: MetaMoveActionMetaObj

  """
  Meta information about the property "person"
  """
  person: MetaMoveActionpersonObj

  """
  Meta information about the property "toCity"
  """
  toCity: MetaMoveActiontoCityObj

  """
  Meta information about the property "fromCity"
  """
  fromCity: MetaMoveActionfromCityObj

  """
  Meta information about the property "isMoved"
  """
  isMoved: MetaMoveActionisMovedObj

  """
  Meta information about the property "date"
  """
  date: MetaMoveActiondateObj

  """
  Meta information about the property "moveNumber"
  """
  moveNumber: MetaMoveActionmoveNumberObj

  """
  Meta information about the property "cost"
  """
  cost: MetaMoveActioncostObj
}

"""Property meta information"""
type MetaMoveActioncostObj {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Property meta information"""
type MetaMoveActiondateObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """most frequent property values"""
  topOccurrences: [MetaMoveActiondateTopOccurrencesObj]
}

"""most frequent property values"""
type MetaMoveActiondateTopOccurrencesObj {
  """property value of the most frequent properties"""
  value: String

  """number of occurrance"""
  occurs: Int
}

"""Property meta information"""
type MetaMoveActionfromCityObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MetaMoveActionfromCityPointingObj
}

"""pointing to and from how many other things"""
type MetaMoveActionfromCityPointingObj {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Property meta information"""
type MetaMoveActionisMovedObj {
  """datatype of the property"""
  type: String

  """total amount of boolean value is true"""
  totalTrue: Int

  """percentage of boolean = true"""
  percentageTrue: Float

  """total amount of found instances"""
  counter: Int
}

"""meta information about class object"""
type MetaMoveActionMetaObj {
  """how many class instances are there"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MetaMoveActionMetaPointingObj
}

"""pointing to and from how many other things"""
type MetaMoveActionMetaPointingObj {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Property meta information"""
type MetaMoveActionmoveNumberObj {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Property meta information"""
type MetaMoveActionpersonObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MetaMoveActionpersonPointingObj
}

"""pointing to and from how many other things"""
type MetaMoveActionpersonPointingObj {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Property meta information"""
type MetaMoveActiontoCityObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """most frequent property values"""
  topOccurrences: [MetaMoveActiontoCityTopOccurrencesObj]
}

"""most frequent property values"""
type MetaMoveActiontoCityTopOccurrencesObj {
  """property value of the most frequent properties"""
  value: String

  """number of occurrance"""
  occurs: Int
}

"""Person"""
type MetaPerson {
  """meta information about class object"""
  Meta: MetaPersonMetaObj

  """
  Meta information about the property "livesIn"
  """
  livesIn: MetaPersonlivesInObj

  """
  Meta information about the property "birthday"
  """
  birthday: MetaPersonbirthdayObj
}

"""Property meta information"""
type MetaPersonbirthdayObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """most frequent property values"""
  topOccurrences: [MetaPersonbirthdayTopOccurrencesObj]
}

"""most frequent property values"""
type MetaPersonbirthdayTopOccurrencesObj {
  """property value of the most frequent properties"""
  value: String

  """number of occurrance"""
  occurs: Int
}

"""Property meta information"""
type MetaPersonlivesInObj {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MetaPersonlivesInPointingObj
}

"""pointing to and from how many other things"""
type MetaPersonlivesInPointingObj {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""meta information about class object"""
type MetaPersonMetaObj {
  """how many class instances are there"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MetaPersonMetaPointingObj
}

"""pointing to and from how many other things"""
type MetaPersonMetaPointingObj {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Action of buying a thing"""
type MoveAction {
  """Person who moves"""
  Person: MoveActionPersonObj

  """The city the person moves to"""
  toCity: String

  """The city the person moves to"""
  ToCity: MoveActionToCityObj

  """The city the person moves from"""
  FromCity: MoveActionFromCityObj

  """Whether the person is already moved"""
  isMoved: Boolean

  """The date the person is moving"""
  date: String

  """The total amount of house moves the person has made"""
  moveNumber: Int

  """The total costs of the movement"""
  cost: Float
}

"""The city the person moves from"""
union MoveActionFromCityObj = City

"""Person who moves"""
union MoveActionPersonObj = Person

"""The city the person moves to"""
union MoveActionToCityObj = City

"""Person"""
type Person {
  """The city where the person lives."""
  LivesIn: PersonLivesInObj

  """Birthday of the person"""
  birthday: String
}

"""The city where the person lives."""
union PersonLivesInObj = City | Person

"""Fetch Actions on the internal Weaviate"""
type WeaviateLocalConvertedFetchActionsObj {
  """Action of buying a thing"""
  MoveAction(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [MoveAction]
}

"""
Filter options for the converted fetch search, to convert the data to the filter input
"""
input WeaviateLocalConvertedFetchFilterInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: FetchFilterANDInpObj

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: FetchFilterORInpObj

  """filter where the path end should be equal to the value"""
  EQ: [FetchFilterEQInpObj]

  """filter where the path end should NOT be equal to the value"""
  NEQ: [FetchFilterNEQInpObj]

  """filter where the path end should be inequal to the value"""
  IE: [FetchFilterIEInpObj]
}

"""Fetch things or actions on the internal Weaviate"""
type WeaviateLocalConvertedFetchObj {
  """Locate Things on the local Weaviate"""
  Things: WeaviateLocalConvertedFetchThingsObj

  """Locate Actions on the local Weaviate"""
  Actions: WeaviateLocalConvertedFetchActionsObj
}

"""Fetch things on the internal Weaviate"""
type WeaviateLocalConvertedFetchThingsObj {
  """City"""
  City(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [City]

  """Person"""
  Person(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [Person]
}

"""Fetch things or actions on the internal Weaviate"""
type WeaviateLocalHelpersFetchObj {
  """Find a set of exact ID's of Things or Actions on the local Weaviate"""
  PinPoint(
    """Things or Actions"""
    _stack: WeaviateLocalHelpersFetchPinPointStackEnum

    """an array of potential classes (they should be in the ontology!)"""
    _classes: [classEnum]

    """an array of potential classes"""
    _properties: [String]

    """the actual field that will be used in the search."""
    _needle: String

    """the type of search."""
    _searchType: WeaviateLocalHelpersFetchPinPointSearchTypeEnum

    """limit of search results"""
    _limit: Int
  ): WeaviateLocalHelpersFetchPinPointObj
}

"""Fetch uuid of Things or Actions on the internal Weaviate"""
type WeaviateLocalHelpersFetchPinPointObj {
  """uuid of thing or action pinpointed in fetch query"""
  uuid: ID
}

enum WeaviateLocalHelpersFetchPinPointSearchTypeEnum {
  standard
}

enum WeaviateLocalHelpersFetchPinPointStackEnum {
  Things
  Actions
}

"""
Filter options for the meta fetch search, to convert the data to the filter input
"""
input WeaviateLocalMetaFetchFilterInpObj {
  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  AND: FetchFilterANDInpObj

  """
  Filter options for the converted fetch search, to convert the data to the filter input
  """
  OR: FetchFilterORInpObj

  """filter where the path end should be equal to the value"""
  EQ: [FetchFilterEQInpObj]

  """filter where the path end should NOT be equal to the value"""
  NEQ: [FetchFilterNEQInpObj]

  """filter where the path end should be inequal to the value"""
  IE: [FetchFilterIEInpObj]
}

"""Action to fetch for meta generic fetch"""
type WeaviateLocalMetaFetchGenericsActionsObj {
  """Action of buying a thing"""
  MoveAction(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): MetaMoveAction
}

"""Object type to fetch"""
type WeaviateLocalMetaFetchGenericsObj {
  """Thing to fetch for meta generic fetch"""
  Things(
    """If there are arrays in the result, limit them to this size"""
    _maxArraySize: String
  ): WeaviateLocalMetaFetchGenericsThingsObj

  """Action to fetch for meta generic fetch"""
  Actions(
    """If there are arrays in the result, limit them to this size"""
    _maxArraySize: String
  ): WeaviateLocalMetaFetchGenericsActionsObj
}

"""Thing to fetch for meta generic fetch"""
type WeaviateLocalMetaFetchGenericsThingsObj {
  """City"""
  City(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): MetaCity

  """Person"""
  Person(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): MetaPerson
}

"""Fetch things or actions on the internal Weaviate"""
type WeaviateLocalMetaFetchObj {
  """Fetch generic meta information based on the type"""
  Generics: WeaviateLocalMetaFetchGenericsObj
}

"""Type of fetch on the internal Weaviate"""
type WeaviateLocalObj {
  """
  Do a converted fetch to search Things or Actions on the local weaviate
  """
  ConvertedFetch(
    """
    Filter options for the converted fetch search, to convert the data to the filter input
    """
    _filter: WeaviateLocalConvertedFetchFilterInpObj
  ): WeaviateLocalConvertedFetchObj

  """Do a helpers fetch to search Things or Actions on the local weaviate"""
  HelpersFetch: WeaviateLocalHelpersFetchObj

  """Fetch meta infromation about Things or Actions on the local weaviate"""
  MetaFetch(
    """
    Filter options for the meta fetch search, to convert the data to the filter input
    """
    _filter: WeaviateLocalMetaFetchFilterInpObj
  ): WeaviateLocalMetaFetchObj
}

"""search for things or actions on the network Weaviate"""
type WeaviateNetworkHelpersFetchObj {
  """search for things or actions on the network Weaviate"""
  OntologyExplorer(
    """maximum distance to other class instances"""
    _distance: Float
  ): WeaviateNetworkHelpersFetchOntologyExplorerObj
}

"""Action to fetch for network fetch"""
type WeaviateNetworkHelpersFetchOntologyExplorerActionsObj {
  """Action of buying a thing"""
  MoveAction(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [MoveAction]
}

"""search for things or actions on the network Weaviate"""
type WeaviateNetworkHelpersFetchOntologyExplorerObj {
  """Thing to fetch in network"""
  Things(
    """maximum distance to other instances"""
    _distance: Float
  ): WeaviateNetworkHelpersFetchOntologyExplorerThingsObj

  """Action to fetch in network"""
  Actions(
    """maximum distance to other instances"""
    _distance: Float
  ): WeaviateNetworkHelpersFetchOntologyExplorerActionsObj
}

"""Thing to fetch for network fetch"""
type WeaviateNetworkHelpersFetchOntologyExplorerThingsObj {
  """City"""
  City(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [City]

  """Person"""
  Person(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [Person]
}

"""Type of fetch on the Weaviate network"""
type WeaviateNetworkObj {
  """
  Do a fuzzy search fetch to search Things or Actions on the network weaviate
  """
  FuzzyFetch: [String]

  """
  Do a fetch with help to search Things or Actions on the network weaviate
  """
  HelpersFetch: WeaviateNetworkHelpersFetchObj

  """To fetch meta information Things or Actions on the network weaviate"""
  MetaFetch: [String]
}

"""Location of the root query"""
type WeaviateObj {
  """Locate on the local Weaviate"""
  Local: WeaviateLocalObj

  """Locate on the Weaviate network"""
  Network: WeaviateNetworkObj
}
