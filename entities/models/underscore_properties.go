//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnderscoreProperties Additional Meta information about a single thing/action object.
//
// swagger:model UnderscoreProperties
type UnderscoreProperties struct {

	// If this object was subject of a classificiation, additional meta info about this classification is available here
	Classification *UnderscorePropertiesClassification `json:"classification,omitempty"`

	// The concepts vector projected into a lower dimensional space (for visualization purposes)
	FeatureProjection *FeatureProjection `json:"featureProjection,omitempty"`

	// Additional information about how the object was vectorized
	Interpretation *Interpretation `json:"interpretation,omitempty"`

	// Neighboring concepts of your search results
	NearestNeighbors *NearestNeighbors `json:"nearestNeighbors,omitempty"`

	// The semantic path between the search query and the result. Only on 'explore' searches
	SemanticPath *SemanticPath `json:"semanticPath,omitempty"`

	// This object's position in the Contextionary vector space
	Vector C11yVector `json:"vector,omitempty"`
}

// Validate validates this underscore properties
func (m *UnderscoreProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureProjection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterpretation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNearestNeighbors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSemanticPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnderscoreProperties) validateClassification(formats strfmt.Registry) error {
	if swag.IsZero(m.Classification) { // not required
		return nil
	}

	if m.Classification != nil {
		if err := m.Classification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification")
			}
			return err
		}
	}

	return nil
}

func (m *UnderscoreProperties) validateFeatureProjection(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureProjection) { // not required
		return nil
	}

	if m.FeatureProjection != nil {
		if err := m.FeatureProjection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featureProjection")
			}
			return err
		}
	}

	return nil
}

func (m *UnderscoreProperties) validateInterpretation(formats strfmt.Registry) error {
	if swag.IsZero(m.Interpretation) { // not required
		return nil
	}

	if m.Interpretation != nil {
		if err := m.Interpretation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interpretation")
			}
			return err
		}
	}

	return nil
}

func (m *UnderscoreProperties) validateNearestNeighbors(formats strfmt.Registry) error {
	if swag.IsZero(m.NearestNeighbors) { // not required
		return nil
	}

	if m.NearestNeighbors != nil {
		if err := m.NearestNeighbors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nearestNeighbors")
			}
			return err
		}
	}

	return nil
}

func (m *UnderscoreProperties) validateSemanticPath(formats strfmt.Registry) error {
	if swag.IsZero(m.SemanticPath) { // not required
		return nil
	}

	if m.SemanticPath != nil {
		if err := m.SemanticPath.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("semanticPath")
			}
			return err
		}
	}

	return nil
}

func (m *UnderscoreProperties) validateVector(formats strfmt.Registry) error {
	if swag.IsZero(m.Vector) { // not required
		return nil
	}

	if err := m.Vector.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vector")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnderscoreProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnderscoreProperties) UnmarshalBinary(b []byte) error {
	var res UnderscoreProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
