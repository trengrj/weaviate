//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThingsGetResponse things get response
//
// swagger:model ThingsGetResponse
type ThingsGetResponse struct {
	Thing

	// deprecations
	Deprecations []*Deprecation `json:"deprecations"`

	// result
	Result *ThingsGetResponseAO2Result `json:"result,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ThingsGetResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Thing
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Thing = aO0

	// AO1
	var dataAO1 struct {
		Deprecations []*Deprecation `json:"deprecations"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Deprecations = dataAO1.Deprecations

	// AO2
	var dataAO2 struct {
		Result *ThingsGetResponseAO2Result `json:"result,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Result = dataAO2.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ThingsGetResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.Thing)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Deprecations []*Deprecation `json:"deprecations"`
	}

	dataAO1.Deprecations = m.Deprecations

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	var dataAO2 struct {
		Result *ThingsGetResponseAO2Result `json:"result,omitempty"`
	}

	dataAO2.Result = m.Result

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this things get response
func (m *ThingsGetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Thing
	if err := m.Thing.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThingsGetResponse) validateDeprecations(formats strfmt.Registry) error {
	if swag.IsZero(m.Deprecations) { // not required
		return nil
	}

	for i := 0; i < len(m.Deprecations); i++ {
		if swag.IsZero(m.Deprecations[i]) { // not required
			continue
		}

		if m.Deprecations[i] != nil {
			if err := m.Deprecations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deprecations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThingsGetResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThingsGetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThingsGetResponse) UnmarshalBinary(b []byte) error {
	var res ThingsGetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ThingsGetResponseAO2Result Results for this specific Thing.
//
// swagger:model ThingsGetResponseAO2Result
type ThingsGetResponseAO2Result struct {

	// errors
	Errors *ErrorResponse `json:"errors,omitempty"`

	// status
	// Enum: [SUCCESS PENDING FAILED]
	Status *string `json:"status,omitempty"`
}

// Validate validates this things get response a o2 result
func (m *ThingsGetResponseAO2Result) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThingsGetResponseAO2Result) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if m.Errors != nil {
		if err := m.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

var thingsGetResponseAO2ResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","PENDING","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thingsGetResponseAO2ResultTypeStatusPropEnum = append(thingsGetResponseAO2ResultTypeStatusPropEnum, v)
	}
}

const (

	// ThingsGetResponseAO2ResultStatusSUCCESS captures enum value "SUCCESS"
	ThingsGetResponseAO2ResultStatusSUCCESS string = "SUCCESS"

	// ThingsGetResponseAO2ResultStatusPENDING captures enum value "PENDING"
	ThingsGetResponseAO2ResultStatusPENDING string = "PENDING"

	// ThingsGetResponseAO2ResultStatusFAILED captures enum value "FAILED"
	ThingsGetResponseAO2ResultStatusFAILED string = "FAILED"
)

// prop value enum
func (m *ThingsGetResponseAO2Result) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thingsGetResponseAO2ResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThingsGetResponseAO2Result) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("result"+"."+"status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThingsGetResponseAO2Result) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThingsGetResponseAO2Result) UnmarshalBinary(b []byte) error {
	var res ThingsGetResponseAO2Result
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
