//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UnderscorePropertiesClassification This underscore property contains additional info about the classification which affected this object
//
// swagger:model UnderscorePropertiesClassification
type UnderscorePropertiesClassification struct {

	// The (primitive) field(s) which were used as a basis for classification. For example, if the type of classification is "knn" with k=3, the 3 nearest neighbors - based on these fields - were considered for the classification.
	BasedOn []string `json:"basedOn"`

	// The (reference) fields which were classified as part of this classification. Note that this might contain fewere entries than "scope", if one of the fields was already set prior to the classification, for example
	ClassifiedFields []string `json:"classifiedFields"`

	// Timestamp when this particular object was classified. This is usually sooner than the overall completion time of the classification, as the overall completion time will only be set once every object has been classified.
	// Format: date-time
	Completed strfmt.DateTime `json:"completed,omitempty"`

	// unique identifier of the classification run
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The properties in scope of the classification. Note that this doesn't mean that these fields were necessarily classified, this only means that those fields were in scope of the classificiation. See "classifiedFields" for details.
	Scope []string `json:"scope"`
}

// Validate validates this underscore properties classification
func (m *UnderscorePropertiesClassification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnderscorePropertiesClassification) validateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.Completed) { // not required
		return nil
	}

	if err := validate.FormatOf("completed", "body", "date-time", m.Completed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UnderscorePropertiesClassification) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnderscorePropertiesClassification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnderscorePropertiesClassification) UnmarshalBinary(b []byte) error {
	var res UnderscorePropertiesClassification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
