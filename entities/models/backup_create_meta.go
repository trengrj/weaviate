//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2022 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupCreateMeta The definition of a backup create metadata
//
// swagger:model BackupCreateMeta
type BackupCreateMeta struct {

	// The list of classes for which the backup creation process was started
	Classes []string `json:"classes"`

	// error message if creation failed
	Error string `json:"error,omitempty"`

	// The ID of the backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
	ID string `json:"id,omitempty"`

	// destination path of backup files proper to selected storage
	Path string `json:"path,omitempty"`

	// phase of backup creation process
	// Enum: [STARTED TRANSFERRING TRANSFERRED SUCCESS FAILED]
	Status *string `json:"status,omitempty"`

	// Storage name e.g. filesystem, gcs, s3.
	StorageName string `json:"storageName,omitempty"`
}

// Validate validates this backup create meta
func (m *BackupCreateMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backupCreateMetaTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STARTED","TRANSFERRING","TRANSFERRED","SUCCESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupCreateMetaTypeStatusPropEnum = append(backupCreateMetaTypeStatusPropEnum, v)
	}
}

const (

	// BackupCreateMetaStatusSTARTED captures enum value "STARTED"
	BackupCreateMetaStatusSTARTED string = "STARTED"

	// BackupCreateMetaStatusTRANSFERRING captures enum value "TRANSFERRING"
	BackupCreateMetaStatusTRANSFERRING string = "TRANSFERRING"

	// BackupCreateMetaStatusTRANSFERRED captures enum value "TRANSFERRED"
	BackupCreateMetaStatusTRANSFERRED string = "TRANSFERRED"

	// BackupCreateMetaStatusSUCCESS captures enum value "SUCCESS"
	BackupCreateMetaStatusSUCCESS string = "SUCCESS"

	// BackupCreateMetaStatusFAILED captures enum value "FAILED"
	BackupCreateMetaStatusFAILED string = "FAILED"
)

// prop value enum
func (m *BackupCreateMeta) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupCreateMetaTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupCreateMeta) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupCreateMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupCreateMeta) UnmarshalBinary(b []byte) error {
	var res BackupCreateMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
