//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// SchemaThingsDeleteOKCode is the HTTP code returned for type SchemaThingsDeleteOK
const SchemaThingsDeleteOKCode int = 200

/*SchemaThingsDeleteOK Removed the Thing class from the ontology.

swagger:response schemaThingsDeleteOK
*/
type SchemaThingsDeleteOK struct {
}

// NewSchemaThingsDeleteOK creates SchemaThingsDeleteOK with default headers values
func NewSchemaThingsDeleteOK() *SchemaThingsDeleteOK {

	return &SchemaThingsDeleteOK{}
}

// WriteResponse to the client
func (o *SchemaThingsDeleteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SchemaThingsDeleteBadRequestCode is the HTTP code returned for type SchemaThingsDeleteBadRequest
const SchemaThingsDeleteBadRequestCode int = 400

/*SchemaThingsDeleteBadRequest Could not delete the Thing class.

swagger:response schemaThingsDeleteBadRequest
*/
type SchemaThingsDeleteBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaThingsDeleteBadRequest creates SchemaThingsDeleteBadRequest with default headers values
func NewSchemaThingsDeleteBadRequest() *SchemaThingsDeleteBadRequest {

	return &SchemaThingsDeleteBadRequest{}
}

// WithPayload adds the payload to the schema things delete bad request response
func (o *SchemaThingsDeleteBadRequest) WithPayload(payload *models.ErrorResponse) *SchemaThingsDeleteBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema things delete bad request response
func (o *SchemaThingsDeleteBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaThingsDeleteBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaThingsDeleteUnauthorizedCode is the HTTP code returned for type SchemaThingsDeleteUnauthorized
const SchemaThingsDeleteUnauthorizedCode int = 401

/*SchemaThingsDeleteUnauthorized Unauthorized or invalid credentials.

swagger:response schemaThingsDeleteUnauthorized
*/
type SchemaThingsDeleteUnauthorized struct {
}

// NewSchemaThingsDeleteUnauthorized creates SchemaThingsDeleteUnauthorized with default headers values
func NewSchemaThingsDeleteUnauthorized() *SchemaThingsDeleteUnauthorized {

	return &SchemaThingsDeleteUnauthorized{}
}

// WriteResponse to the client
func (o *SchemaThingsDeleteUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// SchemaThingsDeleteForbiddenCode is the HTTP code returned for type SchemaThingsDeleteForbidden
const SchemaThingsDeleteForbiddenCode int = 403

/*SchemaThingsDeleteForbidden Forbidden

swagger:response schemaThingsDeleteForbidden
*/
type SchemaThingsDeleteForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaThingsDeleteForbidden creates SchemaThingsDeleteForbidden with default headers values
func NewSchemaThingsDeleteForbidden() *SchemaThingsDeleteForbidden {

	return &SchemaThingsDeleteForbidden{}
}

// WithPayload adds the payload to the schema things delete forbidden response
func (o *SchemaThingsDeleteForbidden) WithPayload(payload *models.ErrorResponse) *SchemaThingsDeleteForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema things delete forbidden response
func (o *SchemaThingsDeleteForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaThingsDeleteForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaThingsDeleteInternalServerErrorCode is the HTTP code returned for type SchemaThingsDeleteInternalServerError
const SchemaThingsDeleteInternalServerErrorCode int = 500

/*SchemaThingsDeleteInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response schemaThingsDeleteInternalServerError
*/
type SchemaThingsDeleteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaThingsDeleteInternalServerError creates SchemaThingsDeleteInternalServerError with default headers values
func NewSchemaThingsDeleteInternalServerError() *SchemaThingsDeleteInternalServerError {

	return &SchemaThingsDeleteInternalServerError{}
}

// WithPayload adds the payload to the schema things delete internal server error response
func (o *SchemaThingsDeleteInternalServerError) WithPayload(payload *models.ErrorResponse) *SchemaThingsDeleteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema things delete internal server error response
func (o *SchemaThingsDeleteInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaThingsDeleteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
