/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/semi-technologies/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@semi.technology
 */ // Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateSchemaActionsPropertiesDeleteOKCode is the HTTP code returned for type WeaviateSchemaActionsPropertiesDeleteOK
const WeaviateSchemaActionsPropertiesDeleteOKCode int = 200

/*WeaviateSchemaActionsPropertiesDeleteOK Removed the property from the ontology.

swagger:response weaviateSchemaActionsPropertiesDeleteOK
*/
type WeaviateSchemaActionsPropertiesDeleteOK struct {
}

// NewWeaviateSchemaActionsPropertiesDeleteOK creates WeaviateSchemaActionsPropertiesDeleteOK with default headers values
func NewWeaviateSchemaActionsPropertiesDeleteOK() *WeaviateSchemaActionsPropertiesDeleteOK {

	return &WeaviateSchemaActionsPropertiesDeleteOK{}
}

// WriteResponse to the client
func (o *WeaviateSchemaActionsPropertiesDeleteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// WeaviateSchemaActionsPropertiesDeleteUnauthorizedCode is the HTTP code returned for type WeaviateSchemaActionsPropertiesDeleteUnauthorized
const WeaviateSchemaActionsPropertiesDeleteUnauthorizedCode int = 401

/*WeaviateSchemaActionsPropertiesDeleteUnauthorized Unauthorized or invalid credentials.

swagger:response weaviateSchemaActionsPropertiesDeleteUnauthorized
*/
type WeaviateSchemaActionsPropertiesDeleteUnauthorized struct {
}

// NewWeaviateSchemaActionsPropertiesDeleteUnauthorized creates WeaviateSchemaActionsPropertiesDeleteUnauthorized with default headers values
func NewWeaviateSchemaActionsPropertiesDeleteUnauthorized() *WeaviateSchemaActionsPropertiesDeleteUnauthorized {

	return &WeaviateSchemaActionsPropertiesDeleteUnauthorized{}
}

// WriteResponse to the client
func (o *WeaviateSchemaActionsPropertiesDeleteUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// WeaviateSchemaActionsPropertiesDeleteForbiddenCode is the HTTP code returned for type WeaviateSchemaActionsPropertiesDeleteForbidden
const WeaviateSchemaActionsPropertiesDeleteForbiddenCode int = 403

/*WeaviateSchemaActionsPropertiesDeleteForbidden Forbidden

swagger:response weaviateSchemaActionsPropertiesDeleteForbidden
*/
type WeaviateSchemaActionsPropertiesDeleteForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateSchemaActionsPropertiesDeleteForbidden creates WeaviateSchemaActionsPropertiesDeleteForbidden with default headers values
func NewWeaviateSchemaActionsPropertiesDeleteForbidden() *WeaviateSchemaActionsPropertiesDeleteForbidden {

	return &WeaviateSchemaActionsPropertiesDeleteForbidden{}
}

// WithPayload adds the payload to the weaviate schema actions properties delete forbidden response
func (o *WeaviateSchemaActionsPropertiesDeleteForbidden) WithPayload(payload *models.ErrorResponse) *WeaviateSchemaActionsPropertiesDeleteForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate schema actions properties delete forbidden response
func (o *WeaviateSchemaActionsPropertiesDeleteForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateSchemaActionsPropertiesDeleteForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateSchemaActionsPropertiesDeleteInternalServerErrorCode is the HTTP code returned for type WeaviateSchemaActionsPropertiesDeleteInternalServerError
const WeaviateSchemaActionsPropertiesDeleteInternalServerErrorCode int = 500

/*WeaviateSchemaActionsPropertiesDeleteInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response weaviateSchemaActionsPropertiesDeleteInternalServerError
*/
type WeaviateSchemaActionsPropertiesDeleteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateSchemaActionsPropertiesDeleteInternalServerError creates WeaviateSchemaActionsPropertiesDeleteInternalServerError with default headers values
func NewWeaviateSchemaActionsPropertiesDeleteInternalServerError() *WeaviateSchemaActionsPropertiesDeleteInternalServerError {

	return &WeaviateSchemaActionsPropertiesDeleteInternalServerError{}
}

// WithPayload adds the payload to the weaviate schema actions properties delete internal server error response
func (o *WeaviateSchemaActionsPropertiesDeleteInternalServerError) WithPayload(payload *models.ErrorResponse) *WeaviateSchemaActionsPropertiesDeleteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate schema actions properties delete internal server error response
func (o *WeaviateSchemaActionsPropertiesDeleteInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateSchemaActionsPropertiesDeleteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
