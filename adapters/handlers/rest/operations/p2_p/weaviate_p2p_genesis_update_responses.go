/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
 * LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
 * CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@semi.technology
 */ // Code generated by go-swagger; DO NOT EDIT.

package p2_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateP2pGenesisUpdateOKCode is the HTTP code returned for type WeaviateP2pGenesisUpdateOK
const WeaviateP2pGenesisUpdateOKCode int = 200

/*WeaviateP2pGenesisUpdateOK Alive and kicking!

swagger:response weaviateP2pGenesisUpdateOK
*/
type WeaviateP2pGenesisUpdateOK struct {
}

// NewWeaviateP2pGenesisUpdateOK creates WeaviateP2pGenesisUpdateOK with default headers values
func NewWeaviateP2pGenesisUpdateOK() *WeaviateP2pGenesisUpdateOK {

	return &WeaviateP2pGenesisUpdateOK{}
}

// WriteResponse to the client
func (o *WeaviateP2pGenesisUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// WeaviateP2pGenesisUpdateUnauthorizedCode is the HTTP code returned for type WeaviateP2pGenesisUpdateUnauthorized
const WeaviateP2pGenesisUpdateUnauthorizedCode int = 401

/*WeaviateP2pGenesisUpdateUnauthorized Unauthorized update.

swagger:response weaviateP2pGenesisUpdateUnauthorized
*/
type WeaviateP2pGenesisUpdateUnauthorized struct {
}

// NewWeaviateP2pGenesisUpdateUnauthorized creates WeaviateP2pGenesisUpdateUnauthorized with default headers values
func NewWeaviateP2pGenesisUpdateUnauthorized() *WeaviateP2pGenesisUpdateUnauthorized {

	return &WeaviateP2pGenesisUpdateUnauthorized{}
}

// WriteResponse to the client
func (o *WeaviateP2pGenesisUpdateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// WeaviateP2pGenesisUpdateInternalServerErrorCode is the HTTP code returned for type WeaviateP2pGenesisUpdateInternalServerError
const WeaviateP2pGenesisUpdateInternalServerErrorCode int = 500

/*WeaviateP2pGenesisUpdateInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response weaviateP2pGenesisUpdateInternalServerError
*/
type WeaviateP2pGenesisUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateP2pGenesisUpdateInternalServerError creates WeaviateP2pGenesisUpdateInternalServerError with default headers values
func NewWeaviateP2pGenesisUpdateInternalServerError() *WeaviateP2pGenesisUpdateInternalServerError {

	return &WeaviateP2pGenesisUpdateInternalServerError{}
}

// WithPayload adds the payload to the weaviate p2p genesis update internal server error response
func (o *WeaviateP2pGenesisUpdateInternalServerError) WithPayload(payload *models.ErrorResponse) *WeaviateP2pGenesisUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate p2p genesis update internal server error response
func (o *WeaviateP2pGenesisUpdateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateP2pGenesisUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
