/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
 * LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
 * CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@semi.technology
 */ // Code generated by go-swagger; DO NOT EDIT.

package p2_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaviateP2pGenesisUpdateHandlerFunc turns a function with the right signature into a weaviate p2p genesis update handler
type WeaviateP2pGenesisUpdateHandlerFunc func(WeaviateP2pGenesisUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaviateP2pGenesisUpdateHandlerFunc) Handle(params WeaviateP2pGenesisUpdateParams) middleware.Responder {
	return fn(params)
}

// WeaviateP2pGenesisUpdateHandler interface for that can handle valid weaviate p2p genesis update params
type WeaviateP2pGenesisUpdateHandler interface {
	Handle(WeaviateP2pGenesisUpdateParams) middleware.Responder
}

// NewWeaviateP2pGenesisUpdate creates a new http.Handler for the weaviate p2p genesis update operation
func NewWeaviateP2pGenesisUpdate(ctx *middleware.Context, handler WeaviateP2pGenesisUpdateHandler) *WeaviateP2pGenesisUpdate {
	return &WeaviateP2pGenesisUpdate{Context: ctx, Handler: handler}
}

/*WeaviateP2pGenesisUpdate swagger:route PUT /p2p/genesis P2P weaviateP2pGenesisUpdate

Receive an update from the Genesis server.

*/
type WeaviateP2pGenesisUpdate struct {
	Context *middleware.Context
	Handler WeaviateP2pGenesisUpdateHandler
}

func (o *WeaviateP2pGenesisUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWeaviateP2pGenesisUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
