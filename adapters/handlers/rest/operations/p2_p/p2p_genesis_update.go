//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE: https://github.com/semi-technologies/weaviate/blob/develop/LICENSE.md
//  DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package p2_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// P2pGenesisUpdateHandlerFunc turns a function with the right signature into a p2p genesis update handler
type P2pGenesisUpdateHandlerFunc func(P2pGenesisUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn P2pGenesisUpdateHandlerFunc) Handle(params P2pGenesisUpdateParams) middleware.Responder {
	return fn(params)
}

// P2pGenesisUpdateHandler interface for that can handle valid p2p genesis update params
type P2pGenesisUpdateHandler interface {
	Handle(P2pGenesisUpdateParams) middleware.Responder
}

// NewP2pGenesisUpdate creates a new http.Handler for the p2p genesis update operation
func NewP2pGenesisUpdate(ctx *middleware.Context, handler P2pGenesisUpdateHandler) *P2pGenesisUpdate {
	return &P2pGenesisUpdate{Context: ctx, Handler: handler}
}

/*P2pGenesisUpdate swagger:route PUT /p2p/genesis P2P p2pGenesisUpdate

Receive an update from the Genesis server.

*/
type P2pGenesisUpdate struct {
	Context *middleware.Context
	Handler P2pGenesisUpdateHandler
}

func (o *P2pGenesisUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewP2pGenesisUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
