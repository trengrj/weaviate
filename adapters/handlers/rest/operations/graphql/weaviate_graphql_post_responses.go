//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
// 
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package graphql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateGraphqlPostOKCode is the HTTP code returned for type WeaviateGraphqlPostOK
const WeaviateGraphqlPostOKCode int = 200

/*WeaviateGraphqlPostOK Successful query (with select).

swagger:response weaviateGraphqlPostOK
*/
type WeaviateGraphqlPostOK struct {

	/*
	  In: Body
	*/
	Payload *models.GraphQLResponse `json:"body,omitempty"`
}

// NewWeaviateGraphqlPostOK creates WeaviateGraphqlPostOK with default headers values
func NewWeaviateGraphqlPostOK() *WeaviateGraphqlPostOK {

	return &WeaviateGraphqlPostOK{}
}

// WithPayload adds the payload to the weaviate graphql post o k response
func (o *WeaviateGraphqlPostOK) WithPayload(payload *models.GraphQLResponse) *WeaviateGraphqlPostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate graphql post o k response
func (o *WeaviateGraphqlPostOK) SetPayload(payload *models.GraphQLResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateGraphqlPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateGraphqlPostUnauthorizedCode is the HTTP code returned for type WeaviateGraphqlPostUnauthorized
const WeaviateGraphqlPostUnauthorizedCode int = 401

/*WeaviateGraphqlPostUnauthorized Unauthorized or invalid credentials.

swagger:response weaviateGraphqlPostUnauthorized
*/
type WeaviateGraphqlPostUnauthorized struct {
}

// NewWeaviateGraphqlPostUnauthorized creates WeaviateGraphqlPostUnauthorized with default headers values
func NewWeaviateGraphqlPostUnauthorized() *WeaviateGraphqlPostUnauthorized {

	return &WeaviateGraphqlPostUnauthorized{}
}

// WriteResponse to the client
func (o *WeaviateGraphqlPostUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// WeaviateGraphqlPostForbiddenCode is the HTTP code returned for type WeaviateGraphqlPostForbidden
const WeaviateGraphqlPostForbiddenCode int = 403

/*WeaviateGraphqlPostForbidden Forbidden

swagger:response weaviateGraphqlPostForbidden
*/
type WeaviateGraphqlPostForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateGraphqlPostForbidden creates WeaviateGraphqlPostForbidden with default headers values
func NewWeaviateGraphqlPostForbidden() *WeaviateGraphqlPostForbidden {

	return &WeaviateGraphqlPostForbidden{}
}

// WithPayload adds the payload to the weaviate graphql post forbidden response
func (o *WeaviateGraphqlPostForbidden) WithPayload(payload *models.ErrorResponse) *WeaviateGraphqlPostForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate graphql post forbidden response
func (o *WeaviateGraphqlPostForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateGraphqlPostForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateGraphqlPostUnprocessableEntityCode is the HTTP code returned for type WeaviateGraphqlPostUnprocessableEntity
const WeaviateGraphqlPostUnprocessableEntityCode int = 422

/*WeaviateGraphqlPostUnprocessableEntity Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?

swagger:response weaviateGraphqlPostUnprocessableEntity
*/
type WeaviateGraphqlPostUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateGraphqlPostUnprocessableEntity creates WeaviateGraphqlPostUnprocessableEntity with default headers values
func NewWeaviateGraphqlPostUnprocessableEntity() *WeaviateGraphqlPostUnprocessableEntity {

	return &WeaviateGraphqlPostUnprocessableEntity{}
}

// WithPayload adds the payload to the weaviate graphql post unprocessable entity response
func (o *WeaviateGraphqlPostUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *WeaviateGraphqlPostUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate graphql post unprocessable entity response
func (o *WeaviateGraphqlPostUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateGraphqlPostUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateGraphqlPostInternalServerErrorCode is the HTTP code returned for type WeaviateGraphqlPostInternalServerError
const WeaviateGraphqlPostInternalServerErrorCode int = 500

/*WeaviateGraphqlPostInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response weaviateGraphqlPostInternalServerError
*/
type WeaviateGraphqlPostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateGraphqlPostInternalServerError creates WeaviateGraphqlPostInternalServerError with default headers values
func NewWeaviateGraphqlPostInternalServerError() *WeaviateGraphqlPostInternalServerError {

	return &WeaviateGraphqlPostInternalServerError{}
}

// WithPayload adds the payload to the weaviate graphql post internal server error response
func (o *WeaviateGraphqlPostInternalServerError) WithPayload(payload *models.ErrorResponse) *WeaviateGraphqlPostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate graphql post internal server error response
func (o *WeaviateGraphqlPostInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateGraphqlPostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
