//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateThingsUpdateOKCode is the HTTP code returned for type WeaviateThingsUpdateOK
const WeaviateThingsUpdateOKCode int = 200

/*WeaviateThingsUpdateOK Successfully received.

swagger:response weaviateThingsUpdateOK
*/
type WeaviateThingsUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Thing `json:"body,omitempty"`
}

// NewWeaviateThingsUpdateOK creates WeaviateThingsUpdateOK with default headers values
func NewWeaviateThingsUpdateOK() *WeaviateThingsUpdateOK {

	return &WeaviateThingsUpdateOK{}
}

// WithPayload adds the payload to the weaviate things update o k response
func (o *WeaviateThingsUpdateOK) WithPayload(payload *models.Thing) *WeaviateThingsUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate things update o k response
func (o *WeaviateThingsUpdateOK) SetPayload(payload *models.Thing) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateThingsUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateThingsUpdateUnauthorizedCode is the HTTP code returned for type WeaviateThingsUpdateUnauthorized
const WeaviateThingsUpdateUnauthorizedCode int = 401

/*WeaviateThingsUpdateUnauthorized Unauthorized or invalid credentials.

swagger:response weaviateThingsUpdateUnauthorized
*/
type WeaviateThingsUpdateUnauthorized struct {
}

// NewWeaviateThingsUpdateUnauthorized creates WeaviateThingsUpdateUnauthorized with default headers values
func NewWeaviateThingsUpdateUnauthorized() *WeaviateThingsUpdateUnauthorized {

	return &WeaviateThingsUpdateUnauthorized{}
}

// WriteResponse to the client
func (o *WeaviateThingsUpdateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// WeaviateThingsUpdateForbiddenCode is the HTTP code returned for type WeaviateThingsUpdateForbidden
const WeaviateThingsUpdateForbiddenCode int = 403

/*WeaviateThingsUpdateForbidden Forbidden

swagger:response weaviateThingsUpdateForbidden
*/
type WeaviateThingsUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateThingsUpdateForbidden creates WeaviateThingsUpdateForbidden with default headers values
func NewWeaviateThingsUpdateForbidden() *WeaviateThingsUpdateForbidden {

	return &WeaviateThingsUpdateForbidden{}
}

// WithPayload adds the payload to the weaviate things update forbidden response
func (o *WeaviateThingsUpdateForbidden) WithPayload(payload *models.ErrorResponse) *WeaviateThingsUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate things update forbidden response
func (o *WeaviateThingsUpdateForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateThingsUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateThingsUpdateNotFoundCode is the HTTP code returned for type WeaviateThingsUpdateNotFound
const WeaviateThingsUpdateNotFoundCode int = 404

/*WeaviateThingsUpdateNotFound Successful query result but no resource was found.

swagger:response weaviateThingsUpdateNotFound
*/
type WeaviateThingsUpdateNotFound struct {
}

// NewWeaviateThingsUpdateNotFound creates WeaviateThingsUpdateNotFound with default headers values
func NewWeaviateThingsUpdateNotFound() *WeaviateThingsUpdateNotFound {

	return &WeaviateThingsUpdateNotFound{}
}

// WriteResponse to the client
func (o *WeaviateThingsUpdateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// WeaviateThingsUpdateUnprocessableEntityCode is the HTTP code returned for type WeaviateThingsUpdateUnprocessableEntity
const WeaviateThingsUpdateUnprocessableEntityCode int = 422

/*WeaviateThingsUpdateUnprocessableEntity Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?

swagger:response weaviateThingsUpdateUnprocessableEntity
*/
type WeaviateThingsUpdateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateThingsUpdateUnprocessableEntity creates WeaviateThingsUpdateUnprocessableEntity with default headers values
func NewWeaviateThingsUpdateUnprocessableEntity() *WeaviateThingsUpdateUnprocessableEntity {

	return &WeaviateThingsUpdateUnprocessableEntity{}
}

// WithPayload adds the payload to the weaviate things update unprocessable entity response
func (o *WeaviateThingsUpdateUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *WeaviateThingsUpdateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate things update unprocessable entity response
func (o *WeaviateThingsUpdateUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateThingsUpdateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateThingsUpdateInternalServerErrorCode is the HTTP code returned for type WeaviateThingsUpdateInternalServerError
const WeaviateThingsUpdateInternalServerErrorCode int = 500

/*WeaviateThingsUpdateInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response weaviateThingsUpdateInternalServerError
*/
type WeaviateThingsUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateThingsUpdateInternalServerError creates WeaviateThingsUpdateInternalServerError with default headers values
func NewWeaviateThingsUpdateInternalServerError() *WeaviateThingsUpdateInternalServerError {

	return &WeaviateThingsUpdateInternalServerError{}
}

// WithPayload adds the payload to the weaviate things update internal server error response
func (o *WeaviateThingsUpdateInternalServerError) WithPayload(payload *models.ErrorResponse) *WeaviateThingsUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate things update internal server error response
func (o *WeaviateThingsUpdateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateThingsUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
