//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateThingsDeleteNoContentCode is the HTTP code returned for type WeaviateThingsDeleteNoContent
const WeaviateThingsDeleteNoContentCode int = 204

/*WeaviateThingsDeleteNoContent Successfully deleted.

swagger:response weaviateThingsDeleteNoContent
*/
type WeaviateThingsDeleteNoContent struct {
}

// NewWeaviateThingsDeleteNoContent creates WeaviateThingsDeleteNoContent with default headers values
func NewWeaviateThingsDeleteNoContent() *WeaviateThingsDeleteNoContent {

	return &WeaviateThingsDeleteNoContent{}
}

// WriteResponse to the client
func (o *WeaviateThingsDeleteNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// WeaviateThingsDeleteUnauthorizedCode is the HTTP code returned for type WeaviateThingsDeleteUnauthorized
const WeaviateThingsDeleteUnauthorizedCode int = 401

/*WeaviateThingsDeleteUnauthorized Unauthorized or invalid credentials.

swagger:response weaviateThingsDeleteUnauthorized
*/
type WeaviateThingsDeleteUnauthorized struct {
}

// NewWeaviateThingsDeleteUnauthorized creates WeaviateThingsDeleteUnauthorized with default headers values
func NewWeaviateThingsDeleteUnauthorized() *WeaviateThingsDeleteUnauthorized {

	return &WeaviateThingsDeleteUnauthorized{}
}

// WriteResponse to the client
func (o *WeaviateThingsDeleteUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// WeaviateThingsDeleteForbiddenCode is the HTTP code returned for type WeaviateThingsDeleteForbidden
const WeaviateThingsDeleteForbiddenCode int = 403

/*WeaviateThingsDeleteForbidden Forbidden

swagger:response weaviateThingsDeleteForbidden
*/
type WeaviateThingsDeleteForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateThingsDeleteForbidden creates WeaviateThingsDeleteForbidden with default headers values
func NewWeaviateThingsDeleteForbidden() *WeaviateThingsDeleteForbidden {

	return &WeaviateThingsDeleteForbidden{}
}

// WithPayload adds the payload to the weaviate things delete forbidden response
func (o *WeaviateThingsDeleteForbidden) WithPayload(payload *models.ErrorResponse) *WeaviateThingsDeleteForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate things delete forbidden response
func (o *WeaviateThingsDeleteForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateThingsDeleteForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WeaviateThingsDeleteNotFoundCode is the HTTP code returned for type WeaviateThingsDeleteNotFound
const WeaviateThingsDeleteNotFoundCode int = 404

/*WeaviateThingsDeleteNotFound Successful query result but no resource was found.

swagger:response weaviateThingsDeleteNotFound
*/
type WeaviateThingsDeleteNotFound struct {
}

// NewWeaviateThingsDeleteNotFound creates WeaviateThingsDeleteNotFound with default headers values
func NewWeaviateThingsDeleteNotFound() *WeaviateThingsDeleteNotFound {

	return &WeaviateThingsDeleteNotFound{}
}

// WriteResponse to the client
func (o *WeaviateThingsDeleteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// WeaviateThingsDeleteInternalServerErrorCode is the HTTP code returned for type WeaviateThingsDeleteInternalServerError
const WeaviateThingsDeleteInternalServerErrorCode int = 500

/*WeaviateThingsDeleteInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response weaviateThingsDeleteInternalServerError
*/
type WeaviateThingsDeleteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewWeaviateThingsDeleteInternalServerError creates WeaviateThingsDeleteInternalServerError with default headers values
func NewWeaviateThingsDeleteInternalServerError() *WeaviateThingsDeleteInternalServerError {

	return &WeaviateThingsDeleteInternalServerError{}
}

// WithPayload adds the payload to the weaviate things delete internal server error response
func (o *WeaviateThingsDeleteInternalServerError) WithPayload(payload *models.ErrorResponse) *WeaviateThingsDeleteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the weaviate things delete internal server error response
func (o *WeaviateThingsDeleteInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WeaviateThingsDeleteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
