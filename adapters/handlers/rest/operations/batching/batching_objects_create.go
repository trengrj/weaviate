//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package batching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/semi-technologies/weaviate/entities/models"
)

// BatchingObjectsCreateHandlerFunc turns a function with the right signature into a batching objects create handler
type BatchingObjectsCreateHandlerFunc func(BatchingObjectsCreateParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn BatchingObjectsCreateHandlerFunc) Handle(params BatchingObjectsCreateParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// BatchingObjectsCreateHandler interface for that can handle valid batching objects create params
type BatchingObjectsCreateHandler interface {
	Handle(BatchingObjectsCreateParams, *models.Principal) middleware.Responder
}

// NewBatchingObjectsCreate creates a new http.Handler for the batching objects create operation
func NewBatchingObjectsCreate(ctx *middleware.Context, handler BatchingObjectsCreateHandler) *BatchingObjectsCreate {
	return &BatchingObjectsCreate{Context: ctx, Handler: handler}
}

/*BatchingObjectsCreate swagger:route POST /batching/objects batching objects batchingObjectsCreate

Creates new Objects based on a Object template as a batch.

Register new Objects in bulk. Provided meta-data and schema values are validated.

*/
type BatchingObjectsCreate struct {
	Context *middleware.Context
	Handler BatchingObjectsCreateHandler
}

func (o *BatchingObjectsCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBatchingObjectsCreateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// BatchingObjectsCreateBody batching objects create body
//
// swagger:model BatchingObjectsCreateBody
type BatchingObjectsCreateBody struct {

	// Define which fields need to be returned. Default value is ALL
	Fields []*string `yaml:"fields" json:"fields"`

	// objects
	Objects []*models.Object `yaml:"objects" json:"objects"`
}

// Validate validates this batching objects create body
func (o *BatchingObjectsCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var batchingObjectsCreateBodyFieldsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","class","schema","id","creationTimeUnix"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchingObjectsCreateBodyFieldsItemsEnum = append(batchingObjectsCreateBodyFieldsItemsEnum, v)
	}
}

func (o *BatchingObjectsCreateBody) validateFieldsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, batchingObjectsCreateBodyFieldsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *BatchingObjectsCreateBody) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		// value enum
		if err := o.validateFieldsItemsEnum("body"+"."+"fields"+"."+strconv.Itoa(i), "body", *o.Fields[i]); err != nil {
			return err
		}

	}

	return nil
}

func (o *BatchingObjectsCreateBody) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(o.Objects) { // not required
		return nil
	}

	for i := 0; i < len(o.Objects); i++ {
		if swag.IsZero(o.Objects[i]) { // not required
			continue
		}

		if o.Objects[i] != nil {
			if err := o.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BatchingObjectsCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BatchingObjectsCreateBody) UnmarshalBinary(b []byte) error {
	var res BatchingObjectsCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
