//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	"github.com/go-openapi/runtime/yamlpc"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/actions"
	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/contextionary_api"
	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/graphql"
	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/meta"
	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/p2_p"
	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/schema"
	"github.com/semi-technologies/weaviate/adapters/handlers/rest/operations/things"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// NewWeaviateAPI creates a new Weaviate instance
func NewWeaviateAPI(spec *loads.Document) *WeaviateAPI {
	return &WeaviateAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		YamlConsumer:        yamlpc.YAMLConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		GetWellKnownOpenidConfigurationHandler: GetWellKnownOpenidConfigurationHandlerFunc(func(params GetWellKnownOpenidConfigurationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation GetWellKnownOpenidConfiguration has not yet been implemented")
		}),
		ActionsActionsCreateHandler: actions.ActionsCreateHandlerFunc(func(params actions.ActionsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsCreate has not yet been implemented")
		}),
		ActionsActionsDeleteHandler: actions.ActionsDeleteHandlerFunc(func(params actions.ActionsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsDelete has not yet been implemented")
		}),
		ActionsActionsGetHandler: actions.ActionsGetHandlerFunc(func(params actions.ActionsGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsGet has not yet been implemented")
		}),
		ActionsActionsListHandler: actions.ActionsListHandlerFunc(func(params actions.ActionsListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsList has not yet been implemented")
		}),
		ActionsActionsPatchHandler: actions.ActionsPatchHandlerFunc(func(params actions.ActionsPatchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsPatch has not yet been implemented")
		}),
		ActionsActionsReferencesCreateHandler: actions.ActionsReferencesCreateHandlerFunc(func(params actions.ActionsReferencesCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsReferencesCreate has not yet been implemented")
		}),
		ActionsActionsReferencesDeleteHandler: actions.ActionsReferencesDeleteHandlerFunc(func(params actions.ActionsReferencesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsReferencesDelete has not yet been implemented")
		}),
		ActionsActionsReferencesUpdateHandler: actions.ActionsReferencesUpdateHandlerFunc(func(params actions.ActionsReferencesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsReferencesUpdate has not yet been implemented")
		}),
		ActionsActionsUpdateHandler: actions.ActionsUpdateHandlerFunc(func(params actions.ActionsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsUpdate has not yet been implemented")
		}),
		ActionsActionsValidateHandler: actions.ActionsValidateHandlerFunc(func(params actions.ActionsValidateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsActionsValidate has not yet been implemented")
		}),
		BatchingActionsCreateHandler: BatchingActionsCreateHandlerFunc(func(params BatchingActionsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BatchingActionsCreate has not yet been implemented")
		}),
		BatchingReferencesCreateHandler: BatchingReferencesCreateHandlerFunc(func(params BatchingReferencesCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BatchingReferencesCreate has not yet been implemented")
		}),
		BatchingThingsCreateHandler: BatchingThingsCreateHandlerFunc(func(params BatchingThingsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BatchingThingsCreate has not yet been implemented")
		}),
		ContextionaryAPIC11yCorpusGetHandler: contextionary_api.C11yCorpusGetHandlerFunc(func(params contextionary_api.C11yCorpusGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ContextionaryAPIC11yCorpusGet has not yet been implemented")
		}),
		ContextionaryAPIC11yWordsHandler: contextionary_api.C11yWordsHandlerFunc(func(params contextionary_api.C11yWordsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ContextionaryAPIC11yWords has not yet been implemented")
		}),
		GraphqlGraphqlBatchHandler: graphql.GraphqlBatchHandlerFunc(func(params graphql.GraphqlBatchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation GraphqlGraphqlBatch has not yet been implemented")
		}),
		GraphqlGraphqlPostHandler: graphql.GraphqlPostHandlerFunc(func(params graphql.GraphqlPostParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation GraphqlGraphqlPost has not yet been implemented")
		}),
		MetaMetaGetHandler: meta.MetaGetHandlerFunc(func(params meta.MetaGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MetaMetaGet has not yet been implemented")
		}),
		P2PP2pGenesisUpdateHandler: p2_p.P2pGenesisUpdateHandlerFunc(func(params p2_p.P2pGenesisUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation P2PP2pGenesisUpdate has not yet been implemented")
		}),
		P2PP2pHealthHandler: p2_p.P2pHealthHandlerFunc(func(params p2_p.P2pHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation P2PP2pHealth has not yet been implemented")
		}),
		SchemaSchemaActionsCreateHandler: schema.SchemaActionsCreateHandlerFunc(func(params schema.SchemaActionsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaActionsCreate has not yet been implemented")
		}),
		SchemaSchemaActionsDeleteHandler: schema.SchemaActionsDeleteHandlerFunc(func(params schema.SchemaActionsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaActionsDelete has not yet been implemented")
		}),
		SchemaSchemaActionsPropertiesAddHandler: schema.SchemaActionsPropertiesAddHandlerFunc(func(params schema.SchemaActionsPropertiesAddParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaActionsPropertiesAdd has not yet been implemented")
		}),
		SchemaSchemaActionsPropertiesDeleteHandler: schema.SchemaActionsPropertiesDeleteHandlerFunc(func(params schema.SchemaActionsPropertiesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaActionsPropertiesDelete has not yet been implemented")
		}),
		SchemaSchemaActionsPropertiesUpdateHandler: schema.SchemaActionsPropertiesUpdateHandlerFunc(func(params schema.SchemaActionsPropertiesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaActionsPropertiesUpdate has not yet been implemented")
		}),
		SchemaSchemaActionsUpdateHandler: schema.SchemaActionsUpdateHandlerFunc(func(params schema.SchemaActionsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaActionsUpdate has not yet been implemented")
		}),
		SchemaSchemaDumpHandler: schema.SchemaDumpHandlerFunc(func(params schema.SchemaDumpParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaDump has not yet been implemented")
		}),
		SchemaSchemaThingsCreateHandler: schema.SchemaThingsCreateHandlerFunc(func(params schema.SchemaThingsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaThingsCreate has not yet been implemented")
		}),
		SchemaSchemaThingsDeleteHandler: schema.SchemaThingsDeleteHandlerFunc(func(params schema.SchemaThingsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaThingsDelete has not yet been implemented")
		}),
		SchemaSchemaThingsPropertiesAddHandler: schema.SchemaThingsPropertiesAddHandlerFunc(func(params schema.SchemaThingsPropertiesAddParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaThingsPropertiesAdd has not yet been implemented")
		}),
		SchemaSchemaThingsPropertiesDeleteHandler: schema.SchemaThingsPropertiesDeleteHandlerFunc(func(params schema.SchemaThingsPropertiesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaThingsPropertiesDelete has not yet been implemented")
		}),
		SchemaSchemaThingsPropertiesUpdateHandler: schema.SchemaThingsPropertiesUpdateHandlerFunc(func(params schema.SchemaThingsPropertiesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaThingsPropertiesUpdate has not yet been implemented")
		}),
		SchemaSchemaThingsUpdateHandler: schema.SchemaThingsUpdateHandlerFunc(func(params schema.SchemaThingsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaSchemaThingsUpdate has not yet been implemented")
		}),
		ThingsThingsCreateHandler: things.ThingsCreateHandlerFunc(func(params things.ThingsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsCreate has not yet been implemented")
		}),
		ThingsThingsDeleteHandler: things.ThingsDeleteHandlerFunc(func(params things.ThingsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsDelete has not yet been implemented")
		}),
		ThingsThingsGetHandler: things.ThingsGetHandlerFunc(func(params things.ThingsGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsGet has not yet been implemented")
		}),
		ThingsThingsListHandler: things.ThingsListHandlerFunc(func(params things.ThingsListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsList has not yet been implemented")
		}),
		ThingsThingsPatchHandler: things.ThingsPatchHandlerFunc(func(params things.ThingsPatchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsPatch has not yet been implemented")
		}),
		ThingsThingsReferencesCreateHandler: things.ThingsReferencesCreateHandlerFunc(func(params things.ThingsReferencesCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsReferencesCreate has not yet been implemented")
		}),
		ThingsThingsReferencesDeleteHandler: things.ThingsReferencesDeleteHandlerFunc(func(params things.ThingsReferencesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsReferencesDelete has not yet been implemented")
		}),
		ThingsThingsReferencesUpdateHandler: things.ThingsReferencesUpdateHandlerFunc(func(params things.ThingsReferencesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsReferencesUpdate has not yet been implemented")
		}),
		ThingsThingsUpdateHandler: things.ThingsUpdateHandlerFunc(func(params things.ThingsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsUpdate has not yet been implemented")
		}),
		ThingsThingsValidateHandler: things.ThingsValidateHandlerFunc(func(params things.ThingsValidateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsThingsValidate has not yet been implemented")
		}),

		OidcAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (oidc) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*WeaviateAPI Open Source Knowledge Graph (GraphQL/RESTful/P2P) */
type WeaviateAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// YamlConsumer registers a consumer for a "application/yaml" mime type
	YamlConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// OidcAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OidcAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// GetWellKnownOpenidConfigurationHandler sets the operation handler for the get well known openid configuration operation
	GetWellKnownOpenidConfigurationHandler GetWellKnownOpenidConfigurationHandler
	// ActionsActionsCreateHandler sets the operation handler for the actions create operation
	ActionsActionsCreateHandler actions.ActionsCreateHandler
	// ActionsActionsDeleteHandler sets the operation handler for the actions delete operation
	ActionsActionsDeleteHandler actions.ActionsDeleteHandler
	// ActionsActionsGetHandler sets the operation handler for the actions get operation
	ActionsActionsGetHandler actions.ActionsGetHandler
	// ActionsActionsListHandler sets the operation handler for the actions list operation
	ActionsActionsListHandler actions.ActionsListHandler
	// ActionsActionsPatchHandler sets the operation handler for the actions patch operation
	ActionsActionsPatchHandler actions.ActionsPatchHandler
	// ActionsActionsReferencesCreateHandler sets the operation handler for the actions references create operation
	ActionsActionsReferencesCreateHandler actions.ActionsReferencesCreateHandler
	// ActionsActionsReferencesDeleteHandler sets the operation handler for the actions references delete operation
	ActionsActionsReferencesDeleteHandler actions.ActionsReferencesDeleteHandler
	// ActionsActionsReferencesUpdateHandler sets the operation handler for the actions references update operation
	ActionsActionsReferencesUpdateHandler actions.ActionsReferencesUpdateHandler
	// ActionsActionsUpdateHandler sets the operation handler for the actions update operation
	ActionsActionsUpdateHandler actions.ActionsUpdateHandler
	// ActionsActionsValidateHandler sets the operation handler for the actions validate operation
	ActionsActionsValidateHandler actions.ActionsValidateHandler
	// BatchingActionsCreateHandler sets the operation handler for the batching actions create operation
	BatchingActionsCreateHandler BatchingActionsCreateHandler
	// BatchingReferencesCreateHandler sets the operation handler for the batching references create operation
	BatchingReferencesCreateHandler BatchingReferencesCreateHandler
	// BatchingThingsCreateHandler sets the operation handler for the batching things create operation
	BatchingThingsCreateHandler BatchingThingsCreateHandler
	// ContextionaryAPIC11yCorpusGetHandler sets the operation handler for the c11y corpus get operation
	ContextionaryAPIC11yCorpusGetHandler contextionary_api.C11yCorpusGetHandler
	// ContextionaryAPIC11yWordsHandler sets the operation handler for the c11y words operation
	ContextionaryAPIC11yWordsHandler contextionary_api.C11yWordsHandler
	// GraphqlGraphqlBatchHandler sets the operation handler for the graphql batch operation
	GraphqlGraphqlBatchHandler graphql.GraphqlBatchHandler
	// GraphqlGraphqlPostHandler sets the operation handler for the graphql post operation
	GraphqlGraphqlPostHandler graphql.GraphqlPostHandler
	// MetaMetaGetHandler sets the operation handler for the meta get operation
	MetaMetaGetHandler meta.MetaGetHandler
	// P2PP2pGenesisUpdateHandler sets the operation handler for the p2p genesis update operation
	P2PP2pGenesisUpdateHandler p2_p.P2pGenesisUpdateHandler
	// P2PP2pHealthHandler sets the operation handler for the p2p health operation
	P2PP2pHealthHandler p2_p.P2pHealthHandler
	// SchemaSchemaActionsCreateHandler sets the operation handler for the schema actions create operation
	SchemaSchemaActionsCreateHandler schema.SchemaActionsCreateHandler
	// SchemaSchemaActionsDeleteHandler sets the operation handler for the schema actions delete operation
	SchemaSchemaActionsDeleteHandler schema.SchemaActionsDeleteHandler
	// SchemaSchemaActionsPropertiesAddHandler sets the operation handler for the schema actions properties add operation
	SchemaSchemaActionsPropertiesAddHandler schema.SchemaActionsPropertiesAddHandler
	// SchemaSchemaActionsPropertiesDeleteHandler sets the operation handler for the schema actions properties delete operation
	SchemaSchemaActionsPropertiesDeleteHandler schema.SchemaActionsPropertiesDeleteHandler
	// SchemaSchemaActionsPropertiesUpdateHandler sets the operation handler for the schema actions properties update operation
	SchemaSchemaActionsPropertiesUpdateHandler schema.SchemaActionsPropertiesUpdateHandler
	// SchemaSchemaActionsUpdateHandler sets the operation handler for the schema actions update operation
	SchemaSchemaActionsUpdateHandler schema.SchemaActionsUpdateHandler
	// SchemaSchemaDumpHandler sets the operation handler for the schema dump operation
	SchemaSchemaDumpHandler schema.SchemaDumpHandler
	// SchemaSchemaThingsCreateHandler sets the operation handler for the schema things create operation
	SchemaSchemaThingsCreateHandler schema.SchemaThingsCreateHandler
	// SchemaSchemaThingsDeleteHandler sets the operation handler for the schema things delete operation
	SchemaSchemaThingsDeleteHandler schema.SchemaThingsDeleteHandler
	// SchemaSchemaThingsPropertiesAddHandler sets the operation handler for the schema things properties add operation
	SchemaSchemaThingsPropertiesAddHandler schema.SchemaThingsPropertiesAddHandler
	// SchemaSchemaThingsPropertiesDeleteHandler sets the operation handler for the schema things properties delete operation
	SchemaSchemaThingsPropertiesDeleteHandler schema.SchemaThingsPropertiesDeleteHandler
	// SchemaSchemaThingsPropertiesUpdateHandler sets the operation handler for the schema things properties update operation
	SchemaSchemaThingsPropertiesUpdateHandler schema.SchemaThingsPropertiesUpdateHandler
	// SchemaSchemaThingsUpdateHandler sets the operation handler for the schema things update operation
	SchemaSchemaThingsUpdateHandler schema.SchemaThingsUpdateHandler
	// ThingsThingsCreateHandler sets the operation handler for the things create operation
	ThingsThingsCreateHandler things.ThingsCreateHandler
	// ThingsThingsDeleteHandler sets the operation handler for the things delete operation
	ThingsThingsDeleteHandler things.ThingsDeleteHandler
	// ThingsThingsGetHandler sets the operation handler for the things get operation
	ThingsThingsGetHandler things.ThingsGetHandler
	// ThingsThingsListHandler sets the operation handler for the things list operation
	ThingsThingsListHandler things.ThingsListHandler
	// ThingsThingsPatchHandler sets the operation handler for the things patch operation
	ThingsThingsPatchHandler things.ThingsPatchHandler
	// ThingsThingsReferencesCreateHandler sets the operation handler for the things references create operation
	ThingsThingsReferencesCreateHandler things.ThingsReferencesCreateHandler
	// ThingsThingsReferencesDeleteHandler sets the operation handler for the things references delete operation
	ThingsThingsReferencesDeleteHandler things.ThingsReferencesDeleteHandler
	// ThingsThingsReferencesUpdateHandler sets the operation handler for the things references update operation
	ThingsThingsReferencesUpdateHandler things.ThingsReferencesUpdateHandler
	// ThingsThingsUpdateHandler sets the operation handler for the things update operation
	ThingsThingsUpdateHandler things.ThingsUpdateHandler
	// ThingsThingsValidateHandler sets the operation handler for the things validate operation
	ThingsThingsValidateHandler things.ThingsValidateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *WeaviateAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *WeaviateAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *WeaviateAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *WeaviateAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *WeaviateAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *WeaviateAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *WeaviateAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the WeaviateAPI
func (o *WeaviateAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OidcAuth == nil {
		unregistered = append(unregistered, "OidcAuth")
	}

	if o.GetWellKnownOpenidConfigurationHandler == nil {
		unregistered = append(unregistered, "GetWellKnownOpenidConfigurationHandler")
	}

	if o.ActionsActionsCreateHandler == nil {
		unregistered = append(unregistered, "actions.ActionsCreateHandler")
	}

	if o.ActionsActionsDeleteHandler == nil {
		unregistered = append(unregistered, "actions.ActionsDeleteHandler")
	}

	if o.ActionsActionsGetHandler == nil {
		unregistered = append(unregistered, "actions.ActionsGetHandler")
	}

	if o.ActionsActionsListHandler == nil {
		unregistered = append(unregistered, "actions.ActionsListHandler")
	}

	if o.ActionsActionsPatchHandler == nil {
		unregistered = append(unregistered, "actions.ActionsPatchHandler")
	}

	if o.ActionsActionsReferencesCreateHandler == nil {
		unregistered = append(unregistered, "actions.ActionsReferencesCreateHandler")
	}

	if o.ActionsActionsReferencesDeleteHandler == nil {
		unregistered = append(unregistered, "actions.ActionsReferencesDeleteHandler")
	}

	if o.ActionsActionsReferencesUpdateHandler == nil {
		unregistered = append(unregistered, "actions.ActionsReferencesUpdateHandler")
	}

	if o.ActionsActionsUpdateHandler == nil {
		unregistered = append(unregistered, "actions.ActionsUpdateHandler")
	}

	if o.ActionsActionsValidateHandler == nil {
		unregistered = append(unregistered, "actions.ActionsValidateHandler")
	}

	if o.BatchingActionsCreateHandler == nil {
		unregistered = append(unregistered, "BatchingActionsCreateHandler")
	}

	if o.BatchingReferencesCreateHandler == nil {
		unregistered = append(unregistered, "BatchingReferencesCreateHandler")
	}

	if o.BatchingThingsCreateHandler == nil {
		unregistered = append(unregistered, "BatchingThingsCreateHandler")
	}

	if o.ContextionaryAPIC11yCorpusGetHandler == nil {
		unregistered = append(unregistered, "contextionary_api.C11yCorpusGetHandler")
	}

	if o.ContextionaryAPIC11yWordsHandler == nil {
		unregistered = append(unregistered, "contextionary_api.C11yWordsHandler")
	}

	if o.GraphqlGraphqlBatchHandler == nil {
		unregistered = append(unregistered, "graphql.GraphqlBatchHandler")
	}

	if o.GraphqlGraphqlPostHandler == nil {
		unregistered = append(unregistered, "graphql.GraphqlPostHandler")
	}

	if o.MetaMetaGetHandler == nil {
		unregistered = append(unregistered, "meta.MetaGetHandler")
	}

	if o.P2PP2pGenesisUpdateHandler == nil {
		unregistered = append(unregistered, "p2_p.P2pGenesisUpdateHandler")
	}

	if o.P2PP2pHealthHandler == nil {
		unregistered = append(unregistered, "p2_p.P2pHealthHandler")
	}

	if o.SchemaSchemaActionsCreateHandler == nil {
		unregistered = append(unregistered, "schema.SchemaActionsCreateHandler")
	}

	if o.SchemaSchemaActionsDeleteHandler == nil {
		unregistered = append(unregistered, "schema.SchemaActionsDeleteHandler")
	}

	if o.SchemaSchemaActionsPropertiesAddHandler == nil {
		unregistered = append(unregistered, "schema.SchemaActionsPropertiesAddHandler")
	}

	if o.SchemaSchemaActionsPropertiesDeleteHandler == nil {
		unregistered = append(unregistered, "schema.SchemaActionsPropertiesDeleteHandler")
	}

	if o.SchemaSchemaActionsPropertiesUpdateHandler == nil {
		unregistered = append(unregistered, "schema.SchemaActionsPropertiesUpdateHandler")
	}

	if o.SchemaSchemaActionsUpdateHandler == nil {
		unregistered = append(unregistered, "schema.SchemaActionsUpdateHandler")
	}

	if o.SchemaSchemaDumpHandler == nil {
		unregistered = append(unregistered, "schema.SchemaDumpHandler")
	}

	if o.SchemaSchemaThingsCreateHandler == nil {
		unregistered = append(unregistered, "schema.SchemaThingsCreateHandler")
	}

	if o.SchemaSchemaThingsDeleteHandler == nil {
		unregistered = append(unregistered, "schema.SchemaThingsDeleteHandler")
	}

	if o.SchemaSchemaThingsPropertiesAddHandler == nil {
		unregistered = append(unregistered, "schema.SchemaThingsPropertiesAddHandler")
	}

	if o.SchemaSchemaThingsPropertiesDeleteHandler == nil {
		unregistered = append(unregistered, "schema.SchemaThingsPropertiesDeleteHandler")
	}

	if o.SchemaSchemaThingsPropertiesUpdateHandler == nil {
		unregistered = append(unregistered, "schema.SchemaThingsPropertiesUpdateHandler")
	}

	if o.SchemaSchemaThingsUpdateHandler == nil {
		unregistered = append(unregistered, "schema.SchemaThingsUpdateHandler")
	}

	if o.ThingsThingsCreateHandler == nil {
		unregistered = append(unregistered, "things.ThingsCreateHandler")
	}

	if o.ThingsThingsDeleteHandler == nil {
		unregistered = append(unregistered, "things.ThingsDeleteHandler")
	}

	if o.ThingsThingsGetHandler == nil {
		unregistered = append(unregistered, "things.ThingsGetHandler")
	}

	if o.ThingsThingsListHandler == nil {
		unregistered = append(unregistered, "things.ThingsListHandler")
	}

	if o.ThingsThingsPatchHandler == nil {
		unregistered = append(unregistered, "things.ThingsPatchHandler")
	}

	if o.ThingsThingsReferencesCreateHandler == nil {
		unregistered = append(unregistered, "things.ThingsReferencesCreateHandler")
	}

	if o.ThingsThingsReferencesDeleteHandler == nil {
		unregistered = append(unregistered, "things.ThingsReferencesDeleteHandler")
	}

	if o.ThingsThingsReferencesUpdateHandler == nil {
		unregistered = append(unregistered, "things.ThingsReferencesUpdateHandler")
	}

	if o.ThingsThingsUpdateHandler == nil {
		unregistered = append(unregistered, "things.ThingsUpdateHandler")
	}

	if o.ThingsThingsValidateHandler == nil {
		unregistered = append(unregistered, "things.ThingsValidateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *WeaviateAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *WeaviateAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "oidc":

			result[name] = o.BearerAuthenticator(scheme.Name, func(token string, scopes []string) (interface{}, error) {
				return o.OidcAuth(token, scopes)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *WeaviateAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *WeaviateAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *WeaviateAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *WeaviateAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the weaviate API
func (o *WeaviateAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *WeaviateAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/.well-known/openid-configuration"] = NewGetWellKnownOpenidConfiguration(o.context, o.GetWellKnownOpenidConfigurationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actions"] = actions.NewActionsCreate(o.context, o.ActionsActionsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/actions/{id}"] = actions.NewActionsDelete(o.context, o.ActionsActionsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions/{id}"] = actions.NewActionsGet(o.context, o.ActionsActionsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions"] = actions.NewActionsList(o.context, o.ActionsActionsListHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/actions/{id}"] = actions.NewActionsPatch(o.context, o.ActionsActionsPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actions/{id}/references/{propertyName}"] = actions.NewActionsReferencesCreate(o.context, o.ActionsActionsReferencesCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/actions/{id}/references/{propertyName}"] = actions.NewActionsReferencesDelete(o.context, o.ActionsActionsReferencesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/actions/{id}/references/{propertyName}"] = actions.NewActionsReferencesUpdate(o.context, o.ActionsActionsReferencesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/actions/{id}"] = actions.NewActionsUpdate(o.context, o.ActionsActionsUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actions/validate"] = actions.NewActionsValidate(o.context, o.ActionsActionsValidateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/batching/actions"] = NewBatchingActionsCreate(o.context, o.BatchingActionsCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/batching/references"] = NewBatchingReferencesCreate(o.context, o.BatchingReferencesCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/batching/things"] = NewBatchingThingsCreate(o.context, o.BatchingThingsCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/c11y/corpus"] = contextionary_api.NewC11yCorpusGet(o.context, o.ContextionaryAPIC11yCorpusGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/c11y/words/{words}"] = contextionary_api.NewC11yWords(o.context, o.ContextionaryAPIC11yWordsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/graphql/batch"] = graphql.NewGraphqlBatch(o.context, o.GraphqlGraphqlBatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/graphql"] = graphql.NewGraphqlPost(o.context, o.GraphqlGraphqlPostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/meta"] = meta.NewMetaGet(o.context, o.MetaMetaGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/p2p/genesis"] = p2_p.NewP2pGenesisUpdate(o.context, o.P2PP2pGenesisUpdateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/health"] = p2_p.NewP2pHealth(o.context, o.P2PP2pHealthHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/actions"] = schema.NewSchemaActionsCreate(o.context, o.SchemaSchemaActionsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/actions/{className}"] = schema.NewSchemaActionsDelete(o.context, o.SchemaSchemaActionsDeleteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/actions/{className}/properties"] = schema.NewSchemaActionsPropertiesAdd(o.context, o.SchemaSchemaActionsPropertiesAddHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/actions/{className}/properties/{propertyName}"] = schema.NewSchemaActionsPropertiesDelete(o.context, o.SchemaSchemaActionsPropertiesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/actions/{className}/properties/{propertyName}"] = schema.NewSchemaActionsPropertiesUpdate(o.context, o.SchemaSchemaActionsPropertiesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/actions/{className}"] = schema.NewSchemaActionsUpdate(o.context, o.SchemaSchemaActionsUpdateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schema"] = schema.NewSchemaDump(o.context, o.SchemaSchemaDumpHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/things"] = schema.NewSchemaThingsCreate(o.context, o.SchemaSchemaThingsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/things/{className}"] = schema.NewSchemaThingsDelete(o.context, o.SchemaSchemaThingsDeleteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/things/{className}/properties"] = schema.NewSchemaThingsPropertiesAdd(o.context, o.SchemaSchemaThingsPropertiesAddHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/things/{className}/properties/{propertyName}"] = schema.NewSchemaThingsPropertiesDelete(o.context, o.SchemaSchemaThingsPropertiesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/things/{className}/properties/{propertyName}"] = schema.NewSchemaThingsPropertiesUpdate(o.context, o.SchemaSchemaThingsPropertiesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/things/{className}"] = schema.NewSchemaThingsUpdate(o.context, o.SchemaSchemaThingsUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/things"] = things.NewThingsCreate(o.context, o.ThingsThingsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/things/{id}"] = things.NewThingsDelete(o.context, o.ThingsThingsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/things/{id}"] = things.NewThingsGet(o.context, o.ThingsThingsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/things"] = things.NewThingsList(o.context, o.ThingsThingsListHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/things/{id}"] = things.NewThingsPatch(o.context, o.ThingsThingsPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/things/{id}/references/{propertyName}"] = things.NewThingsReferencesCreate(o.context, o.ThingsThingsReferencesCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/things/{id}/references/{propertyName}"] = things.NewThingsReferencesDelete(o.context, o.ThingsThingsReferencesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/things/{id}/references/{propertyName}"] = things.NewThingsReferencesUpdate(o.context, o.ThingsThingsReferencesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/things/{id}"] = things.NewThingsUpdate(o.context, o.ThingsThingsUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/things/validate"] = things.NewThingsValidate(o.context, o.ThingsThingsValidateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *WeaviateAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *WeaviateAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *WeaviateAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *WeaviateAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
