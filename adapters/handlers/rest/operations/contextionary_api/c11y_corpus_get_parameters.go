//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package contextionary_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
)

// NewC11yCorpusGetParams creates a new C11yCorpusGetParams object
// no default values defined in spec.
func NewC11yCorpusGetParams() C11yCorpusGetParams {

	return C11yCorpusGetParams{}
}

// C11yCorpusGetParams contains all the bound params for the c11y corpus get operation
// typically these are obtained from a http.Request
//
// swagger:parameters c11y.corpus.get
type C11yCorpusGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A text corpus
	  Required: true
	  In: body
	*/
	Corpus C11yCorpusGetBody
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewC11yCorpusGetParams() beforehand.
func (o *C11yCorpusGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body C11yCorpusGetBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("corpus", "body", ""))
			} else {
				res = append(res, errors.NewParseError("corpus", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Corpus = body
			}
		}
	} else {
		res = append(res, errors.Required("corpus", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
