//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
// 
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package contextionary_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateC11yCorpusGetHandlerFunc turns a function with the right signature into a weaviate c11y corpus get handler
type WeaviateC11yCorpusGetHandlerFunc func(WeaviateC11yCorpusGetParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaviateC11yCorpusGetHandlerFunc) Handle(params WeaviateC11yCorpusGetParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// WeaviateC11yCorpusGetHandler interface for that can handle valid weaviate c11y corpus get params
type WeaviateC11yCorpusGetHandler interface {
	Handle(WeaviateC11yCorpusGetParams, *models.Principal) middleware.Responder
}

// NewWeaviateC11yCorpusGet creates a new http.Handler for the weaviate c11y corpus get operation
func NewWeaviateC11yCorpusGet(ctx *middleware.Context, handler WeaviateC11yCorpusGetHandler) *WeaviateC11yCorpusGet {
	return &WeaviateC11yCorpusGet{Context: ctx, Handler: handler}
}

/*WeaviateC11yCorpusGet swagger:route POST /c11y/corpus contextionary-API weaviateC11yCorpusGet

Checks if a word or wordString is part of the contextionary.

Analyzes a sentence based on the contextionary

*/
type WeaviateC11yCorpusGet struct {
	Context *middleware.Context
	Handler WeaviateC11yCorpusGetHandler
}

func (o *WeaviateC11yCorpusGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWeaviateC11yCorpusGetParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WeaviateC11yCorpusGetBody The text corpus.
// swagger:model WeaviateC11yCorpusGetBody
type WeaviateC11yCorpusGetBody struct {

	// corpus
	Corpus string `json:"corpus,omitempty"`
}

// Validate validates this weaviate c11y corpus get body
func (o *WeaviateC11yCorpusGetBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WeaviateC11yCorpusGetBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WeaviateC11yCorpusGetBody) UnmarshalBinary(b []byte) error {
	var res WeaviateC11yCorpusGetBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
