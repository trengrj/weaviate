//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package contextionary_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewC11yConceptsParams creates a new C11yConceptsParams object
// no default values defined in spec.
func NewC11yConceptsParams() C11yConceptsParams {

	return C11yConceptsParams{}
}

// C11yConceptsParams contains all the bound params for the c11y concepts operation
// typically these are obtained from a http.Request
//
// swagger:parameters c11y.concepts
type C11yConceptsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*CamelCase list of words to validate.
	  Required: true
	  In: path
	*/
	Concept string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewC11yConceptsParams() beforehand.
func (o *C11yConceptsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rConcept, rhkConcept, _ := route.Params.GetOK("concept")
	if err := o.bindConcept(rConcept, rhkConcept, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindConcept binds and validates parameter Concept from path.
func (o *C11yConceptsParams) bindConcept(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Concept = raw

	return nil
}
