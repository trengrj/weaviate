//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package contextionary_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/semi-technologies/weaviate/entities/models"
)

// C11yConceptsHandlerFunc turns a function with the right signature into a c11y concepts handler
type C11yConceptsHandlerFunc func(C11yConceptsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn C11yConceptsHandlerFunc) Handle(params C11yConceptsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// C11yConceptsHandler interface for that can handle valid c11y concepts params
type C11yConceptsHandler interface {
	Handle(C11yConceptsParams, *models.Principal) middleware.Responder
}

// NewC11yConcepts creates a new http.Handler for the c11y concepts operation
func NewC11yConcepts(ctx *middleware.Context, handler C11yConceptsHandler) *C11yConcepts {
	return &C11yConcepts{Context: ctx, Handler: handler}
}

/*C11yConcepts swagger:route GET /c11y/concepts/{concept} contextionary-API c11yConcepts

Checks if a concept is part of the contextionary.

Checks if a concept is part of the contextionary. Concepts should be concatenated as described here: https://github.com/semi-technologies/weaviate/blob/master/docs/en/use/schema-schema.md#camelcase

*/
type C11yConcepts struct {
	Context *middleware.Context
	Handler C11yConceptsHandler
}

func (o *C11yConcepts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewC11yConceptsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
