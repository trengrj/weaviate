//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2022 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GenesisPeersLeaveHandlerFunc turns a function with the right signature into a genesis peers leave handler
type GenesisPeersLeaveHandlerFunc func(GenesisPeersLeaveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GenesisPeersLeaveHandlerFunc) Handle(params GenesisPeersLeaveParams) middleware.Responder {
	return fn(params)
}

// GenesisPeersLeaveHandler interface for that can handle valid genesis peers leave params
type GenesisPeersLeaveHandler interface {
	Handle(GenesisPeersLeaveParams) middleware.Responder
}

// NewGenesisPeersLeave creates a new http.Handler for the genesis peers leave operation
func NewGenesisPeersLeave(ctx *middleware.Context, handler GenesisPeersLeaveHandler) *GenesisPeersLeave {
	return &GenesisPeersLeave{Context: ctx, Handler: handler}
}

/*
GenesisPeersLeave swagger:route DELETE /peers/{peerId} genesisPeersLeave

Leave the weaviate network
*/
type GenesisPeersLeave struct {
	Context *middleware.Context
	Handler GenesisPeersLeaveHandler
}

func (o *GenesisPeersLeave) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	Params := NewGenesisPeersLeaveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)
}
