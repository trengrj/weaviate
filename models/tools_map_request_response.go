/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2018 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * AUTHOR: Bob van Luijt (bob@kub.design)
 * See www.creativesoftwarefdn.org for details
 * Contact: @CreativeSofwFdn / bob@kub.design
 */
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ToolsMapRequestResponse Map of concepts.
// swagger:model ToolsMapRequestResponse
type ToolsMapRequestResponse struct {

	// Results of the map request
	Results []*ToolsMapRequestResponseResultsItems0 `json:"results"`

	// Startpoint in the Contextionary expressed as 300-dimensional space
	StartVector []float32 `json:"startVector"`

	// What type of map should be generated?
	// Enum: [zeroPointPosition centerOfSelf centerOfNetwork centerOfConcept]
	Type string `json:"type,omitempty"`
}

// Validate validates this tools map request response
func (m *ToolsMapRequestResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartVector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ToolsMapRequestResponse) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ToolsMapRequestResponse) validateStartVector(formats strfmt.Registry) error {

	if swag.IsZero(m.StartVector) { // not required
		return nil
	}

	for i := 0; i < len(m.StartVector); i++ {

		if err := validate.Minimum("startVector"+"."+strconv.Itoa(i), "body", float64(m.StartVector[i]), 300, false); err != nil {
			return err
		}

		if err := validate.Maximum("startVector"+"."+strconv.Itoa(i), "body", float64(m.StartVector[i]), 300, false); err != nil {
			return err
		}

	}

	return nil
}

var toolsMapRequestResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["zeroPointPosition","centerOfSelf","centerOfNetwork","centerOfConcept"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		toolsMapRequestResponseTypeTypePropEnum = append(toolsMapRequestResponseTypeTypePropEnum, v)
	}
}

const (

	// ToolsMapRequestResponseTypeZeroPointPosition captures enum value "zeroPointPosition"
	ToolsMapRequestResponseTypeZeroPointPosition string = "zeroPointPosition"

	// ToolsMapRequestResponseTypeCenterOfSelf captures enum value "centerOfSelf"
	ToolsMapRequestResponseTypeCenterOfSelf string = "centerOfSelf"

	// ToolsMapRequestResponseTypeCenterOfNetwork captures enum value "centerOfNetwork"
	ToolsMapRequestResponseTypeCenterOfNetwork string = "centerOfNetwork"

	// ToolsMapRequestResponseTypeCenterOfConcept captures enum value "centerOfConcept"
	ToolsMapRequestResponseTypeCenterOfConcept string = "centerOfConcept"
)

// prop value enum
func (m *ToolsMapRequestResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, toolsMapRequestResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ToolsMapRequestResponse) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ToolsMapRequestResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ToolsMapRequestResponse) UnmarshalBinary(b []byte) error {
	var res ToolsMapRequestResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ToolsMapRequestResponseResultsItems0 tools map request response results items0
// swagger:model ToolsMapRequestResponseResultsItems0
type ToolsMapRequestResponseResultsItems0 struct {

	// concept
	Concept *SemanticSchemaClass `json:"concept,omitempty"`

	// Distance to original vector concept
	Distance float32 `json:"distance,omitempty"`

	// On which Weaviate is this concept located?
	Location string `json:"location,omitempty"`

	// Thing or Action
	// Enum: [thing action]
	Type string `json:"type,omitempty"`
}

// Validate validates this tools map request response results items0
func (m *ToolsMapRequestResponseResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConcept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ToolsMapRequestResponseResultsItems0) validateConcept(formats strfmt.Registry) error {

	if swag.IsZero(m.Concept) { // not required
		return nil
	}

	if m.Concept != nil {
		if err := m.Concept.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("concept")
			}
			return err
		}
	}

	return nil
}

var toolsMapRequestResponseResultsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["thing","action"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		toolsMapRequestResponseResultsItems0TypeTypePropEnum = append(toolsMapRequestResponseResultsItems0TypeTypePropEnum, v)
	}
}

const (

	// ToolsMapRequestResponseResultsItems0TypeThing captures enum value "thing"
	ToolsMapRequestResponseResultsItems0TypeThing string = "thing"

	// ToolsMapRequestResponseResultsItems0TypeAction captures enum value "action"
	ToolsMapRequestResponseResultsItems0TypeAction string = "action"
)

// prop value enum
func (m *ToolsMapRequestResponseResultsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, toolsMapRequestResponseResultsItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ToolsMapRequestResponseResultsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ToolsMapRequestResponseResultsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ToolsMapRequestResponseResultsItems0) UnmarshalBinary(b []byte) error {
	var res ToolsMapRequestResponseResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
