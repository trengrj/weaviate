/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2018 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * AUTHOR: Bob van Luijt (bob@kub.design)
 * See www.creativesoftwarefdn.org for details
 * Contact: @CreativeSofwFdn / bob@kub.design
 */
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SemanticSchemaClassProperty semantic schema class property
// swagger:model SemanticSchemaClassProperty
type SemanticSchemaClassProperty struct {

	// Can be a reference ($cref) to another type when it starts with a capital (for example Person), otherwise "string" or "int".
	AtDataType []string `json:"@dataType"`

	// The cardinality of this property. If you want to store more than one value in a property, set this to 'many'. Defaults to 'atMostOne'. Note that by default properties can be empty in Weaviate.
	// Enum: [atMostOne many]
	Cardinality *string `json:"cardinality,omitempty"`

	// Description of the property.
	Description string `json:"description,omitempty"`

	// keywords
	Keywords SemanticSchemaKeywords `json:"keywords"`

	// Name of the property as URI relative to the schema URL.
	Name string `json:"name,omitempty"`
}

// Validate validates this semantic schema class property
func (m *SemanticSchemaClassProperty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardinality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeywords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var semanticSchemaClassPropertyTypeCardinalityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["atMostOne","many"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		semanticSchemaClassPropertyTypeCardinalityPropEnum = append(semanticSchemaClassPropertyTypeCardinalityPropEnum, v)
	}
}

const (

	// SemanticSchemaClassPropertyCardinalityAtMostOne captures enum value "atMostOne"
	SemanticSchemaClassPropertyCardinalityAtMostOne string = "atMostOne"

	// SemanticSchemaClassPropertyCardinalityMany captures enum value "many"
	SemanticSchemaClassPropertyCardinalityMany string = "many"
)

// prop value enum
func (m *SemanticSchemaClassProperty) validateCardinalityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, semanticSchemaClassPropertyTypeCardinalityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SemanticSchemaClassProperty) validateCardinality(formats strfmt.Registry) error {

	if swag.IsZero(m.Cardinality) { // not required
		return nil
	}

	// value enum
	if err := m.validateCardinalityEnum("cardinality", "body", *m.Cardinality); err != nil {
		return err
	}

	return nil
}

func (m *SemanticSchemaClassProperty) validateKeywords(formats strfmt.Registry) error {

	if swag.IsZero(m.Keywords) { // not required
		return nil
	}

	if err := m.Keywords.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("keywords")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SemanticSchemaClassProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SemanticSchemaClassProperty) UnmarshalBinary(b []byte) error {
	var res SemanticSchemaClassProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
