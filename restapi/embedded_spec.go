/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Decentralised Knowledge Graph",
    "title": "Weaviate - Decentralised Knowledge Graph",
    "contact": {
      "name": "Weaviate",
      "url": "https://github.com/creativesoftwarefdn",
      "email": "hello@creativesoftwarefdn.org"
    },
    "version": "0.12.37"
  },
  "basePath": "/weaviate/v1",
  "paths": {
    "/actions": {
      "get": {
        "description": "Lists all Actions in reverse order of creation, owned by the user that belongs to the used token.",
        "tags": [
          "actions"
        ],
        "summary": "Get a list of Actions related to this key.",
        "operationId": "weaviate.actions.list",
        "parameters": [
          {
            "$ref": "#/parameters/CommonMaxResultsParameterQuery"
          },
          {
            "$ref": "#/parameters/CommonPageParameterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Registers a new Action. Provided meta-data and schema values are validated.",
        "tags": [
          "actions"
        ],
        "summary": "Create Actions between two Things (object and subject).",
        "operationId": "weaviate.actions.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "$ref": "#/definitions/ActionCreate"
                },
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Action. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the value is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action created.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "202": {
            "description": "Successfully received. No guarantees are made that the Action persists.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/validate": {
      "post": {
        "description": "Validate an Action's schema and meta-data. It has to be based on a schema, which is related to the given Action to be accepted by this validation.",
        "tags": [
          "actions"
        ],
        "summary": "Validate an Action based on a schema.",
        "operationId": "weaviate.actions.validate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionValidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{actionId}": {
      "get": {
        "description": "Lists Actions.",
        "tags": [
          "actions"
        ],
        "summary": "Get a specific Action based on its UUID and a Thing UUID related to this key. Also available as Websocket bus.",
        "operationId": "weaviate.actions.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Updates an Action's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "actions"
        ],
        "summary": "Update an Action based on its UUID related to this key.",
        "operationId": "weaviate.action.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionUpdate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Deletes an Action from the system.",
        "tags": [
          "actions"
        ],
        "summary": "Delete an Action based on its UUID related to this key.",
        "operationId": "weaviate.actions.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": true,
        "x-available-in-websocket": true
      },
      "patch": {
        "description": "Updates an Action. This method supports patch semantics. Provided meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "actions"
        ],
        "summary": "Update an Action based on its UUID (using patch semantics) related to this key.",
        "operationId": "weaviate.actions.patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 if the patch is accepted. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the update is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
            "name": "async",
            "in": "query"
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDocument"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{actionId}/history": {
      "get": {
        "description": "Returns a particular Action history.",
        "tags": [
          "actions"
        ],
        "summary": "Get an Action's history based on its UUID related to this key.",
        "operationId": "weaviate.action.history.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionGetHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{actionId}/properties/{propertyName}": {
      "put": {
        "description": "Replace all references to a class-property.",
        "tags": [
          "actions"
        ],
        "summary": "Replace all references to a class-property.",
        "operationId": "weaviate.actions.properties.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Action.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced all the references."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "tags": [
          "actions"
        ],
        "summary": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "operationId": "weaviate.actions.properties.create",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Action.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the reference."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Delete the single reference that is given in the body from the list of references that this property has.",
        "tags": [
          "actions"
        ],
        "summary": "Delete the single reference that is given in the body from the list of references that this property has.",
        "operationId": "weaviate.actions.properties.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Action.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/actions": {
      "post": {
        "description": "Register new Actions in bulk. Given meta-data and schema values are validated.",
        "tags": [
          "batching",
          "actions"
        ],
        "summary": "Creates new Actions based on an Action template related to this key as a batch.",
        "operationId": "weaviate.batching.actions.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ActionCreate"
                  }
                },
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Action. You will receive this response before the persistence of the data is confirmed. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the persistence of the data is confirmed. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                },
                "fields": {
                  "description": "Define which fields need to be returned. Default value is ALL",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "ALL",
                    "enum": [
                      "ALL",
                      "@class",
                      "schema",
                      "key",
                      "actionId",
                      "creationTimeUnix"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actions created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionsGetResponse"
              }
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionsGetResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/things": {
      "post": {
        "description": "Register new Things in bulk. Provided meta-data and schema values are validated.",
        "tags": [
          "batching",
          "things"
        ],
        "summary": "Creates new Things based on a Thing template related to this key as a batch.",
        "operationId": "weaviate.batching.things.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Thing. You will receive this response before the persistence of the data is confirmed. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the persistence of the data is confirmed. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                },
                "fields": {
                  "description": "Define which fields need to be returned. Default value is ALL",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "ALL",
                    "enum": [
                      "ALL",
                      "@class",
                      "schema",
                      "key",
                      "thingId",
                      "creationTimeUnix"
                    ]
                  }
                },
                "things": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ThingCreate"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Things created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThingsGetResponse"
              }
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThingsGetResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/graphql": {
      "post": {
        "description": "Get an object based on GraphQL",
        "tags": [
          "graphql"
        ],
        "summary": "Get a response based on GraphQL",
        "operationId": "weaviate.graphql.post",
        "parameters": [
          {
            "description": "The GraphQL query request parameters.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphQLQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/graphql/batch": {
      "post": {
        "description": "Perform a batched GraphQL query",
        "tags": [
          "graphql"
        ],
        "summary": "Get a response based on GraphQL.",
        "operationId": "weaviate.graphql.batch",
        "parameters": [
          {
            "description": "The GraphQL queries.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphQLQueries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponses"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/meta": {
      "get": {
        "description": "Gives meta information about the server and can be used to provide information to another Weaviate instance that wants to interact with the current instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "meta"
        ],
        "summary": "Returns meta information of the current Weaviate instance.",
        "operationId": "weaviate.meta.get",
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/Meta"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/p2p/genesis": {
      "put": {
        "security": [],
        "description": "Receive an update from the Genesis server.",
        "tags": [
          "P2P"
        ],
        "operationId": "weaviate.p2p.genesis_update",
        "parameters": [
          {
            "name": "peers",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PeerUpdateList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alive and kicking!"
          },
          "401": {
            "description": "Unauthorized update."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/p2p/health": {
      "get": {
        "security": [],
        "description": "Check if a peer is alive and healthy.",
        "tags": [
          "P2P"
        ],
        "summary": "Check if a peer is alive.",
        "operationId": "weaviate.p2p.health",
        "responses": {
          "200": {
            "description": "Alive and kicking!"
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/schema": {
      "get": {
        "tags": [
          "schema"
        ],
        "summary": "Dump the current the database schema.",
        "operationId": "weaviate.schema.dump",
        "responses": {
          "200": {
            "description": "Successfully dumped the database schema.",
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "$ref": "#/definitions/SemanticSchema"
                },
                "things": {
                  "$ref": "#/definitions/SemanticSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Create a new Action class in the ontology.",
        "operationId": "weaviate.schema.actions.create",
        "parameters": [
          {
            "name": "actionClass",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClass"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the new Action class to the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "422": {
            "description": "Invalid Action class",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the Action.",
        "operationId": "weaviate.schema.actions.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the Action.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove an Action class (and all data in the instances) from the ontology.",
        "operationId": "weaviate.schema.actions.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the Action class from the ontology."
          },
          "400": {
            "description": "Could not delete the Action class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}/properties": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Add a property to an Action class.",
        "operationId": "weaviate.schema.actions.properties.add",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClassProperty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the property."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class."
          },
          "422": {
            "description": "Invalid property.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}/properties/{propertyName}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the property.",
        "operationId": "weaviate.schema.actions.properties.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the property.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class or property."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove a property from an Action class.",
        "operationId": "weaviate.schema.actions.properties.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the property from the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class or property."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Create a new Thing class in the ontology.",
        "operationId": "weaviate.schema.things.create",
        "parameters": [
          {
            "name": "thingClass",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClass"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the new Thing class to the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "422": {
            "description": "Invalid Thing class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the Thing.",
        "operationId": "weaviate.schema.things.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the Thing.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove a Thing class (and all data in the instances) from the ontology.",
        "operationId": "weaviate.schema.things.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the Thing class from the ontology."
          },
          "400": {
            "description": "Could not delete the Thing class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}/properties": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Add a property to a Thing class.",
        "operationId": "weaviate.schema.things.properties.add",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClassProperty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the property."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class."
          },
          "422": {
            "description": "Invalid property.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}/properties/{propertyName}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the property.",
        "operationId": "weaviate.schema.things.properties.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the property.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class or property."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove a property from a Thing class.",
        "operationId": "weaviate.schema.things.properties.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the property from the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class or property."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/things": {
      "get": {
        "description": "Lists all Things in reverse order of creation, owned by the user that belongs to the used token.",
        "tags": [
          "things"
        ],
        "summary": "Get a list of Things related to this key.",
        "operationId": "weaviate.things.list",
        "parameters": [
          {
            "$ref": "#/parameters/CommonMaxResultsParameterQuery"
          },
          {
            "$ref": "#/parameters/CommonPageParameterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Registers a new Thing. Given meta-data and schema values are validated.",
        "tags": [
          "things"
        ],
        "summary": "Create a new Thing based on a Thing template related to this key.",
        "operationId": "weaviate.things.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Thing. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the value is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                },
                "thing": {
                  "$ref": "#/definitions/ThingCreate"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thing created.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/validate": {
      "post": {
        "description": "Validate a Thing's schema and meta-data. It has to be based on a schema, which is related to the given Thing to be accepted by this validation.",
        "tags": [
          "things"
        ],
        "summary": "Validate Things schema.",
        "operationId": "weaviate.things.validate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{thingId}": {
      "get": {
        "description": "Returns a particular Thing data.",
        "tags": [
          "things"
        ],
        "summary": "Get a Thing based on its UUID related to this key.",
        "operationId": "weaviate.things.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Updates a Thing's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "things"
        ],
        "summary": "Update a Thing based on its UUID related to this key.",
        "operationId": "weaviate.things.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingUpdate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Deletes a Thing from the system. All Actions pointing to this Thing, where the Thing is the object of the Action, are also being deleted.",
        "tags": [
          "things"
        ],
        "summary": "Delete a Thing based on its UUID related to this key.",
        "operationId": "weaviate.things.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": true,
        "x-available-in-websocket": true
      },
      "patch": {
        "description": "Updates a Thing's data. This method supports patch semantics. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "things"
        ],
        "summary": "Update a Thing based on its UUID (using patch semantics) related to this key.",
        "operationId": "weaviate.things.patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 if the patch is accepted. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the update is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
            "name": "async",
            "in": "query"
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDocument"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{thingId}/history": {
      "get": {
        "description": "Returns a particular Thing's history.",
        "tags": [
          "things"
        ],
        "summary": "Get a Thing's history based on its UUID related to this key.",
        "operationId": "weaviate.thing.history.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingGetHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{thingId}/properties/{propertyName}": {
      "put": {
        "description": "Replace all references to a class-property.",
        "tags": [
          "things"
        ],
        "summary": "Replace all references to a class-property.",
        "operationId": "weaviate.things.properties.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Thing.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced all the references (success is based on the behavior of the datastore)."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "tags": [
          "things"
        ],
        "summary": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "operationId": "weaviate.things.properties.create",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Thing.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the reference."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Delete the single reference that is given in the body from the list of references that this property has.",
        "tags": [
          "things"
        ],
        "summary": "Delete the single reference that is given in the body from the list of references that this property has.",
        "operationId": "weaviate.things.properties.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Thing.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/tools/map": {
      "post": {
        "description": "Tool to render a map of concepts, based on ontologies available over the network.",
        "tags": [
          "knowledge tools"
        ],
        "summary": "Tool to render a map of concepts, based on ontologies available over the network.",
        "operationId": "weaviate.tools.map",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ToolsMapRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ToolsMapRequestResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Action in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            },
            "lastUpdateTimeUnix": {
              "description": "Timestamp of the last update made to the Action since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ActionCreate": {
      "type": "object",
      "properties": {
        "@class": {
          "description": "Type of the Action, defined in the schema.",
          "type": "string"
        },
        "@context": {
          "description": "Available context schema.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "ActionGetHistoryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ActionHistory"
        },
        {
          "type": "object",
          "properties": {
            "actionId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ActionGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "properties": {
            "actionId": {
              "description": "ID of the Action.",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ActionHistory": {
      "type": "object",
      "properties": {
        "deleted": {
          "description": "Indication of whether the Action is deleted.",
          "type": "boolean"
        },
        "propertyHistory": {
          "description": "An array with the history of the Action.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionHistoryObject"
          }
        }
      }
    },
    "ActionHistoryObject": {
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Action history in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ActionUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "type": "object"
        }
      ]
    },
    "ActionValidate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        }
      ]
    },
    "ActionsGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "properties": {
            "actionId": {
              "description": "ID of the Action.",
              "type": "string",
              "format": "uuid"
            },
            "result": {
              "description": "Results for this specific Action.",
              "format": "object",
              "properties": {
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                },
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": [
                    "SUCCESS",
                    "PENDING",
                    "FAILED"
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "ActionsListResponse": {
      "description": "List of Actions.",
      "type": "object",
      "properties": {
        "actions": {
          "description": "The actual list of Actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionGetResponse"
          }
        },
        "totalResults": {
          "description": "The total number of Actions for the query. The number of items in a response may be smaller due to paging.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response given by Weaviate end-points.",
      "type": "object",
      "properties": {
        "error": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "GraphQLError": {
      "description": "An error response caused by a GraphQL query.",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "column": {
                "type": "integer",
                "format": "int64"
              },
              "line": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GraphQLQueries": {
      "description": "A list of GraphQL queries.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GraphQLQuery"
      }
    },
    "GraphQLQuery": {
      "description": "GraphQL query based on: http://facebook.github.io/graphql/.",
      "type": "object",
      "properties": {
        "operationName": {
          "description": "The name of the operation if multiple exist in the query.",
          "type": "string"
        },
        "query": {
          "description": "Query based on GraphQL syntax.",
          "type": "string"
        },
        "variables": {
          "description": "Additional variables for the query.",
          "type": "object"
        }
      }
    },
    "GraphQLResponse": {
      "description": "GraphQL based response: http://facebook.github.io/graphql/.",
      "properties": {
        "data": {
          "description": "GraphQL data object.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonObject"
          }
        },
        "errors": {
          "description": "Array with errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphQLError"
          }
        }
      }
    },
    "GraphQLResponses": {
      "description": "A list of GraphQL responses.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GraphQLResponse"
      }
    },
    "JsonObject": {
      "description": "JSON object value.",
      "type": "object"
    },
    "Meta": {
      "description": "Contains meta information of the current Weaviate instance.",
      "type": "object",
      "properties": {
        "actionsSchema": {
          "$ref": "#/definitions/SemanticSchema"
        },
        "hostname": {
          "description": "The url of the host.",
          "type": "string",
          "format": "url"
        },
        "thingsSchema": {
          "$ref": "#/definitions/SemanticSchema"
        }
      }
    },
    "MultipleRef": {
      "description": "Multiple instances of references to other objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SingleRef"
      }
    },
    "PatchDocument": {
      "description": "A JSONPatch document as defined by RFC 6902.",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A string containing a JSON Pointer value.",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed.",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ]
        },
        "path": {
          "description": "A JSON-Pointer.",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "PeerUpdate": {
      "description": "A single peer in the network.",
      "properties": {
        "id": {
          "description": "The session ID of the peer.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Human readable name.",
          "type": "string"
        },
        "schemaHash": {
          "description": "The latest known hash of the peer's schema.",
          "type": "string"
        },
        "uri": {
          "description": "The location where the peer is exposed to the internet.",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "PeerUpdateList": {
      "description": "List of known peers.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PeerUpdate"
      }
    },
    "Schema": {
      "description": "This is an open object, with OpenAPI Specification 3.0 this will be more detailed. See Weaviate docs for more info. In the future this will become a key/value OR a SingleRef definition.",
      "type": "object"
    },
    "SchemaHistory": {
      "description": "This is an open object, with OpenAPI Specification 3.0 this will be more detailed. See Weaviate docs for more info. In the future this will become a key/value OR a SingleRef definition.",
      "type": "object"
    },
    "SemanticSchema": {
      "description": "Definitions of semantic schemas (also see: https://github.com/creativesoftwarefdn/weaviate-semantic-schemas).",
      "type": "object",
      "properties": {
        "@context": {
          "description": "URL of the context.",
          "type": "string",
          "format": "uri"
        },
        "classes": {
          "description": "Semantic classes that are available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SemanticSchemaClass"
          }
        },
        "maintainer": {
          "description": "Email of the maintainer.",
          "type": "string",
          "format": "email"
        },
        "name": {
          "description": "Name of the schema.",
          "type": "string"
        },
        "type": {
          "description": "Type of schema, should be \"thing\" or \"action\".",
          "type": "string",
          "enum": [
            "thing",
            "action"
          ]
        }
      }
    },
    "SemanticSchemaClass": {
      "type": "object",
      "properties": {
        "class": {
          "description": "Name of the class as URI relative to the schema URL.",
          "type": "string"
        },
        "description": {
          "description": "Description of the class.",
          "type": "string"
        },
        "keywords": {
          "$ref": "#/definitions/SemanticSchemaKeywords"
        },
        "properties": {
          "description": "The properties of the class.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SemanticSchemaClassProperty"
          }
        }
      }
    },
    "SemanticSchemaClassProperty": {
      "type": "object",
      "properties": {
        "@dataType": {
          "description": "Can be a reference ($cref) to another type when it starts with a capital (for example Person), otherwise \"string\" or \"int\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cardinality": {
          "description": "The cardinality of this property. If you want to store more than one value in a property, set this to 'many'. Defaults to 'atMostOne'. Note that by default properties can be empty in Weaviate.",
          "type": "string",
          "default": "atMostOne",
          "enum": [
            "atMostOne",
            "many"
          ]
        },
        "description": {
          "description": "Description of the property.",
          "type": "string"
        },
        "keywords": {
          "$ref": "#/definitions/SemanticSchemaKeywords"
        },
        "name": {
          "description": "Name of the property as URI relative to the schema URL.",
          "type": "string"
        }
      }
    },
    "SemanticSchemaKeywords": {
      "description": "Describes a class or property using multiple weighted words.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "SingleRef": {
      "properties": {
        "$cref": {
          "description": "URI to point to the cross-ref. Should be in the form of weaviate://localhost/things/\u003cuuid\u003e for the example of a local cross-ref to a thing",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "Thing": {
      "allOf": [
        {
          "$ref": "#/definitions/ThingCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Thing in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            },
            "key": {
              "$ref": "#/definitions/SingleRef"
            },
            "lastUpdateTimeUnix": {
              "description": "Timestamp of the last Thing update in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ThingCreate": {
      "type": "object",
      "properties": {
        "@class": {
          "description": "Class of the Thing, defined in the schema.",
          "type": "string"
        },
        "@context": {
          "description": "Available context schema.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "ThingGetHistoryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ThingHistory"
        },
        {
          "type": "object",
          "properties": {
            "thingId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "type": "object",
          "properties": {
            "thingId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingHistory": {
      "type": "object",
      "properties": {
        "deleted": {
          "description": "Indication whether the Action is deleted.",
          "type": "boolean"
        },
        "key": {
          "$ref": "#/definitions/SingleRef"
        },
        "propertyHistory": {
          "description": "An array with the history of the Things.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThingHistoryObject"
          }
        }
      }
    },
    "ThingHistoryObject": {
      "allOf": [
        {
          "$ref": "#/definitions/ThingCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Thing history in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ThingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "type": "object"
        }
      ]
    },
    "ThingsGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "properties": {
            "result": {
              "description": "Results for this specific Thing.",
              "format": "object",
              "properties": {
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                },
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": [
                    "SUCCESS",
                    "PENDING",
                    "FAILED"
                  ]
                }
              }
            },
            "thingId": {
              "description": "ID of the Thing.",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingsListResponse": {
      "description": "List of Things.",
      "type": "object",
      "properties": {
        "things": {
          "description": "The actual list of Things.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThingGetResponse"
          }
        },
        "totalResults": {
          "description": "The total number of Things for the query. The number of items in a response may be smaller due to paging.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ToolsMapRequest": {
      "type": "object",
      "properties": {
        "conceptCenter": {
          "description": "Concept that should function as center. Should be one concept (e.g., car) or CamelCased (e.g, MovedTo)",
          "type": "string"
        },
        "networkCenter": {
          "description": "Only needs to be set when type is centerOfNetwork and should contain the name of the Weaviate that is taken as center.",
          "type": "string"
        },
        "type": {
          "description": "What type of map should be generated?",
          "type": "string",
          "enum": [
            "zeroPointPosition",
            "centerOfSelf",
            "centerOfNetwork",
            "centerOfConcept"
          ]
        }
      }
    },
    "ToolsMapRequestResponse": {
      "description": "Map of concepts.",
      "type": "object",
      "properties": {
        "results": {
          "description": "Results of the map request",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "concept": {
                "$ref": "#/definitions/SemanticSchemaClass"
              },
              "distance": {
                "description": "Distance to original vector concept",
                "type": "number",
                "format": "float"
              },
              "location": {
                "description": "On which Weaviate is this concept located?",
                "type": "string"
              },
              "type": {
                "description": "Thing or Action",
                "type": "string",
                "enum": [
                  "thing",
                  "action"
                ]
              }
            }
          }
        },
        "startVector": {
          "description": "Startpoint in the Contextionary expressed as 300-dimensional space",
          "type": "array",
          "items": {
            "type": "number",
            "format": "float",
            "maximum": 300,
            "minimum": 300
          }
        },
        "type": {
          "description": "What type of map should be generated?",
          "type": "string",
          "enum": [
            "zeroPointPosition",
            "centerOfSelf",
            "centerOfNetwork",
            "centerOfConcept"
          ]
        }
      }
    },
    "VectorBasedQuestion": {
      "description": "Receive question based on array of classes, properties and values.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "classProps": {
            "description": "Vectorized properties.",
            "type": "array",
            "maxItems": 300,
            "minItems": 300,
            "items": {
              "type": "object",
              "properties": {
                "propsVectors": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "value": {
                  "description": "String with valuename.",
                  "type": "string"
                }
              }
            }
          },
          "classVectors": {
            "description": "Vectorized classname.",
            "type": "array",
            "maxItems": 300,
            "minItems": 300,
            "items": {
              "type": "number",
              "format": "float"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "CommonMaxResultsParameterQuery": {
      "type": "integer",
      "format": "int64",
      "description": "The maximum number of items to be returned per page. Default value is set in Weaviate config.",
      "name": "maxResults",
      "in": "query"
    },
    "CommonPageParameterQuery": {
      "type": "integer",
      "format": "int64",
      "description": "The page number of the items to be returned.",
      "name": "page",
      "in": "query"
    }
  },
  "tags": [
    {
      "name": "actions"
    },
    {
      "description": "These operations allow to execute batch requests for Things and Actions. Mostly used for importing large datasets.",
      "name": "batching"
    },
    {
      "name": "graphql"
    },
    {
      "name": "meta"
    },
    {
      "name": "P2P"
    },
    {
      "name": "things"
    },
    {
      "name": "knowledge tools"
    },
    {
      "description": "These operations enable manipulation of the schema in Weaviate schema.",
      "name": "schema"
    }
  ],
  "externalDocs": {
    "url": "https://github.com/creativesoftwarefdn/weaviate"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Decentralised Knowledge Graph",
    "title": "Weaviate - Decentralised Knowledge Graph",
    "contact": {
      "name": "Weaviate",
      "url": "https://github.com/creativesoftwarefdn",
      "email": "hello@creativesoftwarefdn.org"
    },
    "version": "0.12.37"
  },
  "basePath": "/weaviate/v1",
  "paths": {
    "/actions": {
      "get": {
        "description": "Lists all Actions in reverse order of creation, owned by the user that belongs to the used token.",
        "tags": [
          "actions"
        ],
        "summary": "Get a list of Actions related to this key.",
        "operationId": "weaviate.actions.list",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The maximum number of items to be returned per page. Default value is set in Weaviate config.",
            "name": "maxResults",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number of the items to be returned.",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Registers a new Action. Provided meta-data and schema values are validated.",
        "tags": [
          "actions"
        ],
        "summary": "Create Actions between two Things (object and subject).",
        "operationId": "weaviate.actions.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "$ref": "#/definitions/ActionCreate"
                },
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Action. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the value is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action created.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "202": {
            "description": "Successfully received. No guarantees are made that the Action persists.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/validate": {
      "post": {
        "description": "Validate an Action's schema and meta-data. It has to be based on a schema, which is related to the given Action to be accepted by this validation.",
        "tags": [
          "actions"
        ],
        "summary": "Validate an Action based on a schema.",
        "operationId": "weaviate.actions.validate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionValidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{actionId}": {
      "get": {
        "description": "Lists Actions.",
        "tags": [
          "actions"
        ],
        "summary": "Get a specific Action based on its UUID and a Thing UUID related to this key. Also available as Websocket bus.",
        "operationId": "weaviate.actions.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Updates an Action's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "actions"
        ],
        "summary": "Update an Action based on its UUID related to this key.",
        "operationId": "weaviate.action.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionUpdate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Deletes an Action from the system.",
        "tags": [
          "actions"
        ],
        "summary": "Delete an Action based on its UUID related to this key.",
        "operationId": "weaviate.actions.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": true,
        "x-available-in-websocket": true
      },
      "patch": {
        "description": "Updates an Action. This method supports patch semantics. Provided meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "actions"
        ],
        "summary": "Update an Action based on its UUID (using patch semantics) related to this key.",
        "operationId": "weaviate.actions.patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 if the patch is accepted. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the update is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
            "name": "async",
            "in": "query"
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDocument"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{actionId}/history": {
      "get": {
        "description": "Returns a particular Action history.",
        "tags": [
          "actions"
        ],
        "summary": "Get an Action's history based on its UUID related to this key.",
        "operationId": "weaviate.action.history.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionGetHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{actionId}/properties/{propertyName}": {
      "put": {
        "description": "Replace all references to a class-property.",
        "tags": [
          "actions"
        ],
        "summary": "Replace all references to a class-property.",
        "operationId": "weaviate.actions.properties.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Action.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced all the references."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "tags": [
          "actions"
        ],
        "summary": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "operationId": "weaviate.actions.properties.create",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Action.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the reference."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Delete the single reference that is given in the body from the list of references that this property has.",
        "tags": [
          "actions"
        ],
        "summary": "Delete the single reference that is given in the body from the list of references that this property has.",
        "operationId": "weaviate.actions.properties.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Action.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/actions": {
      "post": {
        "description": "Register new Actions in bulk. Given meta-data and schema values are validated.",
        "tags": [
          "batching",
          "actions"
        ],
        "summary": "Creates new Actions based on an Action template related to this key as a batch.",
        "operationId": "weaviate.batching.actions.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ActionCreate"
                  }
                },
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Action. You will receive this response before the persistence of the data is confirmed. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the persistence of the data is confirmed. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                },
                "fields": {
                  "description": "Define which fields need to be returned. Default value is ALL",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "ALL",
                    "enum": [
                      "ALL",
                      "@class",
                      "schema",
                      "key",
                      "actionId",
                      "creationTimeUnix"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actions created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionsGetResponse"
              }
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionsGetResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/things": {
      "post": {
        "description": "Register new Things in bulk. Provided meta-data and schema values are validated.",
        "tags": [
          "batching",
          "things"
        ],
        "summary": "Creates new Things based on a Thing template related to this key as a batch.",
        "operationId": "weaviate.batching.things.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Thing. You will receive this response before the persistence of the data is confirmed. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the persistence of the data is confirmed. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                },
                "fields": {
                  "description": "Define which fields need to be returned. Default value is ALL",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "ALL",
                    "enum": [
                      "ALL",
                      "@class",
                      "schema",
                      "key",
                      "thingId",
                      "creationTimeUnix"
                    ]
                  }
                },
                "things": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ThingCreate"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Things created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThingsGetResponse"
              }
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThingsGetResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/graphql": {
      "post": {
        "description": "Get an object based on GraphQL",
        "tags": [
          "graphql"
        ],
        "summary": "Get a response based on GraphQL",
        "operationId": "weaviate.graphql.post",
        "parameters": [
          {
            "description": "The GraphQL query request parameters.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphQLQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/graphql/batch": {
      "post": {
        "description": "Perform a batched GraphQL query",
        "tags": [
          "graphql"
        ],
        "summary": "Get a response based on GraphQL.",
        "operationId": "weaviate.graphql.batch",
        "parameters": [
          {
            "description": "The GraphQL queries.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphQLQueries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponses"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/meta": {
      "get": {
        "description": "Gives meta information about the server and can be used to provide information to another Weaviate instance that wants to interact with the current instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "meta"
        ],
        "summary": "Returns meta information of the current Weaviate instance.",
        "operationId": "weaviate.meta.get",
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/Meta"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/p2p/genesis": {
      "put": {
        "security": [],
        "description": "Receive an update from the Genesis server.",
        "tags": [
          "P2P"
        ],
        "operationId": "weaviate.p2p.genesis_update",
        "parameters": [
          {
            "name": "peers",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PeerUpdateList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alive and kicking!"
          },
          "401": {
            "description": "Unauthorized update."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/p2p/health": {
      "get": {
        "security": [],
        "description": "Check if a peer is alive and healthy.",
        "tags": [
          "P2P"
        ],
        "summary": "Check if a peer is alive.",
        "operationId": "weaviate.p2p.health",
        "responses": {
          "200": {
            "description": "Alive and kicking!"
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/schema": {
      "get": {
        "tags": [
          "schema"
        ],
        "summary": "Dump the current the database schema.",
        "operationId": "weaviate.schema.dump",
        "responses": {
          "200": {
            "description": "Successfully dumped the database schema.",
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "$ref": "#/definitions/SemanticSchema"
                },
                "things": {
                  "$ref": "#/definitions/SemanticSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Create a new Action class in the ontology.",
        "operationId": "weaviate.schema.actions.create",
        "parameters": [
          {
            "name": "actionClass",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClass"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the new Action class to the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "422": {
            "description": "Invalid Action class",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the Action.",
        "operationId": "weaviate.schema.actions.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the Action.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove an Action class (and all data in the instances) from the ontology.",
        "operationId": "weaviate.schema.actions.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the Action class from the ontology."
          },
          "400": {
            "description": "Could not delete the Action class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}/properties": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Add a property to an Action class.",
        "operationId": "weaviate.schema.actions.properties.add",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClassProperty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the property."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class."
          },
          "422": {
            "description": "Invalid property.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}/properties/{propertyName}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the property.",
        "operationId": "weaviate.schema.actions.properties.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the property.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class or property."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove a property from an Action class.",
        "operationId": "weaviate.schema.actions.properties.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the property from the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Action class or property."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Create a new Thing class in the ontology.",
        "operationId": "weaviate.schema.things.create",
        "parameters": [
          {
            "name": "thingClass",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClass"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the new Thing class to the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "422": {
            "description": "Invalid Thing class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the Thing.",
        "operationId": "weaviate.schema.things.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the Thing.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove a Thing class (and all data in the instances) from the ontology.",
        "operationId": "weaviate.schema.things.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the Thing class from the ontology."
          },
          "400": {
            "description": "Could not delete the Thing class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}/properties": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Add a property to a Thing class.",
        "operationId": "weaviate.schema.things.properties.add",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SemanticSchemaClassProperty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the property."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class."
          },
          "422": {
            "description": "Invalid property.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}/properties/{propertyName}": {
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Rename, or replace the keywords of the property.",
        "operationId": "weaviate.schema.things.properties.update",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "$ref": "#/definitions/SemanticSchemaKeywords"
                },
                "newName": {
                  "description": "The new name of the property.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class or property."
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema"
        ],
        "summary": "Remove a property from a Thing class.",
        "operationId": "weaviate.schema.things.properties.delete",
        "parameters": [
          {
            "type": "string",
            "name": "className",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "propertyName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the property from the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Could not find the Thing class or property."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/things": {
      "get": {
        "description": "Lists all Things in reverse order of creation, owned by the user that belongs to the used token.",
        "tags": [
          "things"
        ],
        "summary": "Get a list of Things related to this key.",
        "operationId": "weaviate.things.list",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The maximum number of items to be returned per page. Default value is set in Weaviate config.",
            "name": "maxResults",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number of the items to be returned.",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Registers a new Thing. Given meta-data and schema values are validated.",
        "tags": [
          "things"
        ],
        "summary": "Create a new Thing based on a Thing template related to this key.",
        "operationId": "weaviate.things.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "async": {
                  "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 with the new ID of the Thing. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the value is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
                  "type": "boolean"
                },
                "thing": {
                  "$ref": "#/definitions/ThingCreate"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thing created.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/validate": {
      "post": {
        "description": "Validate a Thing's schema and meta-data. It has to be based on a schema, which is related to the given Thing to be accepted by this validation.",
        "tags": [
          "things"
        ],
        "summary": "Validate Things schema.",
        "operationId": "weaviate.things.validate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{thingId}": {
      "get": {
        "description": "Returns a particular Thing data.",
        "tags": [
          "things"
        ],
        "summary": "Get a Thing based on its UUID related to this key.",
        "operationId": "weaviate.things.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Updates a Thing's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "things"
        ],
        "summary": "Update a Thing based on its UUID related to this key.",
        "operationId": "weaviate.things.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingUpdate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Deletes a Thing from the system. All Actions pointing to this Thing, where the Thing is the object of the Action, are also being deleted.",
        "tags": [
          "things"
        ],
        "summary": "Delete a Thing based on its UUID related to this key.",
        "operationId": "weaviate.things.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": true,
        "x-available-in-websocket": true
      },
      "patch": {
        "description": "Updates a Thing's data. This method supports patch semantics. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "tags": [
          "things"
        ],
        "summary": "Update a Thing based on its UUID (using patch semantics) related to this key.",
        "operationId": "weaviate.things.patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If ` + "`" + `async` + "`" + ` is true, return a 202 if the patch is accepted. You will receive this response before the data is made persistent. If ` + "`" + `async` + "`" + ` is false, you will receive confirmation after the update is made persistent. The value of ` + "`" + `async` + "`" + ` defaults to false.",
            "name": "async",
            "in": "query"
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDocument"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{thingId}/history": {
      "get": {
        "description": "Returns a particular Thing's history.",
        "tags": [
          "things"
        ],
        "summary": "Get a Thing's history based on its UUID related to this key.",
        "operationId": "weaviate.thing.history.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingGetHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{thingId}/properties/{propertyName}": {
      "put": {
        "description": "Replace all references to a class-property.",
        "tags": [
          "things"
        ],
        "summary": "Replace all references to a class-property.",
        "operationId": "weaviate.things.properties.update",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Thing.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced all the references (success is based on the behavior of the datastore)."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "tags": [
          "things"
        ],
        "summary": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "operationId": "weaviate.things.properties.create",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Thing.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the reference."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Delete the single reference that is given in the body from the list of references that this property has.",
        "tags": [
          "things"
        ],
        "summary": "Delete the single reference that is given in the body from the list of references that this property has.",
        "operationId": "weaviate.things.properties.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the Thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique name of the property related to the Thing.",
            "name": "propertyName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/tools/map": {
      "post": {
        "description": "Tool to render a map of concepts, based on ontologies available over the network.",
        "tags": [
          "knowledge tools"
        ],
        "summary": "Tool to render a map of concepts, based on ontologies available over the network.",
        "operationId": "weaviate.tools.map",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ToolsMapRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ToolsMapRequestResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Action in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            },
            "lastUpdateTimeUnix": {
              "description": "Timestamp of the last update made to the Action since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ActionCreate": {
      "type": "object",
      "properties": {
        "@class": {
          "description": "Type of the Action, defined in the schema.",
          "type": "string"
        },
        "@context": {
          "description": "Available context schema.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "ActionGetHistoryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ActionHistory"
        },
        {
          "type": "object",
          "properties": {
            "actionId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ActionGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "properties": {
            "actionId": {
              "description": "ID of the Action.",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ActionHistory": {
      "type": "object",
      "properties": {
        "deleted": {
          "description": "Indication of whether the Action is deleted.",
          "type": "boolean"
        },
        "propertyHistory": {
          "description": "An array with the history of the Action.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionHistoryObject"
          }
        }
      }
    },
    "ActionHistoryObject": {
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Action history in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ActionUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "type": "object"
        }
      ]
    },
    "ActionValidate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        }
      ]
    },
    "ActionsGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "properties": {
            "actionId": {
              "description": "ID of the Action.",
              "type": "string",
              "format": "uuid"
            },
            "result": {
              "description": "Results for this specific Action.",
              "format": "object",
              "properties": {
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                },
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": [
                    "SUCCESS",
                    "PENDING",
                    "FAILED"
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "ActionsListResponse": {
      "description": "List of Actions.",
      "type": "object",
      "properties": {
        "actions": {
          "description": "The actual list of Actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionGetResponse"
          }
        },
        "totalResults": {
          "description": "The total number of Actions for the query. The number of items in a response may be smaller due to paging.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response given by Weaviate end-points.",
      "type": "object",
      "properties": {
        "error": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "GraphQLError": {
      "description": "An error response caused by a GraphQL query.",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "column": {
                "type": "integer",
                "format": "int64"
              },
              "line": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GraphQLQueries": {
      "description": "A list of GraphQL queries.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GraphQLQuery"
      }
    },
    "GraphQLQuery": {
      "description": "GraphQL query based on: http://facebook.github.io/graphql/.",
      "type": "object",
      "properties": {
        "operationName": {
          "description": "The name of the operation if multiple exist in the query.",
          "type": "string"
        },
        "query": {
          "description": "Query based on GraphQL syntax.",
          "type": "string"
        },
        "variables": {
          "description": "Additional variables for the query.",
          "type": "object"
        }
      }
    },
    "GraphQLResponse": {
      "description": "GraphQL based response: http://facebook.github.io/graphql/.",
      "properties": {
        "data": {
          "description": "GraphQL data object.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonObject"
          }
        },
        "errors": {
          "description": "Array with errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphQLError"
          }
        }
      }
    },
    "GraphQLResponses": {
      "description": "A list of GraphQL responses.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GraphQLResponse"
      }
    },
    "JsonObject": {
      "description": "JSON object value.",
      "type": "object"
    },
    "Meta": {
      "description": "Contains meta information of the current Weaviate instance.",
      "type": "object",
      "properties": {
        "actionsSchema": {
          "$ref": "#/definitions/SemanticSchema"
        },
        "hostname": {
          "description": "The url of the host.",
          "type": "string",
          "format": "url"
        },
        "thingsSchema": {
          "$ref": "#/definitions/SemanticSchema"
        }
      }
    },
    "MultipleRef": {
      "description": "Multiple instances of references to other objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SingleRef"
      }
    },
    "PatchDocument": {
      "description": "A JSONPatch document as defined by RFC 6902.",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A string containing a JSON Pointer value.",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed.",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ]
        },
        "path": {
          "description": "A JSON-Pointer.",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "PeerUpdate": {
      "description": "A single peer in the network.",
      "properties": {
        "id": {
          "description": "The session ID of the peer.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Human readable name.",
          "type": "string"
        },
        "schemaHash": {
          "description": "The latest known hash of the peer's schema.",
          "type": "string"
        },
        "uri": {
          "description": "The location where the peer is exposed to the internet.",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "PeerUpdateList": {
      "description": "List of known peers.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PeerUpdate"
      }
    },
    "Schema": {
      "description": "This is an open object, with OpenAPI Specification 3.0 this will be more detailed. See Weaviate docs for more info. In the future this will become a key/value OR a SingleRef definition.",
      "type": "object"
    },
    "SchemaHistory": {
      "description": "This is an open object, with OpenAPI Specification 3.0 this will be more detailed. See Weaviate docs for more info. In the future this will become a key/value OR a SingleRef definition.",
      "type": "object"
    },
    "SemanticSchema": {
      "description": "Definitions of semantic schemas (also see: https://github.com/creativesoftwarefdn/weaviate-semantic-schemas).",
      "type": "object",
      "properties": {
        "@context": {
          "description": "URL of the context.",
          "type": "string",
          "format": "uri"
        },
        "classes": {
          "description": "Semantic classes that are available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SemanticSchemaClass"
          }
        },
        "maintainer": {
          "description": "Email of the maintainer.",
          "type": "string",
          "format": "email"
        },
        "name": {
          "description": "Name of the schema.",
          "type": "string"
        },
        "type": {
          "description": "Type of schema, should be \"thing\" or \"action\".",
          "type": "string",
          "enum": [
            "thing",
            "action"
          ]
        }
      }
    },
    "SemanticSchemaClass": {
      "type": "object",
      "properties": {
        "class": {
          "description": "Name of the class as URI relative to the schema URL.",
          "type": "string"
        },
        "description": {
          "description": "Description of the class.",
          "type": "string"
        },
        "keywords": {
          "$ref": "#/definitions/SemanticSchemaKeywords"
        },
        "properties": {
          "description": "The properties of the class.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SemanticSchemaClassProperty"
          }
        }
      }
    },
    "SemanticSchemaClassProperty": {
      "type": "object",
      "properties": {
        "@dataType": {
          "description": "Can be a reference ($cref) to another type when it starts with a capital (for example Person), otherwise \"string\" or \"int\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cardinality": {
          "description": "The cardinality of this property. If you want to store more than one value in a property, set this to 'many'. Defaults to 'atMostOne'. Note that by default properties can be empty in Weaviate.",
          "type": "string",
          "default": "atMostOne",
          "enum": [
            "atMostOne",
            "many"
          ]
        },
        "description": {
          "description": "Description of the property.",
          "type": "string"
        },
        "keywords": {
          "$ref": "#/definitions/SemanticSchemaKeywords"
        },
        "name": {
          "description": "Name of the property as URI relative to the schema URL.",
          "type": "string"
        }
      }
    },
    "SemanticSchemaKeywords": {
      "description": "Describes a class or property using multiple weighted words.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "SingleRef": {
      "properties": {
        "$cref": {
          "description": "URI to point to the cross-ref. Should be in the form of weaviate://localhost/things/\u003cuuid\u003e for the example of a local cross-ref to a thing",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "Thing": {
      "allOf": [
        {
          "$ref": "#/definitions/ThingCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Thing in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            },
            "key": {
              "$ref": "#/definitions/SingleRef"
            },
            "lastUpdateTimeUnix": {
              "description": "Timestamp of the last Thing update in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ThingCreate": {
      "type": "object",
      "properties": {
        "@class": {
          "description": "Class of the Thing, defined in the schema.",
          "type": "string"
        },
        "@context": {
          "description": "Available context schema.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "ThingGetHistoryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ThingHistory"
        },
        {
          "type": "object",
          "properties": {
            "thingId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "type": "object",
          "properties": {
            "thingId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingHistory": {
      "type": "object",
      "properties": {
        "deleted": {
          "description": "Indication whether the Action is deleted.",
          "type": "boolean"
        },
        "key": {
          "$ref": "#/definitions/SingleRef"
        },
        "propertyHistory": {
          "description": "An array with the history of the Things.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThingHistoryObject"
          }
        }
      }
    },
    "ThingHistoryObject": {
      "allOf": [
        {
          "$ref": "#/definitions/ThingCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this Thing history in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ThingUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "type": "object"
        }
      ]
    },
    "ThingsGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "properties": {
            "result": {
              "description": "Results for this specific Thing.",
              "format": "object",
              "properties": {
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                },
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": [
                    "SUCCESS",
                    "PENDING",
                    "FAILED"
                  ]
                }
              }
            },
            "thingId": {
              "description": "ID of the Thing.",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingsListResponse": {
      "description": "List of Things.",
      "type": "object",
      "properties": {
        "things": {
          "description": "The actual list of Things.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThingGetResponse"
          }
        },
        "totalResults": {
          "description": "The total number of Things for the query. The number of items in a response may be smaller due to paging.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ToolsMapRequest": {
      "type": "object",
      "properties": {
        "conceptCenter": {
          "description": "Concept that should function as center. Should be one concept (e.g., car) or CamelCased (e.g, MovedTo)",
          "type": "string"
        },
        "networkCenter": {
          "description": "Only needs to be set when type is centerOfNetwork and should contain the name of the Weaviate that is taken as center.",
          "type": "string"
        },
        "type": {
          "description": "What type of map should be generated?",
          "type": "string",
          "enum": [
            "zeroPointPosition",
            "centerOfSelf",
            "centerOfNetwork",
            "centerOfConcept"
          ]
        }
      }
    },
    "ToolsMapRequestResponse": {
      "description": "Map of concepts.",
      "type": "object",
      "properties": {
        "results": {
          "description": "Results of the map request",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "concept": {
                "$ref": "#/definitions/SemanticSchemaClass"
              },
              "distance": {
                "description": "Distance to original vector concept",
                "type": "number",
                "format": "float"
              },
              "location": {
                "description": "On which Weaviate is this concept located?",
                "type": "string"
              },
              "type": {
                "description": "Thing or Action",
                "type": "string",
                "enum": [
                  "thing",
                  "action"
                ]
              }
            }
          }
        },
        "startVector": {
          "description": "Startpoint in the Contextionary expressed as 300-dimensional space",
          "type": "array",
          "items": {
            "type": "number",
            "format": "float",
            "maximum": 300,
            "minimum": 300
          }
        },
        "type": {
          "description": "What type of map should be generated?",
          "type": "string",
          "enum": [
            "zeroPointPosition",
            "centerOfSelf",
            "centerOfNetwork",
            "centerOfConcept"
          ]
        }
      }
    },
    "VectorBasedQuestion": {
      "description": "Receive question based on array of classes, properties and values.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "classProps": {
            "description": "Vectorized properties.",
            "type": "array",
            "maxItems": 300,
            "minItems": 300,
            "items": {
              "type": "object",
              "properties": {
                "propsVectors": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "value": {
                  "description": "String with valuename.",
                  "type": "string"
                }
              }
            }
          },
          "classVectors": {
            "description": "Vectorized classname.",
            "type": "array",
            "maxItems": 300,
            "minItems": 300,
            "items": {
              "type": "number",
              "format": "float"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "CommonMaxResultsParameterQuery": {
      "type": "integer",
      "format": "int64",
      "description": "The maximum number of items to be returned per page. Default value is set in Weaviate config.",
      "name": "maxResults",
      "in": "query"
    },
    "CommonPageParameterQuery": {
      "type": "integer",
      "format": "int64",
      "description": "The page number of the items to be returned.",
      "name": "page",
      "in": "query"
    }
  },
  "tags": [
    {
      "name": "actions"
    },
    {
      "description": "These operations allow to execute batch requests for Things and Actions. Mostly used for importing large datasets.",
      "name": "batching"
    },
    {
      "name": "graphql"
    },
    {
      "name": "meta"
    },
    {
      "name": "P2P"
    },
    {
      "name": "things"
    },
    {
      "name": "knowledge tools"
    },
    {
      "description": "These operations enable manipulation of the schema in Weaviate schema.",
      "name": "schema"
    }
  ],
  "externalDocs": {
    "url": "https://github.com/creativesoftwarefdn/weaviate"
  }
}`))
}
