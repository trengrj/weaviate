/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 Weaviate. All rights reserved.
 * LICENSE: https://github.com/weaviate/weaviate/blob/master/LICENSE
 * AUTHOR: Bob van Luijt (bob@weaviate.com)
 * See www.weaviate.com for details
 * Contact: @weaviate_iot / yourfriends@weaviate.com
 */
   

package restapi

// This file was generated by the swagger tool.
 

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/xml",
    "application/x-yaml",
    "text/plain",
    "application/octet-stream",
    "multipart/form-data",
    "application/x-www-form-urlencoded",
    "application/json-patch+json"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "application/x-yaml",
    "text/plain",
    "application/octet-stream",
    "multipart/form-data",
    "application/x-www-form-urlencoded"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Semantic Graphql, RESTful and MQTT Web of Things platform.",
    "title": "Weaviate - Semantic Graphql, RESTful and MQTT Web of Things platform.",
    "contact": {
      "name": "Weaviate",
      "url": "https://weaviate.com",
      "email": "yourfriends@weaviate.com"
    },
    "version": "v0.4.0"
  },
  "basePath": "/weaviate/v1",
  "paths": {
    "/actions/validate": {
      "post": {
        "description": "Validate an action object. It has to be based on a schema, which is related to the given Thing to be accepted by this validation.",
        "tags": [
          "actions"
        ],
        "summary": "Validate an action based on a schema.",
        "operationId": "weaviate.actions.validate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionValidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/actions/{actionId}": {
      "get": {
        "description": "Lists actions.",
        "tags": [
          "actions"
        ],
        "summary": "Get a specific action based on its uuid and a thing uuid related to this key.",
        "operationId": "weaviate.actions.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the action.",
            "name": "actionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "patch": {
        "description": "Updates an action. This method supports patch semantics.",
        "tags": [
          "actions"
        ],
        "summary": "Update an action based on its uuid (using patch semantics) related to this key.",
        "operationId": "weaviate.actions.patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the action.",
            "name": "actionId",
            "in": "path",
            "required": true
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDocument"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updated.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/graphql": {
      "post": {
        "description": "Get, update or insert based on GraphQL",
        "tags": [
          "graphql"
        ],
        "summary": "Get a response based on GraphQL",
        "operationId": "weavaite.graphql.post",
        "responses": {
          "200": {
            "description": "Succesful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponse"
            }
          },
          "202": {
            "description": "Successfully received (with updates).",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/keys": {
      "post": {
        "description": "Creates a new key.",
        "tags": [
          "keys"
        ],
        "summary": "Create a new key related to this key.",
        "operationId": "weaviate.key.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyCreate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/KeyTokenGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/keys/me": {
      "get": {
        "description": "Get the key-information of the key used.",
        "tags": [
          "keys"
        ],
        "summary": "Get a key based on the key used to do the request.",
        "operationId": "weaviate.keys.me.get",
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/KeyTokenGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "delete": {
        "description": "Deletes key used to do the request.",
        "tags": [
          "keys"
        ],
        "summary": "Delete a key based on the key used to do the request.",
        "operationId": "weaviate.keys.me.delete",
        "responses": {
          "204": {
            "description": "Successful deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/keys/me/children": {
      "get": {
        "description": "Get children of used key, only one step deep. A child can have children of its own.",
        "tags": [
          "keys"
        ],
        "summary": "Get an object of this keys' children related to the key used for request.",
        "operationId": "weaviate.keys.me.children.get",
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/KeyChildrenGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented"
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/keys/{keyId}": {
      "get": {
        "description": "Get a key.",
        "tags": [
          "keys"
        ],
        "summary": "Get a key based on its uuid related to this key.",
        "operationId": "weaviate.keys.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the key.",
            "name": "keyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/KeyGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "delete": {
        "description": "Deletes a key. Only parent or self is allowed to delete key.",
        "tags": [
          "keys"
        ],
        "summary": "Delete a key based on its uuid related to this key.",
        "operationId": "weaviate.keys.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the key.",
            "name": "keyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/keys/{keyId}/children": {
      "get": {
        "description": "Get children of a key, only one step deep. A child can have children of its own.",
        "tags": [
          "keys"
        ],
        "summary": "Get an object of this keys' children related to this key.",
        "operationId": "weaviate.keys.children.get",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the key.",
            "name": "keyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/KeyChildrenGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented"
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/things": {
      "get": {
        "description": "Lists all things in reverse order of creation, owned by the user that belongs to the used token.",
        "tags": [
          "things"
        ],
        "summary": "Get a list of things related to this key.",
        "operationId": "weaviate.things.list",
        "parameters": [
          {
            "$ref": "#/parameters/CommonMaxResultsParameterQuery"
          },
          {
            "$ref": "#/parameters/CommonPageParameterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "post": {
        "description": "Registers a new thing. This method may be used only by aggregator things or adapters.",
        "tags": [
          "things"
        ],
        "summary": "Create a new thing based on a thing template related to this key.",
        "operationId": "weaviate.things.create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingCreate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/things/validate": {
      "post": {
        "description": "Validate thing.",
        "tags": [
          "things"
        ],
        "summary": "Validate Things schema.",
        "operationId": "weaviate.things.validate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/things/{thingId}": {
      "get": {
        "description": "Returns a particular thing data.",
        "tags": [
          "things"
        ],
        "summary": "Get a thing based on its uuid related to this key.",
        "operationId": "weaviate.things.get",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "put": {
        "description": "Updates a thing data.",
        "tags": [
          "things"
        ],
        "summary": "Update a thing based on its uuid related to this key.",
        "operationId": "weaviate.things.update",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThingUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "delete": {
        "description": "Deletes a thing from the system.",
        "tags": [
          "things"
        ],
        "summary": "Delete a thing based on its uuid related to this key.",
        "operationId": "weaviate.things.delete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      },
      "patch": {
        "description": "Updates a thing data. This method supports patch semantics.",
        "tags": [
          "things"
        ],
        "summary": "Update a thing based on its uuid (using patch semantics) related to this key.",
        "operationId": "weaviate.things.patch",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDocument"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update.",
            "schema": {
              "$ref": "#/definitions/ThingGetResponse"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    },
    "/things/{thingId}/actions": {
      "get": {
        "description": "Lists all actions in reverse order of creation, owned by the user that belongs to the used token.",
        "tags": [
          "actions"
        ],
        "summary": "Get a list of actions based on a thing's uuid (also available as MQTT channel) related to this key.",
        "operationId": "weaviate.things.actions.list",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/CommonMaxResultsParameterQuery"
          },
          {
            "$ref": "#/parameters/CommonPageParameterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": true
      },
      "post": {
        "description": "Create action.",
        "tags": [
          "actions"
        ],
        "summary": "Create actions for a thing (also available as MQTT channel) related to this key.",
        "operationId": "weaviate.things.actions.create",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the thing.",
            "name": "thingId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionCreate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/ActionGetResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "The used API-key has insufficient permissions."
          },
          "422": {
            "description": "Can not validate, check the body."
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "x-available-in-mqtt": false
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        },
        {
          "type": "object",
          "properties": {
            "creationTimeUnix": {
              "description": "Timestamp of creation of this action in milliseconds since epoch UTC.",
              "type": "integer",
              "format": "int64"
            },
            "lastUpdateTimeUnix": {
              "description": "Timestamp since epoch of last update made to the action.",
              "type": "integer",
              "format": "int64"
            },
            "thingId": {
              "description": "Thing id.",
              "type": "string",
              "format": "uuid"
            },
            "userKey": {
              "description": "User that caused the action (if applicable).",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ActionCreate": {
      "type": "object",
      "properties": {
        "@context": {
          "description": "Available context. For now only schema.org",
          "type": "string",
          "enum": [
            "http://schema.org"
          ]
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "ActionGetResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "properties": {
            "actionId": {
              "description": "ID of the action.",
              "type": "string",
              "format": "uuid"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"weaviate#actionGetResponse\".",
              "type": "string",
              "default": "weaviate#actionGetResponse"
            }
          }
        }
      ]
    },
    "ActionValidate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActionCreate"
        }
      ]
    },
    "ActionsListResponse": {
      "description": "List of actions.",
      "type": "object",
      "properties": {
        "actions": {
          "description": "The actual list of actions in reverse chronological order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionGetResponse"
          }
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"weaviate#actionsListResponse\".",
          "type": "string",
          "default": "weaviate#actionsListResponse"
        },
        "totalResults": {
          "description": "The total number of actions for the query. The number of items in a response may be smaller due to paging.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GraphQLResponse": {
      "description": "GraphQL based repsonse: http://graphql.org/learn/",
      "properties": {
        "data": {
          "description": "GraphQL data object",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonObject"
          }
        },
        "errors": {
          "description": "Array with errors",
          "type": "array"
        }
      }
    },
    "JsonObject": {
      "description": "JSON object value.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/JsonValue"
      }
    },
    "JsonValue": {
      "description": "JSON value -- union over JSON value types."
    },
    "KeyChildrenGetResponse": {
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "KeyCreate": {
      "properties": {
        "delete": {
          "description": "Is user allowed to delete.",
          "type": "boolean"
        },
        "email": {
          "description": "Email associated with this account.",
          "type": "string"
        },
        "execute": {
          "description": "Is user allowed to execute.",
          "type": "boolean"
        },
        "ipOrigin": {
          "description": "Origin of the IP using CIDR notation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keyExpiresUnix": {
          "description": "Time as Unix timestamp that the key expires. Set to 0 for never.",
          "type": "integer",
          "format": "int64"
        },
        "read": {
          "description": "Is user allowed to read.",
          "type": "boolean"
        },
        "write": {
          "description": "Is user allowed to write.",
          "type": "boolean"
        }
      }
    },
    "KeyGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/KeyCreate"
        },
        {
          "properties": {
            "keyId": {
              "description": "Id of the key.",
              "type": "string",
              "format": "uuid"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"weaviate#keyGetResponse\".",
              "type": "string",
              "default": "weaviate#keyGetResponse"
            },
            "parent": {
              "description": "Parent key. A parent allways has access to a child. Root key has parent value 0. Only a user with a root of 0 can set a root key.",
              "type": "string"
            }
          }
        }
      ]
    },
    "KeyTokenGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/KeyGetResponse"
        },
        {
          "properties": {
            "key": {
              "description": "Key for user to use.",
              "type": "string"
            }
          }
        }
      ]
    },
    "PatchDocument": {
      "description": "A JSONPatch document as defined by RFC 6902.",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A string containing a JSON Pointer value.",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed.",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ]
        },
        "path": {
          "description": "A JSON-Pointer.",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "Schema": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/JsonObject"
      }
    },
    "Thing": {
      "type": "object",
      "properties": {
        "@context": {
          "description": "Available context. For now only schema.org",
          "type": "string",
          "enum": [
            "http://schema.org"
          ]
        },
        "creationTimeMs": {
          "description": "Timestamp of creation of this thing in milliseconds since epoch UTC.",
          "type": "integer",
          "format": "int64"
        },
        "lastSeenTimeMs": {
          "description": "Timestamp of the last request from this thing in milliseconds since epoch UTC. Supported only for things with XMPP channel type.",
          "type": "integer",
          "format": "int64"
        },
        "lastUpdateTimeMs": {
          "description": "Timestamp of the last thing update in milliseconds since epoch UTC.",
          "type": "integer",
          "format": "int64"
        },
        "lastUseTimeMs": {
          "description": "Timestamp of the last thing usage in milliseconds since epoch UTC.",
          "type": "integer",
          "format": "int64"
        },
        "potentialActionIds": {
          "description": "The id of the actions that this device is able to execute.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "ThingCreate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        }
      ]
    },
    "ThingGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "type": "object",
          "properties": {
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"weaviate#thingGetResponse\".",
              "type": "string",
              "default": "weaviate#thingGetResponse"
            },
            "thingId": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "ThingUpdate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        }
      ]
    },
    "ThingsListResponse": {
      "description": "List of things.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"weaviate#thingsListResponse\".",
          "type": "string",
          "default": "weaviate#thingsListResponse"
        },
        "things": {
          "description": "The actual list of things.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThingGetResponse"
          }
        },
        "totalResults": {
          "description": "The total number of things for the query. The number of items in a response may be smaller due to paging.",
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "parameters": {
    "CommonMaxResultsParameterQuery": {
      "type": "integer",
      "format": "int64",
      "description": "The maximum number of items to be returned per page.",
      "name": "maxResults",
      "in": "query"
    },
    "CommonPageParameterQuery": {
      "type": "integer",
      "format": "int64",
      "description": "The page number of the items to be returned.",
      "name": "page",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "actions"
    },
    {
      "name": "graphql"
    },
    {
      "name": "keys"
    },
    {
      "name": "things"
    }
  ],
  "externalDocs": {
    "url": "https://weaviate.com"
  }
}`))
}
