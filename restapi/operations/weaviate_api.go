/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	"github.com/go-openapi/runtime/yamlpc"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/creativesoftwarefdn/weaviate/restapi/operations/actions"
	"github.com/creativesoftwarefdn/weaviate/restapi/operations/contextionary_api"
	"github.com/creativesoftwarefdn/weaviate/restapi/operations/graphql"
	"github.com/creativesoftwarefdn/weaviate/restapi/operations/meta"
	"github.com/creativesoftwarefdn/weaviate/restapi/operations/p2_p"
	"github.com/creativesoftwarefdn/weaviate/restapi/operations/schema"
	"github.com/creativesoftwarefdn/weaviate/restapi/operations/things"

	models "github.com/creativesoftwarefdn/weaviate/models"
)

// NewWeaviateAPI creates a new Weaviate instance
func NewWeaviateAPI(spec *loads.Document) *WeaviateAPI {
	return &WeaviateAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		YamlConsumer:        yamlpc.YAMLConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ActionsWeaviateActionHistoryGetHandler: actions.WeaviateActionHistoryGetHandlerFunc(func(params actions.WeaviateActionHistoryGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionHistoryGet has not yet been implemented")
		}),
		ActionsWeaviateActionUpdateHandler: actions.WeaviateActionUpdateHandlerFunc(func(params actions.WeaviateActionUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionUpdate has not yet been implemented")
		}),
		ActionsWeaviateActionsCreateHandler: actions.WeaviateActionsCreateHandlerFunc(func(params actions.WeaviateActionsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsCreate has not yet been implemented")
		}),
		ActionsWeaviateActionsDeleteHandler: actions.WeaviateActionsDeleteHandlerFunc(func(params actions.WeaviateActionsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsDelete has not yet been implemented")
		}),
		ActionsWeaviateActionsGetHandler: actions.WeaviateActionsGetHandlerFunc(func(params actions.WeaviateActionsGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsGet has not yet been implemented")
		}),
		ActionsWeaviateActionsListHandler: actions.WeaviateActionsListHandlerFunc(func(params actions.WeaviateActionsListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsList has not yet been implemented")
		}),
		ActionsWeaviateActionsPatchHandler: actions.WeaviateActionsPatchHandlerFunc(func(params actions.WeaviateActionsPatchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsPatch has not yet been implemented")
		}),
		ActionsWeaviateActionsReferencesCreateHandler: actions.WeaviateActionsReferencesCreateHandlerFunc(func(params actions.WeaviateActionsReferencesCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsReferencesCreate has not yet been implemented")
		}),
		ActionsWeaviateActionsReferencesDeleteHandler: actions.WeaviateActionsReferencesDeleteHandlerFunc(func(params actions.WeaviateActionsReferencesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsReferencesDelete has not yet been implemented")
		}),
		ActionsWeaviateActionsReferencesUpdateHandler: actions.WeaviateActionsReferencesUpdateHandlerFunc(func(params actions.WeaviateActionsReferencesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsReferencesUpdate has not yet been implemented")
		}),
		ActionsWeaviateActionsValidateHandler: actions.WeaviateActionsValidateHandlerFunc(func(params actions.WeaviateActionsValidateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ActionsWeaviateActionsValidate has not yet been implemented")
		}),
		WeaviateBatchingActionsCreateHandler: WeaviateBatchingActionsCreateHandlerFunc(func(params WeaviateBatchingActionsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation WeaviateBatchingActionsCreate has not yet been implemented")
		}),
		WeaviateBatchingReferencesCreateHandler: WeaviateBatchingReferencesCreateHandlerFunc(func(params WeaviateBatchingReferencesCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation WeaviateBatchingReferencesCreate has not yet been implemented")
		}),
		WeaviateBatchingThingsCreateHandler: WeaviateBatchingThingsCreateHandlerFunc(func(params WeaviateBatchingThingsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation WeaviateBatchingThingsCreate has not yet been implemented")
		}),
		ContextionaryAPIWeaviateC11yCorpusGetHandler: contextionary_api.WeaviateC11yCorpusGetHandlerFunc(func(params contextionary_api.WeaviateC11yCorpusGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ContextionaryAPIWeaviateC11yCorpusGet has not yet been implemented")
		}),
		ContextionaryAPIWeaviateC11yWordsHandler: contextionary_api.WeaviateC11yWordsHandlerFunc(func(params contextionary_api.WeaviateC11yWordsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ContextionaryAPIWeaviateC11yWords has not yet been implemented")
		}),
		GraphqlWeaviateGraphqlBatchHandler: graphql.WeaviateGraphqlBatchHandlerFunc(func(params graphql.WeaviateGraphqlBatchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation GraphqlWeaviateGraphqlBatch has not yet been implemented")
		}),
		GraphqlWeaviateGraphqlPostHandler: graphql.WeaviateGraphqlPostHandlerFunc(func(params graphql.WeaviateGraphqlPostParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation GraphqlWeaviateGraphqlPost has not yet been implemented")
		}),
		MetaWeaviateMetaGetHandler: meta.WeaviateMetaGetHandlerFunc(func(params meta.WeaviateMetaGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MetaWeaviateMetaGet has not yet been implemented")
		}),
		P2PWeaviateP2pGenesisUpdateHandler: p2_p.WeaviateP2pGenesisUpdateHandlerFunc(func(params p2_p.WeaviateP2pGenesisUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation P2PWeaviateP2pGenesisUpdate has not yet been implemented")
		}),
		P2PWeaviateP2pHealthHandler: p2_p.WeaviateP2pHealthHandlerFunc(func(params p2_p.WeaviateP2pHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation P2PWeaviateP2pHealth has not yet been implemented")
		}),
		SchemaWeaviateSchemaActionsCreateHandler: schema.WeaviateSchemaActionsCreateHandlerFunc(func(params schema.WeaviateSchemaActionsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaActionsCreate has not yet been implemented")
		}),
		SchemaWeaviateSchemaActionsDeleteHandler: schema.WeaviateSchemaActionsDeleteHandlerFunc(func(params schema.WeaviateSchemaActionsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaActionsDelete has not yet been implemented")
		}),
		SchemaWeaviateSchemaActionsPropertiesAddHandler: schema.WeaviateSchemaActionsPropertiesAddHandlerFunc(func(params schema.WeaviateSchemaActionsPropertiesAddParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaActionsPropertiesAdd has not yet been implemented")
		}),
		SchemaWeaviateSchemaActionsPropertiesDeleteHandler: schema.WeaviateSchemaActionsPropertiesDeleteHandlerFunc(func(params schema.WeaviateSchemaActionsPropertiesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaActionsPropertiesDelete has not yet been implemented")
		}),
		SchemaWeaviateSchemaActionsPropertiesUpdateHandler: schema.WeaviateSchemaActionsPropertiesUpdateHandlerFunc(func(params schema.WeaviateSchemaActionsPropertiesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaActionsPropertiesUpdate has not yet been implemented")
		}),
		SchemaWeaviateSchemaActionsUpdateHandler: schema.WeaviateSchemaActionsUpdateHandlerFunc(func(params schema.WeaviateSchemaActionsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaActionsUpdate has not yet been implemented")
		}),
		SchemaWeaviateSchemaDumpHandler: schema.WeaviateSchemaDumpHandlerFunc(func(params schema.WeaviateSchemaDumpParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaDump has not yet been implemented")
		}),
		SchemaWeaviateSchemaThingsCreateHandler: schema.WeaviateSchemaThingsCreateHandlerFunc(func(params schema.WeaviateSchemaThingsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaThingsCreate has not yet been implemented")
		}),
		SchemaWeaviateSchemaThingsDeleteHandler: schema.WeaviateSchemaThingsDeleteHandlerFunc(func(params schema.WeaviateSchemaThingsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaThingsDelete has not yet been implemented")
		}),
		SchemaWeaviateSchemaThingsPropertiesAddHandler: schema.WeaviateSchemaThingsPropertiesAddHandlerFunc(func(params schema.WeaviateSchemaThingsPropertiesAddParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaThingsPropertiesAdd has not yet been implemented")
		}),
		SchemaWeaviateSchemaThingsPropertiesDeleteHandler: schema.WeaviateSchemaThingsPropertiesDeleteHandlerFunc(func(params schema.WeaviateSchemaThingsPropertiesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaThingsPropertiesDelete has not yet been implemented")
		}),
		SchemaWeaviateSchemaThingsPropertiesUpdateHandler: schema.WeaviateSchemaThingsPropertiesUpdateHandlerFunc(func(params schema.WeaviateSchemaThingsPropertiesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaThingsPropertiesUpdate has not yet been implemented")
		}),
		SchemaWeaviateSchemaThingsUpdateHandler: schema.WeaviateSchemaThingsUpdateHandlerFunc(func(params schema.WeaviateSchemaThingsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SchemaWeaviateSchemaThingsUpdate has not yet been implemented")
		}),
		ThingsWeaviateThingHistoryGetHandler: things.WeaviateThingHistoryGetHandlerFunc(func(params things.WeaviateThingHistoryGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingHistoryGet has not yet been implemented")
		}),
		ThingsWeaviateThingsCreateHandler: things.WeaviateThingsCreateHandlerFunc(func(params things.WeaviateThingsCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsCreate has not yet been implemented")
		}),
		ThingsWeaviateThingsDeleteHandler: things.WeaviateThingsDeleteHandlerFunc(func(params things.WeaviateThingsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsDelete has not yet been implemented")
		}),
		ThingsWeaviateThingsGetHandler: things.WeaviateThingsGetHandlerFunc(func(params things.WeaviateThingsGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsGet has not yet been implemented")
		}),
		ThingsWeaviateThingsListHandler: things.WeaviateThingsListHandlerFunc(func(params things.WeaviateThingsListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsList has not yet been implemented")
		}),
		ThingsWeaviateThingsPatchHandler: things.WeaviateThingsPatchHandlerFunc(func(params things.WeaviateThingsPatchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsPatch has not yet been implemented")
		}),
		ThingsWeaviateThingsReferencesCreateHandler: things.WeaviateThingsReferencesCreateHandlerFunc(func(params things.WeaviateThingsReferencesCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsReferencesCreate has not yet been implemented")
		}),
		ThingsWeaviateThingsReferencesDeleteHandler: things.WeaviateThingsReferencesDeleteHandlerFunc(func(params things.WeaviateThingsReferencesDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsReferencesDelete has not yet been implemented")
		}),
		ThingsWeaviateThingsReferencesUpdateHandler: things.WeaviateThingsReferencesUpdateHandlerFunc(func(params things.WeaviateThingsReferencesUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsReferencesUpdate has not yet been implemented")
		}),
		ThingsWeaviateThingsUpdateHandler: things.WeaviateThingsUpdateHandlerFunc(func(params things.WeaviateThingsUpdateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsUpdate has not yet been implemented")
		}),
		ThingsWeaviateThingsValidateHandler: things.WeaviateThingsValidateHandlerFunc(func(params things.WeaviateThingsValidateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ThingsWeaviateThingsValidate has not yet been implemented")
		}),

		OidcAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (oidc) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*WeaviateAPI Decentralised Knowledge Graph */
type WeaviateAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// YamlConsumer registers a consumer for a "application/yaml" mime type
	YamlConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// OidcAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OidcAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ActionsWeaviateActionHistoryGetHandler sets the operation handler for the weaviate action history get operation
	ActionsWeaviateActionHistoryGetHandler actions.WeaviateActionHistoryGetHandler
	// ActionsWeaviateActionUpdateHandler sets the operation handler for the weaviate action update operation
	ActionsWeaviateActionUpdateHandler actions.WeaviateActionUpdateHandler
	// ActionsWeaviateActionsCreateHandler sets the operation handler for the weaviate actions create operation
	ActionsWeaviateActionsCreateHandler actions.WeaviateActionsCreateHandler
	// ActionsWeaviateActionsDeleteHandler sets the operation handler for the weaviate actions delete operation
	ActionsWeaviateActionsDeleteHandler actions.WeaviateActionsDeleteHandler
	// ActionsWeaviateActionsGetHandler sets the operation handler for the weaviate actions get operation
	ActionsWeaviateActionsGetHandler actions.WeaviateActionsGetHandler
	// ActionsWeaviateActionsListHandler sets the operation handler for the weaviate actions list operation
	ActionsWeaviateActionsListHandler actions.WeaviateActionsListHandler
	// ActionsWeaviateActionsPatchHandler sets the operation handler for the weaviate actions patch operation
	ActionsWeaviateActionsPatchHandler actions.WeaviateActionsPatchHandler
	// ActionsWeaviateActionsReferencesCreateHandler sets the operation handler for the weaviate actions references create operation
	ActionsWeaviateActionsReferencesCreateHandler actions.WeaviateActionsReferencesCreateHandler
	// ActionsWeaviateActionsReferencesDeleteHandler sets the operation handler for the weaviate actions references delete operation
	ActionsWeaviateActionsReferencesDeleteHandler actions.WeaviateActionsReferencesDeleteHandler
	// ActionsWeaviateActionsReferencesUpdateHandler sets the operation handler for the weaviate actions references update operation
	ActionsWeaviateActionsReferencesUpdateHandler actions.WeaviateActionsReferencesUpdateHandler
	// ActionsWeaviateActionsValidateHandler sets the operation handler for the weaviate actions validate operation
	ActionsWeaviateActionsValidateHandler actions.WeaviateActionsValidateHandler
	// WeaviateBatchingActionsCreateHandler sets the operation handler for the weaviate batching actions create operation
	WeaviateBatchingActionsCreateHandler WeaviateBatchingActionsCreateHandler
	// WeaviateBatchingReferencesCreateHandler sets the operation handler for the weaviate batching references create operation
	WeaviateBatchingReferencesCreateHandler WeaviateBatchingReferencesCreateHandler
	// WeaviateBatchingThingsCreateHandler sets the operation handler for the weaviate batching things create operation
	WeaviateBatchingThingsCreateHandler WeaviateBatchingThingsCreateHandler
	// ContextionaryAPIWeaviateC11yCorpusGetHandler sets the operation handler for the weaviate c11y corpus get operation
	ContextionaryAPIWeaviateC11yCorpusGetHandler contextionary_api.WeaviateC11yCorpusGetHandler
	// ContextionaryAPIWeaviateC11yWordsHandler sets the operation handler for the weaviate c11y words operation
	ContextionaryAPIWeaviateC11yWordsHandler contextionary_api.WeaviateC11yWordsHandler
	// GraphqlWeaviateGraphqlBatchHandler sets the operation handler for the weaviate graphql batch operation
	GraphqlWeaviateGraphqlBatchHandler graphql.WeaviateGraphqlBatchHandler
	// GraphqlWeaviateGraphqlPostHandler sets the operation handler for the weaviate graphql post operation
	GraphqlWeaviateGraphqlPostHandler graphql.WeaviateGraphqlPostHandler
	// MetaWeaviateMetaGetHandler sets the operation handler for the weaviate meta get operation
	MetaWeaviateMetaGetHandler meta.WeaviateMetaGetHandler
	// P2PWeaviateP2pGenesisUpdateHandler sets the operation handler for the weaviate p2p genesis update operation
	P2PWeaviateP2pGenesisUpdateHandler p2_p.WeaviateP2pGenesisUpdateHandler
	// P2PWeaviateP2pHealthHandler sets the operation handler for the weaviate p2p health operation
	P2PWeaviateP2pHealthHandler p2_p.WeaviateP2pHealthHandler
	// SchemaWeaviateSchemaActionsCreateHandler sets the operation handler for the weaviate schema actions create operation
	SchemaWeaviateSchemaActionsCreateHandler schema.WeaviateSchemaActionsCreateHandler
	// SchemaWeaviateSchemaActionsDeleteHandler sets the operation handler for the weaviate schema actions delete operation
	SchemaWeaviateSchemaActionsDeleteHandler schema.WeaviateSchemaActionsDeleteHandler
	// SchemaWeaviateSchemaActionsPropertiesAddHandler sets the operation handler for the weaviate schema actions properties add operation
	SchemaWeaviateSchemaActionsPropertiesAddHandler schema.WeaviateSchemaActionsPropertiesAddHandler
	// SchemaWeaviateSchemaActionsPropertiesDeleteHandler sets the operation handler for the weaviate schema actions properties delete operation
	SchemaWeaviateSchemaActionsPropertiesDeleteHandler schema.WeaviateSchemaActionsPropertiesDeleteHandler
	// SchemaWeaviateSchemaActionsPropertiesUpdateHandler sets the operation handler for the weaviate schema actions properties update operation
	SchemaWeaviateSchemaActionsPropertiesUpdateHandler schema.WeaviateSchemaActionsPropertiesUpdateHandler
	// SchemaWeaviateSchemaActionsUpdateHandler sets the operation handler for the weaviate schema actions update operation
	SchemaWeaviateSchemaActionsUpdateHandler schema.WeaviateSchemaActionsUpdateHandler
	// SchemaWeaviateSchemaDumpHandler sets the operation handler for the weaviate schema dump operation
	SchemaWeaviateSchemaDumpHandler schema.WeaviateSchemaDumpHandler
	// SchemaWeaviateSchemaThingsCreateHandler sets the operation handler for the weaviate schema things create operation
	SchemaWeaviateSchemaThingsCreateHandler schema.WeaviateSchemaThingsCreateHandler
	// SchemaWeaviateSchemaThingsDeleteHandler sets the operation handler for the weaviate schema things delete operation
	SchemaWeaviateSchemaThingsDeleteHandler schema.WeaviateSchemaThingsDeleteHandler
	// SchemaWeaviateSchemaThingsPropertiesAddHandler sets the operation handler for the weaviate schema things properties add operation
	SchemaWeaviateSchemaThingsPropertiesAddHandler schema.WeaviateSchemaThingsPropertiesAddHandler
	// SchemaWeaviateSchemaThingsPropertiesDeleteHandler sets the operation handler for the weaviate schema things properties delete operation
	SchemaWeaviateSchemaThingsPropertiesDeleteHandler schema.WeaviateSchemaThingsPropertiesDeleteHandler
	// SchemaWeaviateSchemaThingsPropertiesUpdateHandler sets the operation handler for the weaviate schema things properties update operation
	SchemaWeaviateSchemaThingsPropertiesUpdateHandler schema.WeaviateSchemaThingsPropertiesUpdateHandler
	// SchemaWeaviateSchemaThingsUpdateHandler sets the operation handler for the weaviate schema things update operation
	SchemaWeaviateSchemaThingsUpdateHandler schema.WeaviateSchemaThingsUpdateHandler
	// ThingsWeaviateThingHistoryGetHandler sets the operation handler for the weaviate thing history get operation
	ThingsWeaviateThingHistoryGetHandler things.WeaviateThingHistoryGetHandler
	// ThingsWeaviateThingsCreateHandler sets the operation handler for the weaviate things create operation
	ThingsWeaviateThingsCreateHandler things.WeaviateThingsCreateHandler
	// ThingsWeaviateThingsDeleteHandler sets the operation handler for the weaviate things delete operation
	ThingsWeaviateThingsDeleteHandler things.WeaviateThingsDeleteHandler
	// ThingsWeaviateThingsGetHandler sets the operation handler for the weaviate things get operation
	ThingsWeaviateThingsGetHandler things.WeaviateThingsGetHandler
	// ThingsWeaviateThingsListHandler sets the operation handler for the weaviate things list operation
	ThingsWeaviateThingsListHandler things.WeaviateThingsListHandler
	// ThingsWeaviateThingsPatchHandler sets the operation handler for the weaviate things patch operation
	ThingsWeaviateThingsPatchHandler things.WeaviateThingsPatchHandler
	// ThingsWeaviateThingsReferencesCreateHandler sets the operation handler for the weaviate things references create operation
	ThingsWeaviateThingsReferencesCreateHandler things.WeaviateThingsReferencesCreateHandler
	// ThingsWeaviateThingsReferencesDeleteHandler sets the operation handler for the weaviate things references delete operation
	ThingsWeaviateThingsReferencesDeleteHandler things.WeaviateThingsReferencesDeleteHandler
	// ThingsWeaviateThingsReferencesUpdateHandler sets the operation handler for the weaviate things references update operation
	ThingsWeaviateThingsReferencesUpdateHandler things.WeaviateThingsReferencesUpdateHandler
	// ThingsWeaviateThingsUpdateHandler sets the operation handler for the weaviate things update operation
	ThingsWeaviateThingsUpdateHandler things.WeaviateThingsUpdateHandler
	// ThingsWeaviateThingsValidateHandler sets the operation handler for the weaviate things validate operation
	ThingsWeaviateThingsValidateHandler things.WeaviateThingsValidateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *WeaviateAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *WeaviateAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *WeaviateAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *WeaviateAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *WeaviateAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *WeaviateAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *WeaviateAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the WeaviateAPI
func (o *WeaviateAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OidcAuth == nil {
		unregistered = append(unregistered, "OidcAuth")
	}

	if o.ActionsWeaviateActionHistoryGetHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionHistoryGetHandler")
	}

	if o.ActionsWeaviateActionUpdateHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionUpdateHandler")
	}

	if o.ActionsWeaviateActionsCreateHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsCreateHandler")
	}

	if o.ActionsWeaviateActionsDeleteHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsDeleteHandler")
	}

	if o.ActionsWeaviateActionsGetHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsGetHandler")
	}

	if o.ActionsWeaviateActionsListHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsListHandler")
	}

	if o.ActionsWeaviateActionsPatchHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsPatchHandler")
	}

	if o.ActionsWeaviateActionsReferencesCreateHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsReferencesCreateHandler")
	}

	if o.ActionsWeaviateActionsReferencesDeleteHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsReferencesDeleteHandler")
	}

	if o.ActionsWeaviateActionsReferencesUpdateHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsReferencesUpdateHandler")
	}

	if o.ActionsWeaviateActionsValidateHandler == nil {
		unregistered = append(unregistered, "actions.WeaviateActionsValidateHandler")
	}

	if o.WeaviateBatchingActionsCreateHandler == nil {
		unregistered = append(unregistered, "WeaviateBatchingActionsCreateHandler")
	}

	if o.WeaviateBatchingReferencesCreateHandler == nil {
		unregistered = append(unregistered, "WeaviateBatchingReferencesCreateHandler")
	}

	if o.WeaviateBatchingThingsCreateHandler == nil {
		unregistered = append(unregistered, "WeaviateBatchingThingsCreateHandler")
	}

	if o.ContextionaryAPIWeaviateC11yCorpusGetHandler == nil {
		unregistered = append(unregistered, "contextionary_api.WeaviateC11yCorpusGetHandler")
	}

	if o.ContextionaryAPIWeaviateC11yWordsHandler == nil {
		unregistered = append(unregistered, "contextionary_api.WeaviateC11yWordsHandler")
	}

	if o.GraphqlWeaviateGraphqlBatchHandler == nil {
		unregistered = append(unregistered, "graphql.WeaviateGraphqlBatchHandler")
	}

	if o.GraphqlWeaviateGraphqlPostHandler == nil {
		unregistered = append(unregistered, "graphql.WeaviateGraphqlPostHandler")
	}

	if o.MetaWeaviateMetaGetHandler == nil {
		unregistered = append(unregistered, "meta.WeaviateMetaGetHandler")
	}

	if o.P2PWeaviateP2pGenesisUpdateHandler == nil {
		unregistered = append(unregistered, "p2_p.WeaviateP2pGenesisUpdateHandler")
	}

	if o.P2PWeaviateP2pHealthHandler == nil {
		unregistered = append(unregistered, "p2_p.WeaviateP2pHealthHandler")
	}

	if o.SchemaWeaviateSchemaActionsCreateHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaActionsCreateHandler")
	}

	if o.SchemaWeaviateSchemaActionsDeleteHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaActionsDeleteHandler")
	}

	if o.SchemaWeaviateSchemaActionsPropertiesAddHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaActionsPropertiesAddHandler")
	}

	if o.SchemaWeaviateSchemaActionsPropertiesDeleteHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaActionsPropertiesDeleteHandler")
	}

	if o.SchemaWeaviateSchemaActionsPropertiesUpdateHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaActionsPropertiesUpdateHandler")
	}

	if o.SchemaWeaviateSchemaActionsUpdateHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaActionsUpdateHandler")
	}

	if o.SchemaWeaviateSchemaDumpHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaDumpHandler")
	}

	if o.SchemaWeaviateSchemaThingsCreateHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaThingsCreateHandler")
	}

	if o.SchemaWeaviateSchemaThingsDeleteHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaThingsDeleteHandler")
	}

	if o.SchemaWeaviateSchemaThingsPropertiesAddHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaThingsPropertiesAddHandler")
	}

	if o.SchemaWeaviateSchemaThingsPropertiesDeleteHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaThingsPropertiesDeleteHandler")
	}

	if o.SchemaWeaviateSchemaThingsPropertiesUpdateHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaThingsPropertiesUpdateHandler")
	}

	if o.SchemaWeaviateSchemaThingsUpdateHandler == nil {
		unregistered = append(unregistered, "schema.WeaviateSchemaThingsUpdateHandler")
	}

	if o.ThingsWeaviateThingHistoryGetHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingHistoryGetHandler")
	}

	if o.ThingsWeaviateThingsCreateHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsCreateHandler")
	}

	if o.ThingsWeaviateThingsDeleteHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsDeleteHandler")
	}

	if o.ThingsWeaviateThingsGetHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsGetHandler")
	}

	if o.ThingsWeaviateThingsListHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsListHandler")
	}

	if o.ThingsWeaviateThingsPatchHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsPatchHandler")
	}

	if o.ThingsWeaviateThingsReferencesCreateHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsReferencesCreateHandler")
	}

	if o.ThingsWeaviateThingsReferencesDeleteHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsReferencesDeleteHandler")
	}

	if o.ThingsWeaviateThingsReferencesUpdateHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsReferencesUpdateHandler")
	}

	if o.ThingsWeaviateThingsUpdateHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsUpdateHandler")
	}

	if o.ThingsWeaviateThingsValidateHandler == nil {
		unregistered = append(unregistered, "things.WeaviateThingsValidateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *WeaviateAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *WeaviateAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "oidc":

			result[name] = o.BearerAuthenticator(scheme.Name, func(token string, scopes []string) (interface{}, error) {
				return o.OidcAuth(token, scopes)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *WeaviateAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *WeaviateAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *WeaviateAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *WeaviateAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the weaviate API
func (o *WeaviateAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *WeaviateAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions/{actionId}/history"] = actions.NewWeaviateActionHistoryGet(o.context, o.ActionsWeaviateActionHistoryGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/actions/{actionId}"] = actions.NewWeaviateActionUpdate(o.context, o.ActionsWeaviateActionUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actions"] = actions.NewWeaviateActionsCreate(o.context, o.ActionsWeaviateActionsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/actions/{actionId}"] = actions.NewWeaviateActionsDelete(o.context, o.ActionsWeaviateActionsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions/{actionId}"] = actions.NewWeaviateActionsGet(o.context, o.ActionsWeaviateActionsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions"] = actions.NewWeaviateActionsList(o.context, o.ActionsWeaviateActionsListHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/actions/{actionId}"] = actions.NewWeaviateActionsPatch(o.context, o.ActionsWeaviateActionsPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actions/{actionId}/references/{propertyName}"] = actions.NewWeaviateActionsReferencesCreate(o.context, o.ActionsWeaviateActionsReferencesCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/actions/{actionId}/references/{propertyName}"] = actions.NewWeaviateActionsReferencesDelete(o.context, o.ActionsWeaviateActionsReferencesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/actions/{actionId}/references/{propertyName}"] = actions.NewWeaviateActionsReferencesUpdate(o.context, o.ActionsWeaviateActionsReferencesUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actions/validate"] = actions.NewWeaviateActionsValidate(o.context, o.ActionsWeaviateActionsValidateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/batching/actions"] = NewWeaviateBatchingActionsCreate(o.context, o.WeaviateBatchingActionsCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/batching/references"] = NewWeaviateBatchingReferencesCreate(o.context, o.WeaviateBatchingReferencesCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/batching/things"] = NewWeaviateBatchingThingsCreate(o.context, o.WeaviateBatchingThingsCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/c11y/corpus"] = contextionary_api.NewWeaviateC11yCorpusGet(o.context, o.ContextionaryAPIWeaviateC11yCorpusGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/c11y/words/{words}"] = contextionary_api.NewWeaviateC11yWords(o.context, o.ContextionaryAPIWeaviateC11yWordsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/graphql/batch"] = graphql.NewWeaviateGraphqlBatch(o.context, o.GraphqlWeaviateGraphqlBatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/graphql"] = graphql.NewWeaviateGraphqlPost(o.context, o.GraphqlWeaviateGraphqlPostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/meta"] = meta.NewWeaviateMetaGet(o.context, o.MetaWeaviateMetaGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/p2p/genesis"] = p2_p.NewWeaviateP2pGenesisUpdate(o.context, o.P2PWeaviateP2pGenesisUpdateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/health"] = p2_p.NewWeaviateP2pHealth(o.context, o.P2PWeaviateP2pHealthHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/actions"] = schema.NewWeaviateSchemaActionsCreate(o.context, o.SchemaWeaviateSchemaActionsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/actions/{className}"] = schema.NewWeaviateSchemaActionsDelete(o.context, o.SchemaWeaviateSchemaActionsDeleteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/actions/{className}/properties"] = schema.NewWeaviateSchemaActionsPropertiesAdd(o.context, o.SchemaWeaviateSchemaActionsPropertiesAddHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/actions/{className}/properties/{propertyName}"] = schema.NewWeaviateSchemaActionsPropertiesDelete(o.context, o.SchemaWeaviateSchemaActionsPropertiesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/actions/{className}/properties/{propertyName}"] = schema.NewWeaviateSchemaActionsPropertiesUpdate(o.context, o.SchemaWeaviateSchemaActionsPropertiesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/actions/{className}"] = schema.NewWeaviateSchemaActionsUpdate(o.context, o.SchemaWeaviateSchemaActionsUpdateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schema"] = schema.NewWeaviateSchemaDump(o.context, o.SchemaWeaviateSchemaDumpHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/things"] = schema.NewWeaviateSchemaThingsCreate(o.context, o.SchemaWeaviateSchemaThingsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/things/{className}"] = schema.NewWeaviateSchemaThingsDelete(o.context, o.SchemaWeaviateSchemaThingsDeleteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schema/things/{className}/properties"] = schema.NewWeaviateSchemaThingsPropertiesAdd(o.context, o.SchemaWeaviateSchemaThingsPropertiesAddHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/schema/things/{className}/properties/{propertyName}"] = schema.NewWeaviateSchemaThingsPropertiesDelete(o.context, o.SchemaWeaviateSchemaThingsPropertiesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/things/{className}/properties/{propertyName}"] = schema.NewWeaviateSchemaThingsPropertiesUpdate(o.context, o.SchemaWeaviateSchemaThingsPropertiesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schema/things/{className}"] = schema.NewWeaviateSchemaThingsUpdate(o.context, o.SchemaWeaviateSchemaThingsUpdateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/things/{thingId}/history"] = things.NewWeaviateThingHistoryGet(o.context, o.ThingsWeaviateThingHistoryGetHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/things"] = things.NewWeaviateThingsCreate(o.context, o.ThingsWeaviateThingsCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/things/{thingId}"] = things.NewWeaviateThingsDelete(o.context, o.ThingsWeaviateThingsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/things/{thingId}"] = things.NewWeaviateThingsGet(o.context, o.ThingsWeaviateThingsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/things"] = things.NewWeaviateThingsList(o.context, o.ThingsWeaviateThingsListHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/things/{thingId}"] = things.NewWeaviateThingsPatch(o.context, o.ThingsWeaviateThingsPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/things/{thingId}/references/{propertyName}"] = things.NewWeaviateThingsReferencesCreate(o.context, o.ThingsWeaviateThingsReferencesCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/things/{thingId}/references/{propertyName}"] = things.NewWeaviateThingsReferencesDelete(o.context, o.ThingsWeaviateThingsReferencesDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/things/{thingId}/references/{propertyName}"] = things.NewWeaviateThingsReferencesUpdate(o.context, o.ThingsWeaviateThingsReferencesUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/things/{thingId}"] = things.NewWeaviateThingsUpdate(o.context, o.ThingsWeaviateThingsUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/things/validate"] = things.NewWeaviateThingsValidate(o.context, o.ThingsWeaviateThingsValidateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *WeaviateAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *WeaviateAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *WeaviateAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *WeaviateAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
