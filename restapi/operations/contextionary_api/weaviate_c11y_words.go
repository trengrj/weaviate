/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package contextionary_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaviateC11yWordsHandlerFunc turns a function with the right signature into a weaviate c11y words handler
type WeaviateC11yWordsHandlerFunc func(WeaviateC11yWordsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaviateC11yWordsHandlerFunc) Handle(params WeaviateC11yWordsParams) middleware.Responder {
	return fn(params)
}

// WeaviateC11yWordsHandler interface for that can handle valid weaviate c11y words params
type WeaviateC11yWordsHandler interface {
	Handle(WeaviateC11yWordsParams) middleware.Responder
}

// NewWeaviateC11yWords creates a new http.Handler for the weaviate c11y words operation
func NewWeaviateC11yWords(ctx *middleware.Context, handler WeaviateC11yWordsHandler) *WeaviateC11yWords {
	return &WeaviateC11yWords{Context: ctx, Handler: handler}
}

/*WeaviateC11yWords swagger:route GET /c11y/words/{words} contextionary-API weaviateC11yWords

Checks if a word or wordString is part of the contextionary.

Checks if a word or wordString is part of the contextionary. Words should be concatenated as described here: https://github.com/creativesoftwarefdn/weaviate/blob/master/docs/en/use/ontology-schema.md#camelcase

*/
type WeaviateC11yWords struct {
	Context *middleware.Context
	Handler WeaviateC11yWordsHandler
}

func (o *WeaviateC11yWords) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWeaviateC11yWordsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
