/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaviateThingsPropertiesCreateHandlerFunc turns a function with the right signature into a weaviate things properties create handler
type WeaviateThingsPropertiesCreateHandlerFunc func(WeaviateThingsPropertiesCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaviateThingsPropertiesCreateHandlerFunc) Handle(params WeaviateThingsPropertiesCreateParams) middleware.Responder {
	return fn(params)
}

// WeaviateThingsPropertiesCreateHandler interface for that can handle valid weaviate things properties create params
type WeaviateThingsPropertiesCreateHandler interface {
	Handle(WeaviateThingsPropertiesCreateParams) middleware.Responder
}

// NewWeaviateThingsPropertiesCreate creates a new http.Handler for the weaviate things properties create operation
func NewWeaviateThingsPropertiesCreate(ctx *middleware.Context, handler WeaviateThingsPropertiesCreateHandler) *WeaviateThingsPropertiesCreate {
	return &WeaviateThingsPropertiesCreate{Context: ctx, Handler: handler}
}

/*WeaviateThingsPropertiesCreate swagger:route POST /things/{thingId}/references/{propertyName} things weaviateThingsPropertiesCreate

Add a single reference to a class-property when cardinality is set to 'hasMany'.

Add a single reference to a class-property when cardinality is set to 'hasMany'.

*/
type WeaviateThingsPropertiesCreate struct {
	Context *middleware.Context
	Handler WeaviateThingsPropertiesCreateHandler
}

func (o *WeaviateThingsPropertiesCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWeaviateThingsPropertiesCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
