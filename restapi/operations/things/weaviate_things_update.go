/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaviateThingsUpdateHandlerFunc turns a function with the right signature into a weaviate things update handler
type WeaviateThingsUpdateHandlerFunc func(WeaviateThingsUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaviateThingsUpdateHandlerFunc) Handle(params WeaviateThingsUpdateParams) middleware.Responder {
	return fn(params)
}

// WeaviateThingsUpdateHandler interface for that can handle valid weaviate things update params
type WeaviateThingsUpdateHandler interface {
	Handle(WeaviateThingsUpdateParams) middleware.Responder
}

// NewWeaviateThingsUpdate creates a new http.Handler for the weaviate things update operation
func NewWeaviateThingsUpdate(ctx *middleware.Context, handler WeaviateThingsUpdateHandler) *WeaviateThingsUpdate {
	return &WeaviateThingsUpdate{Context: ctx, Handler: handler}
}

/*WeaviateThingsUpdate swagger:route PUT /things/{thingId} things weaviateThingsUpdate

Update a Thing based on its UUID.

Updates a Thing's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.

*/
type WeaviateThingsUpdate struct {
	Context *middleware.Context
	Handler WeaviateThingsUpdateHandler
}

func (o *WeaviateThingsUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWeaviateThingsUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
