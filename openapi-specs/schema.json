{
  "basePath": "/v1",
  "consumes": ["application/yaml", "application/json"],
  "definitions": {
    "Principal": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username that was extracted either from the authentication information"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Action": {
      "properties": {
        "class": {
          "description": "Type of the Action, defined in the schema.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/PropertySchema"
        },
        "id": {
          "description": "ID of the Action.",
          "format": "uuid",
          "type": "string"
        },
        "creationTimeUnix": {
          "description": "Timestamp of creation of this Action in milliseconds since epoch UTC.",
          "format": "int64",
          "type": "integer"
        },
        "lastUpdateTimeUnix": {
          "description": "Timestamp of the last update made to the Action since epoch UTC.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ActionsGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        },
        {
          "properties": {
            "result": {
              "description": "Results for this specific Action.",
              "format": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": ["SUCCESS", "PENDING", "FAILED"]
                },
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          }
        }
      ],
      "type": "object"
    },
    "ActionsListResponse": {
      "description": "List of Actions.",
      "properties": {
        "actions": {
          "description": "The actual list of Actions.",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "type": "array"
        },
        "totalResults": {
          "description": "The total number of Actions for the query. The number of items in a response may be smaller due to paging.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "C11yWordsResponse": {
      "description": "An array of available words and contexts.",
      "properties": {
        "concatenatedWord": {
          "description": "Weighted results for all words",
          "type": "object",
          "properties": {
            "concatenatedWord": {
              "type": "string"
            },
            "singleWords": {
              "type": "array",
              "items": {
                "format": "string"
              }
            },
            "concatenatedVector": {
              "$ref": "#/definitions/C11yVector"
            },
            "concatenatedNearestNeighbors": {
              "$ref": "#/definitions/C11yNearestNeighbors"
            }
          }
        },
        "individualWords": {
          "description": "Weighted results for per individual word",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "word": {
                "type": "string"
              },
              "inC11y": {
                "type": "boolean"
              },
              "info": {
                "type": "object",
                "properties": {
                  "vector": {
                    "$ref": "#/definitions/C11yVector"
                  },
                  "nearestNeighbors": {
                    "$ref": "#/definitions/C11yNearestNeighbors"
                  }
                }
              }
            }
          }
        }
      }
    },
    "C11yNearestNeighbors": {
      "description": "C11y function to show the nearest neighbors to a word.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "word": {
            "type": "string"
          },
          "distance": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "C11yVector": {
      "description": "A Vector in the Contextionary",
      "type": "array",
      "items": {
        "type": "number",
        "format": "float",
        "minimum": 300,
        "maximum": 300
      }
    },
    "C11yVectorBasedQuestion": {
      "description": "Receive question based on array of classes, properties and values.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "classVectors": {
            "description": "Vectorized classname.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "minItems": 300,
            "maxItems": 300
          },
          "classProps": {
            "description": "Vectorized properties.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "propsVectors": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "value": {
                  "description": "String with valuename.",
                  "type": "string"
                }
              }
            },
            "minItems": 300,
            "maxItems": 300
          }
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response given by Weaviate end-points.",
      "properties": {
        "error": {
          "items": {
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GraphQLError": {
      "description": "An error response caused by a GraphQL query.",
      "properties": {
        "locations": {
          "items": {
            "properties": {
              "column": {
                "format": "int64",
                "type": "integer"
              },
              "line": {
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "GraphQLQuery": {
      "description": "GraphQL query based on: http://facebook.github.io/graphql/.",
      "properties": {
        "operationName": {
          "description": "The name of the operation if multiple exist in the query.",
          "type": "string"
        },
        "query": {
          "description": "Query based on GraphQL syntax.",
          "type": "string"
        },
        "variables": {
          "description": "Additional variables for the query.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "GraphQLQueries": {
      "description": "A list of GraphQL queries.",
      "items": {
        "$ref": "#/definitions/GraphQLQuery"
      },
      "type": "array"
    },
    "GraphQLResponse": {
      "description": "GraphQL based response: http://facebook.github.io/graphql/.",
      "properties": {
        "data": {
          "additionalProperties": {
            "$ref": "#/definitions/JsonObject"
          },
          "description": "GraphQL data object.",
          "type": "object"
        },
        "errors": {
          "description": "Array with errors.",
          "items": {
            "$ref": "#/definitions/GraphQLError"
          },
          "type": "array"
        }
      }
    },
    "GraphQLResponses": {
      "description": "A list of GraphQL responses.",
      "items": {
        "$ref": "#/definitions/GraphQLResponse"
      },
      "type": "array"
    },
    "JsonObject": {
      "description": "JSON object value.",
      "type": "object"
    },
    "Meta": {
      "description": "Contains meta information of the current Weaviate instance.",
      "properties": {
        "hostname": {
          "description": "The url of the host.",
          "format": "url",
          "type": "string"
        },
        "version": {
          "description": "Version of weaviate you are currently running",
          "type": "string"
        },
        "contextionaryWordCount": {
          "description": "Number of total words in the contextionary",
          "type": "number",
          "format": "int"
        },
        "contextionaryVersion": {
          "description": "Version of the contextionary service connected to weaviate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultipleRef": {
      "description": "Multiple instances of references to other objects.",
      "items": {
        "$ref": "#/definitions/SingleRef"
      },
      "type": "array"
    },
    "PatchDocument": {
      "description": "A JSONPatch document as defined by RFC 6902.",
      "properties": {
        "from": {
          "description": "A string containing a JSON Pointer value.",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed.",
          "enum": ["add", "remove", "replace", "move", "copy", "test"],
          "type": "string"
        },
        "path": {
          "description": "A JSON-Pointer.",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      },
      "required": ["op", "path"]
    },
    "PeerUpdate": {
      "description": "A single peer in the network.",
      "properties": {
        "id": {
          "description": "The session ID of the peer.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Human readable name.",
          "type": "string"
        },
        "uri": {
          "description": "The location where the peer is exposed to the internet.",
          "type": "string",
          "format": "uri"
        },
        "schemaHash": {
          "description": "The latest known hash of the peer's schema.",
          "type": "string"
        }
      }
    },
    "PeerUpdateList": {
      "description": "List of known peers.",
      "items": {
        "$ref": "#/definitions/PeerUpdate"
      },
      "type": "array"
    },
    "PropertySchema": {
      "description": "This is an open object, with OpenAPI Specification 3.0 this will be more detailed. See Weaviate docs for more info. In the future this will become a key/value OR a SingleRef definition.",
      "type": "object"
    },
    "SchemaHistory": {
      "description": "This is an open object, with OpenAPI Specification 3.0 this will be more detailed. See Weaviate docs for more info. In the future this will become a key/value OR a SingleRef definition.",
      "type": "object"
    },
    "Schema": {
      "description": "Definitions of semantic schemas (also see: https://github.com/semi-technologies/weaviate-semantic-schemas).",
      "properties": {
        "classes": {
          "description": "Semantic classes that are available.",
          "items": {
            "$ref": "#/definitions/Class"
          },
          "type": "array"
        },
        "maintainer": {
          "description": "Email of the maintainer.",
          "format": "email",
          "type": "string"
        },
        "name": {
          "description": "Name of the schema.",
          "type": "string"
        },
        "type": {
          "description": "Type of schema, should be \"thing\" or \"action\".",
          "enum": ["thing", "action"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Class": {
      "properties": {
        "class": {
          "description": "Name of the class as URI relative to the schema URL.",
          "type": "string"
        },
        "keywords": {
          "$ref": "#/definitions/Keywords"
        },
        "description": {
          "description": "Description of the class.",
          "type": "string"
        },
        "properties": {
          "description": "The properties of the class.",
          "items": {
            "$ref": "#/definitions/Property"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Keywords": {
      "description": "Describes a class or property using multiple weighted words.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "Property": {
      "properties": {
        "dataType": {
          "description": "Can be a reference to another type when it starts with a capital (for example Person), otherwise \"string\" or \"int\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cardinality": {
          "description": "The cardinality of this property. If you want to store more than one value in a property, set this to 'many'. Defaults to 'atMostOne'. Note that by default properties can be empty in Weaviate.",
          "type": "string",
          "enum": ["atMostOne", "many"],
          "default": "atMostOne"
        },
        "description": {
          "description": "Description of the property.",
          "type": "string"
        },
        "name": {
          "description": "Name of the property as URI relative to the schema URL.",
          "type": "string"
        },
        "keywords": {
          "$ref": "#/definitions/Keywords"
        }
      },
      "type": "object"
    },
    "SingleRef": {
      "description": "Either set beacon (direct reference) or set class and schema (concept reference)",
      "properties": {
        "class": {
          "description": "If using a concept reference (rather than a direct reference), specify the desired class name here",
          "format": "uri",
          "type": "string"
        },
        "schema": {
          "description": "If using a concept reference (rather than a direct reference), specify the desired properties here",
          "$ref": "#/definitions/PropertySchema"
        },
        "beacon": {
          "description": "If using a direct reference, specify the URI to point to the cross-ref here. Should be in the form of weaviate://localhost/things/<uuid> for the example of a local cross-ref to a thing",
          "format": "uri",
          "type": "string"
        }
      }
    },
    "BatchReference": {
      "properties": {
        "from": {
          "description": "Long-form beacon-style URI to identify the source of the cross-ref including the property name. Should be in the form of weaviate://localhost/<kinds>/<uuid>/<className>/<propertyName>, where <kinds> must be one of 'actions', 'things' and <className> and <propertyName> must represent the cross-ref property of source class to be used.",
          "format": "uri",
          "type": "string",
          "example": "weaviate://localhost/things/Zoo/a5d09582-4239-4702-81c9-92a6e0122bb4/hasAnimals"
        },
        "to": {
          "description": "Short-form URI to point to the cross-ref. Should be in the form of weaviate://localhost/things/<uuid> for the example of a local cross-ref to a thing",
          "example": "weaviate://localhost/things/97525810-a9a5-4eb0-858a-71449aeb007f",

          "format": "uri",
          "type": "string"
        }
      }
    },
    "BatchReferenceResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/BatchReference"
        },
        {
          "properties": {
            "result": {
              "description": "Results for this specific reference.",
              "format": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": ["SUCCESS", "PENDING", "FAILED"]
                },
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          }
        }
      ],
      "type": "object"
    },
    "GeoCoordinates": {
      "properties": {
        "latitude": {
          "description": "The latitude of the point on earth in decimal form",
          "format": "float",
          "type": "number"
        },
        "longitude": {
          "description": "The longitude of the point on earth in decimal form",
          "format": "float",
          "type": "number"
        }
      }
    },
    "Thing": {
      "properties": {
        "class": {
          "description": "Class of the Thing, defined in the schema.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/PropertySchema"
        },
        "id": {
          "description": "ID of the Thing.",
          "format": "uuid",
          "type": "string"
        },
        "creationTimeUnix": {
          "description": "Timestamp of creation of this Thing in milliseconds since epoch UTC.",
          "format": "int64",
          "type": "integer"
        },
        "lastUpdateTimeUnix": {
          "description": "Timestamp of the last Thing update in milliseconds since epoch UTC.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ThingsGetResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Thing"
        },
        {
          "properties": {
            "result": {
              "description": "Results for this specific Thing.",
              "format": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "SUCCESS",
                  "enum": ["SUCCESS", "PENDING", "FAILED"]
                },
                "errors": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          }
        }
      ],
      "type": "object"
    },
    "ThingsListResponse": {
      "description": "List of Things.",
      "properties": {
        "things": {
          "description": "The actual list of Things.",
          "items": {
            "$ref": "#/definitions/Thing"
          },
          "type": "array"
        },
        "totalResults": {
          "description": "The total number of Things for the query. The number of items in a response may be smaller due to paging.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Classification": {
      "description": "Manage classifications, trigger them and view status of past classifications.",
      "properties": {
        "id": {
          "description": "ID to uniquely identify this classification run",
          "format": "uuid",
          "type": "string",
          "example": "ee722219-b8ec-4db1-8f8d-5150bb1a9e0c"
        },
        "class": {
          "description": "class (name) which is used in this classification",
          "type": "string",
          "example": "City"
        },
        "classifyProperties": {
          "description": "which ref-property to set as part of the classification",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": ["inCountry"]
        },
        "basedOnProperties": {
          "description": "base the text-based classification on these fields (of type text)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": ["description"]
        },
        "status": {
          "description": "status of this classification",
          "type": "string",
          "enum": ["running", "completed", "failed"],
          "example": "running"
        },
        "started": {
          "description": "time when this classification was started",
          "type": "string",
          "format": "date-time",
          "example": "2017-07-21T17:32:28Z"
        },
        "completed": {
          "description": "time when this classification finished",
          "type": "string",
          "format": "date-time",
          "example": "2017-07-21T17:32:28Z"
        },
        "type": {
          "description": "which algorythim to use for classifications",
          "type": "string",
          "enum": ["knn"],
          "default": "knn",
          "example": "knn"
        },
        "k": {
          "description": "k-value when using k-Neareast-Neighbor",
          "format": "int32",
          "type": "integer",
          "default": 3,
          "example": 3
        },
        "error": {
          "description": "error message if status == failed",
          "type": "string",
          "default": "",
          "example": "classify xzy: something went wrong"
        }
      },
      "type": "object"

    }
  },
  "externalDocs": {
    "url": "https://github.com/semi-technologies/weaviate"
  },
  "info": {
    "contact": {
      "email": "hello@semi.technology",
      "name": "Weaviate",
      "url": "https://github.com/semi-technologies"
    },
    "description": "Decentralised Knowledge Graph",
    "title": "Weaviate - Decentralised Knowledge Graph",
    "version": "0.20.0-rc0"
  },
  "parameters": {
    "CommonLimitParameterQuery": {
      "description": "The maximum number of items to be returned per page. Default value is set in Weaviate config.",
      "format": "int64",
      "in": "query",
      "name": "limit",
      "required": false,
      "type": "integer"
    }
  },
  "paths": {
    "/actions": {
      "get": {
        "description": "Lists all Actions in reverse order of creation, owned by the user that belongs to the used token.",
        "operationId": "actions.list",
        "x-serviceIds": ["weaviate.local.query"],
        "parameters": [
          {
            "$ref": "#/parameters/CommonLimitParameterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ActionsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a list of Actions.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Registers a new Action. Provided meta-data and schema values are validated.",
        "operationId": "actions.create",
        "x-serviceIds": ["weaviate.local.add"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action created.",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Create Actions between two Things (object and subject).",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/validate": {
      "post": {
        "description": "Validate an Action's schema and meta-data. It has to be based on a schema, which is related to the given Action to be accepted by this validation.",
        "operationId": "actions.validate",
        "x-serviceIds": ["weaviate.local.query.meta"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Validate an Action based on a schema.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{id}": {
      "delete": {
        "description": "Deletes an Action from the system.",
        "operationId": "actions.delete",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Delete an Action based on its UUID.",
        "tags": ["actions"],
        "x-available-in-mqtt": true,
        "x-available-in-websocket": true
      },
      "get": {
        "description": "Lists Actions.",
        "operationId": "actions.get",
        "x-serviceIds": ["weaviate.local.query"],
        "parameters": [
          {
            "description": "Unique ID of the Action.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a specific Action based on its UUID and a Thing UUID. Also available as Websocket bus.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "patch": {
        "description": "Updates an Action. This method supports patch semantics. Provided meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "operationId": "actions.patch",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Action.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/PatchDocument"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied.",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Update an Action based on its UUID (using patch semantics).",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Updates an Action's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "operationId": "actions.update",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Action.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Update an Action based on its UUID.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/actions/{id}/references/{propertyName}": {
      "post": {
        "description": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "operationId": "actions.references.create",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Action.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique name of the property related to the Action.",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the reference."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Replace all references to a class-property.",
        "operationId": "actions.references.update",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Action.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique name of the property related to the Action.",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced all the references."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Replace all references to a class-property.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Delete the single reference that is given in the body from the list of references that this property has.",
        "operationId": "actions.references.delete",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Action.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique name of the property related to the Action.",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Delete the single reference that is given in the body from the list of references that this property has.",
        "tags": ["actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/things": {
      "post": {
        "description": "Register new Things in bulk. Provided meta-data and schema values are validated.",
        "operationId": "batching.things.create",
        "x-serviceIds": ["weaviate.local.add"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "description": "Define which fields need to be returned. Default value is ALL",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "ALL",
                    "enum": ["ALL", "class", "schema", "id", "creationTimeUnix"]
                  }
                },
                "things": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Thing"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded, see response body to get detailed information about each batched item.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThingsGetResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Creates new Things based on a Thing template as a batch.",
        "tags": ["batching", "things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/actions": {
      "post": {
        "description": "Register new Actions in bulk. Given meta-data and schema values are validated.",
        "operationId": "batching.actions.create",
        "x-serviceIds": ["weaviate.local.add"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "description": "Define which fields need to be returned. Default value is ALL",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "ALL",
                    "enum": ["ALL", "class", "schema", "id", "creationTimeUnix"]
                  }
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Action"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded, see response body to get detailed information about each batched item.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionsGetResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Creates new Actions based on an Action template as a batch.",
        "tags": ["batching", "actions"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/batching/references": {
      "post": {
        "description": "Register cross-references between any class items (things or actions) in bulk.",
        "operationId": "batching.references.create",
        "x-serviceIds": ["weaviate.local.add"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A list of references to be batched. The ideal size depends on the used database connector. Please see the documentation of the used connector for help",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BatchReference"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request Successful. Warning: A successful request does not guarantuee that every batched reference was successfully created. Inspect the response body to see which references succeeded and which failed.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BatchReferenceResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Creates new Cross-References between arbitrary classes in bulk.",
        "tags": ["batching", "references"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/graphql": {
      "post": {
        "description": "Get an object based on GraphQL",
        "operationId": "graphql.post",
        "x-serviceIds": [
          "weaviate.local.query",
          "weaviate.local.query.meta",
          "weaviate.network.query",
          "weaviate.network.query.meta"
        ],
        "parameters": [
          {
            "description": "The GraphQL query request parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphQLQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a response based on GraphQL",
        "tags": ["graphql"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/graphql/batch": {
      "post": {
        "description": "Perform a batched GraphQL query",
        "operationId": "graphql.batch",
        "x-serviceIds": [
          "weaviate.local.query",
          "weaviate.local.query.meta",
          "weaviate.network.query",
          "weaviate.network.query.meta"
        ],
        "parameters": [
          {
            "description": "The GraphQL queries.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphQLQueries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query (with select).",
            "schema": {
              "$ref": "#/definitions/GraphQLResponses"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a response based on GraphQL.",
        "tags": ["graphql"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/meta": {
      "get": {
        "description": "Gives meta information about the server and can be used to provide information to another Weaviate instance that wants to interact with the current instance.",
        "operationId": "meta.get",
        "x-serviceIds": ["weaviate.local.query.meta"],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/Meta"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Returns meta information of the current Weaviate instance.",
        "tags": ["meta"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/p2p/health": {
      "get": {
        "description": "Check if a peer is alive and healthy.",
        "operationId": "p2p.health",
        "x-serviceIds": ["weaviate.network.query.meta"],
        "responses": {
          "200": {
            "description": "Alive and kicking!"
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "summary": "Check if a peer is alive.",
        "tags": ["P2P"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/p2p/genesis": {
      "put": {
        "description": "Receive an update from the Genesis server.",
        "operationId": "p2p.genesis_update",
        "x-serviceIds": ["weaviate.network.query.meta"],
        "parameters": [
          {
            "in": "body",
            "name": "peers",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PeerUpdateList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alive and kicking!"
          },
          "401": {
            "description": "Unauthorized update."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": ["P2P"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/schema": {
      "get": {
        "summary": "Dump the current the database schema.",
        "operationId": "schema.dump",
        "x-serviceIds": ["weaviate.local.query.meta"],
        "tags": ["schema"],
        "responses": {
          "200": {
            "description": "Successfully dumped the database schema.",
            "schema": {
              "type": "object",
              "properties": {
                "things": {
                  "$ref": "#/definitions/Schema"
                },
                "actions": {
                  "$ref": "#/definitions/Schema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions": {
      "post": {
        "summary": "Create a new Action class in the ontology.",
        "operationId": "schema.actions.create",
        "x-serviceIds": ["weaviate.local.add.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "actionClass",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the new Action class to the ontology.",
            "schema": {
              "$ref": "#/definitions/Class"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid Action class",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}": {
      "delete": {
        "summary": "Remove an Action class (and all data in the instances) from the ontology.",
        "operationId": "schema.actions.delete",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the Action class from the ontology."
          },
          "400": {
            "description": "Could not delete the Action class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Rename, or replace the keywords of the Action.",
        "operationId": "schema.actions.update",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}/properties": {
      "post": {
        "summary": "Add a property to an Action class.",
        "operationId": "schema.actions.properties.add",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the property.",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid property.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/actions/{className}/properties/{propertyName}": {
      "delete": {
        "summary": "Remove a property from an Action class.",
        "operationId": "schema.actions.properties.delete",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the property from the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Rename, or replace the keywords of the property.",
        "operationId": "schema.actions.properties.update",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things": {
      "post": {
        "summary": "Create a new Thing class in the ontology.",
        "operationId": "schema.things.create",
        "x-serviceIds": ["weaviate.local.add.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "thingClass",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the new Thing class to the ontology.",
            "schema": {
              "$ref": "#/definitions/Class"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid Thing class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}": {
      "delete": {
        "summary": "Remove a Thing class (and all data in the instances) from the ontology.",
        "operationId": "schema.things.delete",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the Thing class from the ontology."
          },
          "400": {
            "description": "Could not delete the Thing class.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Rename, or replace the keywords of the Thing.",
        "operationId": "schema.things.update",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}/properties": {
      "post": {
        "summary": "Add a property to a Thing class.",
        "operationId": "schema.things.properties.add",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added the property.",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid property.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schema/things/{className}/properties/{propertyName}": {
      "delete": {
        "summary": "Remove a property from a Thing class.",
        "operationId": "schema.things.properties.delete",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed the property from the ontology."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Rename, or replace the keywords of the property.",
        "operationId": "schema.things.properties.update",
        "x-serviceIds": ["weaviate.local.manipulate.meta"],
        "tags": ["schema"],
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes applied."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid update.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/things": {
      "get": {
        "description": "Lists all Things in reverse order of creation, owned by the user that belongs to the used token.",
        "operationId": "things.list",
        "x-serviceIds": ["weaviate.local.query"],
        "parameters": [
          {
            "$ref": "#/parameters/CommonLimitParameterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/ThingsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a list of Things.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "post": {
        "description": "Registers a new Thing. Given meta-data and schema values are validated.",
        "operationId": "things.create",
        "x-serviceIds": ["weaviate.local.add"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thing created.",
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Create a new Thing based on a Thing template.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/validate": {
      "post": {
        "description": "Validate a Thing's schema and meta-data. It has to be based on a schema, which is related to the given Thing to be accepted by this validation.",
        "operationId": "things.validate",
        "x-serviceIds": ["weaviate.local.query.meta"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Validate Things schema.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{id}": {
      "delete": {
        "description": "Deletes a Thing from the system. All Actions pointing to this Thing, where the Thing is the object of the Action, are also being deleted.",
        "operationId": "things.delete",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Delete a Thing based on its UUID.",
        "tags": ["things"],
        "x-available-in-mqtt": true,
        "x-available-in-websocket": true
      },
      "get": {
        "description": "Returns a particular Thing data.",
        "operationId": "things.get",
        "x-serviceIds": ["weaviate.local.query"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a Thing based on its UUID.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "patch": {
        "description": "Updates a Thing's data. This method supports patch semantics. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "operationId": "things.patch",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSONPatch document as defined by RFC 6902.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/PatchDocument"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied.",
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          },
          "400": {
            "description": "The patch-JSON is malformed."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "The patch-JSON is valid but unprocessable.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Update a Thing based on its UUID (using patch semantics).",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Updates a Thing's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.",
        "operationId": "things.update",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully received.",
            "schema": {
              "$ref": "#/definitions/Thing"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found."
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Update a Thing based on its UUID.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/things/{id}/references/{propertyName}": {
      "post": {
        "description": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "operationId": "things.references.create",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique name of the property related to the Thing.",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the reference."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Add a single reference to a class-property when cardinality is set to 'hasMany'.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "put": {
        "description": "Replace all references to a class-property.",
        "operationId": "things.references.update",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique name of the property related to the Thing.",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipleRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced all the references (success is based on the behavior of the datastore)."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Replace all references to a class-property.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      },
      "delete": {
        "description": "Delete the single reference that is given in the body from the list of references that this property has.",
        "operationId": "things.references.delete",
        "x-serviceIds": ["weaviate.local.manipulate"],
        "parameters": [
          {
            "description": "Unique ID of the Thing.",
            "format": "uuid",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique name of the property related to the Thing.",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleRef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Successful query result but no resource was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Delete the single reference that is given in the body from the list of references that this property has.",
        "tags": ["things"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/c11y/words/{words}": {
      "get": {
        "description": "Checks if a word or wordString is part of the contextionary. Words should be concatenated as described here: https://github.com/semi-technologies/weaviate/blob/master/docs/en/use/ontology-schema.md#camelcase",
        "operationId": "c11y.words",
        "x-serviceIds": ["weaviate.c11y.words.get"],
        "parameters": [
          {
            "description": "CamelCase list of words to validate.",
            "in": "path",
            "type": "string",
            "name": "words",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/C11yWordsResponse"
            }
          },
          "400": {
            "description": "Incorrect request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized or invalid credentials."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "summary": "Checks if a word or wordString is part of the contextionary.",
        "tags": ["contextionary-API"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/c11y/corpus": {
      "post": {
        "description": "Analyzes a sentence based on the contextionary",
        "operationId": "c11y.corpus.get",
        "x-serviceIds": ["weaviate.c11y.corpus.get"],
        "parameters": [
          {
            "description": "A text corpus",
            "in": "body",
            "name": "corpus",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The text corpus.",
              "properties": {
                "corpus": {
                  "type": "string",
                  "example": "In certain latitudes there comes a span of time approaching and following the summer solstice, some weeks in all, when the twilights turn long and blue."
                }
              }
            }
          }
        ],
        "responses": {
          "501": {
            "description": "Not (yet) implemented."
          }
        },
        "summary": "Checks if a word or wordString is part of the contextionary.",
        "tags": ["contextionary-API"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "description": "OIDC Discovery page, redirects to the token issuer if one is configured",
        "responses": {
          "200": {
            "description": "Successful response, inspect body",
            "schema": {
              "type": "object",
              "properties": {
                "href": {
                  "description": "The Location to redirect to",
                  "type": "string"
                },
                "clientId": {
                  "description": "OAuth Client ID",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found, no oidc provider present"
          }
        },
        "summary": "OIDC discovery information if OIDC auth is enabled",
        "tags": ["well-known", "oidc", "discovery"],
        "x-available-in-mqtt": false,
        "x-available-in-websocket": false
      }
    }
  },
  "produces": ["application/json"],
  "schemes": ["https"],
  "security": [
    {},
    {
      "oidc": []
    }
  ],
  "securityDefinitions": {
    "oidc": {
      "type": "oauth2",
      "description": "OIDC (OpenConnect ID - based on OAuth2)",
      "flow": "implicit",
      "authorizationUrl": "http://to-be-configured-in-the-application-config"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "actions"
    },
    {
      "name": "batching",
      "description": "These operations allow to execute batch requests for Things and Actions. Mostly used for importing large datasets."
    },
    {
      "name": "graphql"
    },
    {
      "name": "meta"
    },
    {
      "name": "P2P"
    },
    {
      "name": "things"
    },
    {
      "name": "contextionary-API",
      "description": "All functions related to the Contextionary."
    },
    {
      "name": "schema",
      "description": "These operations enable manipulation of the schema in Weaviate schema."
    }
  ]
}
