//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new things API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for things API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThingsCreate(params *ThingsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsCreateOK, error)

	ThingsDelete(params *ThingsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsDeleteNoContent, error)

	ThingsGet(params *ThingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsGetOK, error)

	ThingsList(params *ThingsListParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsListOK, error)

	ThingsPatch(params *ThingsPatchParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsPatchNoContent, error)

	ThingsReferencesCreate(params *ThingsReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsReferencesCreateOK, error)

	ThingsReferencesDelete(params *ThingsReferencesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsReferencesDeleteNoContent, error)

	ThingsReferencesUpdate(params *ThingsReferencesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsReferencesUpdateOK, error)

	ThingsUpdate(params *ThingsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsUpdateOK, error)

	ThingsValidate(params *ThingsValidateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsValidateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ThingsCreate creates a new thing based on a thing template

  Registers a new Thing. Given meta-data and schema values are validated.
*/
func (a *Client) ThingsCreate(params *ThingsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.create",
		Method:             "POST",
		PathPattern:        "/things",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsDelete deletes a thing based on its UUID

  Deletes a Thing from the system. All Actions pointing to this Thing, where the Thing is the object of the Action, are also being deleted.
*/
func (a *Client) ThingsDelete(params *ThingsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.delete",
		Method:             "DELETE",
		PathPattern:        "/things/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsGet gets a thing based on its UUID

  Returns a particular Thing data.
*/
func (a *Client) ThingsGet(params *ThingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.get",
		Method:             "GET",
		PathPattern:        "/things/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsList gets a list of things

  Lists all Things in reverse order of creation, owned by the user that belongs to the used token.
*/
func (a *Client) ThingsList(params *ThingsListParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.list",
		Method:             "GET",
		PathPattern:        "/things",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsPatch updates a thing based on its UUID using patch semantics

  Updates a Thing's data. This method supports patch semantics. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.
*/
func (a *Client) ThingsPatch(params *ThingsPatchParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.patch",
		Method:             "PATCH",
		PathPattern:        "/things/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsReferencesCreate adds a single reference to a class property when cardinality is set to has many

  Add a single reference to a class-property when cardinality is set to 'hasMany'.
*/
func (a *Client) ThingsReferencesCreate(params *ThingsReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsReferencesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsReferencesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.references.create",
		Method:             "POST",
		PathPattern:        "/things/{id}/references/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsReferencesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsReferencesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.references.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsReferencesDelete deletes the single reference that is given in the body from the list of references that this property has

  Delete the single reference that is given in the body from the list of references that this property has.
*/
func (a *Client) ThingsReferencesDelete(params *ThingsReferencesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsReferencesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsReferencesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.references.delete",
		Method:             "DELETE",
		PathPattern:        "/things/{id}/references/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsReferencesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsReferencesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.references.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsReferencesUpdate replaces all references to a class property

  Replace all references to a class-property.
*/
func (a *Client) ThingsReferencesUpdate(params *ThingsReferencesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsReferencesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsReferencesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.references.update",
		Method:             "PUT",
		PathPattern:        "/things/{id}/references/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsReferencesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsReferencesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.references.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsUpdate updates a thing based on its UUID

  Updates a Thing's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.
*/
func (a *Client) ThingsUpdate(params *ThingsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.update",
		Method:             "PUT",
		PathPattern:        "/things/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThingsValidate validates things schema

  Validate a Thing's schema and meta-data. It has to be based on a schema, which is related to the given Thing to be accepted by this validation.
*/
func (a *Client) ThingsValidate(params *ThingsValidateParams, authInfo runtime.ClientAuthInfoWriter) (*ThingsValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThingsValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "things.validate",
		Method:             "POST",
		PathPattern:        "/things/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThingsValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThingsValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for things.validate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
