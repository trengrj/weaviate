//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// ThingsUpdateReader is a Reader for the ThingsUpdate structure.
type ThingsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ThingsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewThingsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewThingsUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewThingsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewThingsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewThingsUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewThingsUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewThingsUpdateOK creates a ThingsUpdateOK with default headers values
func NewThingsUpdateOK() *ThingsUpdateOK {
	return &ThingsUpdateOK{}
}

/*ThingsUpdateOK handles this case with default header values.

Successfully received.
*/
type ThingsUpdateOK struct {
	Payload *models.Thing
}

func (o *ThingsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /things/{id}][%d] thingsUpdateOK  %+v", 200, o.Payload)
}

func (o *ThingsUpdateOK) GetPayload() *models.Thing {
	return o.Payload
}

func (o *ThingsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Thing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThingsUpdateUnauthorized creates a ThingsUpdateUnauthorized with default headers values
func NewThingsUpdateUnauthorized() *ThingsUpdateUnauthorized {
	return &ThingsUpdateUnauthorized{}
}

/*ThingsUpdateUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type ThingsUpdateUnauthorized struct {
}

func (o *ThingsUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /things/{id}][%d] thingsUpdateUnauthorized ", 401)
}

func (o *ThingsUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewThingsUpdateForbidden creates a ThingsUpdateForbidden with default headers values
func NewThingsUpdateForbidden() *ThingsUpdateForbidden {
	return &ThingsUpdateForbidden{}
}

/*ThingsUpdateForbidden handles this case with default header values.

Forbidden
*/
type ThingsUpdateForbidden struct {
	Payload *models.ErrorResponse
}

func (o *ThingsUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /things/{id}][%d] thingsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ThingsUpdateForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ThingsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThingsUpdateNotFound creates a ThingsUpdateNotFound with default headers values
func NewThingsUpdateNotFound() *ThingsUpdateNotFound {
	return &ThingsUpdateNotFound{}
}

/*ThingsUpdateNotFound handles this case with default header values.

Successful query result but no resource was found.
*/
type ThingsUpdateNotFound struct {
}

func (o *ThingsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /things/{id}][%d] thingsUpdateNotFound ", 404)
}

func (o *ThingsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewThingsUpdateUnprocessableEntity creates a ThingsUpdateUnprocessableEntity with default headers values
func NewThingsUpdateUnprocessableEntity() *ThingsUpdateUnprocessableEntity {
	return &ThingsUpdateUnprocessableEntity{}
}

/*ThingsUpdateUnprocessableEntity handles this case with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type ThingsUpdateUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *ThingsUpdateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /things/{id}][%d] thingsUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ThingsUpdateUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ThingsUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThingsUpdateInternalServerError creates a ThingsUpdateInternalServerError with default headers values
func NewThingsUpdateInternalServerError() *ThingsUpdateInternalServerError {
	return &ThingsUpdateInternalServerError{}
}

/*ThingsUpdateInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type ThingsUpdateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ThingsUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /things/{id}][%d] thingsUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *ThingsUpdateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ThingsUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
