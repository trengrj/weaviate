//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE: https://github.com/semi-technologies/weaviate/blob/develop/LICENSE.md
//  DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// ThingsValidateReader is a Reader for the ThingsValidate structure.
type ThingsValidateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ThingsValidateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewThingsValidateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewThingsValidateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewThingsValidateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewThingsValidateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewThingsValidateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewThingsValidateOK creates a ThingsValidateOK with default headers values
func NewThingsValidateOK() *ThingsValidateOK {
	return &ThingsValidateOK{}
}

/*ThingsValidateOK handles this case with default header values.

Successfully validated.
*/
type ThingsValidateOK struct {
}

func (o *ThingsValidateOK) Error() string {
	return fmt.Sprintf("[POST /things/validate][%d] thingsValidateOK ", 200)
}

func (o *ThingsValidateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewThingsValidateUnauthorized creates a ThingsValidateUnauthorized with default headers values
func NewThingsValidateUnauthorized() *ThingsValidateUnauthorized {
	return &ThingsValidateUnauthorized{}
}

/*ThingsValidateUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type ThingsValidateUnauthorized struct {
}

func (o *ThingsValidateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /things/validate][%d] thingsValidateUnauthorized ", 401)
}

func (o *ThingsValidateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewThingsValidateForbidden creates a ThingsValidateForbidden with default headers values
func NewThingsValidateForbidden() *ThingsValidateForbidden {
	return &ThingsValidateForbidden{}
}

/*ThingsValidateForbidden handles this case with default header values.

Forbidden
*/
type ThingsValidateForbidden struct {
	Payload *models.ErrorResponse
}

func (o *ThingsValidateForbidden) Error() string {
	return fmt.Sprintf("[POST /things/validate][%d] thingsValidateForbidden  %+v", 403, o.Payload)
}

func (o *ThingsValidateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThingsValidateUnprocessableEntity creates a ThingsValidateUnprocessableEntity with default headers values
func NewThingsValidateUnprocessableEntity() *ThingsValidateUnprocessableEntity {
	return &ThingsValidateUnprocessableEntity{}
}

/*ThingsValidateUnprocessableEntity handles this case with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type ThingsValidateUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *ThingsValidateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /things/validate][%d] thingsValidateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ThingsValidateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThingsValidateInternalServerError creates a ThingsValidateInternalServerError with default headers values
func NewThingsValidateInternalServerError() *ThingsValidateInternalServerError {
	return &ThingsValidateInternalServerError{}
}

/*ThingsValidateInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type ThingsValidateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ThingsValidateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /things/validate][%d] thingsValidateInternalServerError  %+v", 500, o.Payload)
}

func (o *ThingsValidateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
