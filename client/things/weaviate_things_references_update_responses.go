//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
// 
//  Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// WeaviateThingsReferencesUpdateReader is a Reader for the WeaviateThingsReferencesUpdate structure.
type WeaviateThingsReferencesUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WeaviateThingsReferencesUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewWeaviateThingsReferencesUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewWeaviateThingsReferencesUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewWeaviateThingsReferencesUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewWeaviateThingsReferencesUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewWeaviateThingsReferencesUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewWeaviateThingsReferencesUpdateOK creates a WeaviateThingsReferencesUpdateOK with default headers values
func NewWeaviateThingsReferencesUpdateOK() *WeaviateThingsReferencesUpdateOK {
	return &WeaviateThingsReferencesUpdateOK{}
}

/*WeaviateThingsReferencesUpdateOK handles this case with default header values.

Successfully replaced all the references (success is based on the behavior of the datastore).
*/
type WeaviateThingsReferencesUpdateOK struct {
}

func (o *WeaviateThingsReferencesUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /things/{id}/references/{propertyName}][%d] weaviateThingsReferencesUpdateOK ", 200)
}

func (o *WeaviateThingsReferencesUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateThingsReferencesUpdateUnauthorized creates a WeaviateThingsReferencesUpdateUnauthorized with default headers values
func NewWeaviateThingsReferencesUpdateUnauthorized() *WeaviateThingsReferencesUpdateUnauthorized {
	return &WeaviateThingsReferencesUpdateUnauthorized{}
}

/*WeaviateThingsReferencesUpdateUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type WeaviateThingsReferencesUpdateUnauthorized struct {
}

func (o *WeaviateThingsReferencesUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /things/{id}/references/{propertyName}][%d] weaviateThingsReferencesUpdateUnauthorized ", 401)
}

func (o *WeaviateThingsReferencesUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateThingsReferencesUpdateForbidden creates a WeaviateThingsReferencesUpdateForbidden with default headers values
func NewWeaviateThingsReferencesUpdateForbidden() *WeaviateThingsReferencesUpdateForbidden {
	return &WeaviateThingsReferencesUpdateForbidden{}
}

/*WeaviateThingsReferencesUpdateForbidden handles this case with default header values.

Forbidden
*/
type WeaviateThingsReferencesUpdateForbidden struct {
	Payload *models.ErrorResponse
}

func (o *WeaviateThingsReferencesUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /things/{id}/references/{propertyName}][%d] weaviateThingsReferencesUpdateForbidden  %+v", 403, o.Payload)
}

func (o *WeaviateThingsReferencesUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWeaviateThingsReferencesUpdateUnprocessableEntity creates a WeaviateThingsReferencesUpdateUnprocessableEntity with default headers values
func NewWeaviateThingsReferencesUpdateUnprocessableEntity() *WeaviateThingsReferencesUpdateUnprocessableEntity {
	return &WeaviateThingsReferencesUpdateUnprocessableEntity{}
}

/*WeaviateThingsReferencesUpdateUnprocessableEntity handles this case with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the property exists or that it is a class?
*/
type WeaviateThingsReferencesUpdateUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *WeaviateThingsReferencesUpdateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /things/{id}/references/{propertyName}][%d] weaviateThingsReferencesUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *WeaviateThingsReferencesUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWeaviateThingsReferencesUpdateInternalServerError creates a WeaviateThingsReferencesUpdateInternalServerError with default headers values
func NewWeaviateThingsReferencesUpdateInternalServerError() *WeaviateThingsReferencesUpdateInternalServerError {
	return &WeaviateThingsReferencesUpdateInternalServerError{}
}

/*WeaviateThingsReferencesUpdateInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type WeaviateThingsReferencesUpdateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *WeaviateThingsReferencesUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /things/{id}/references/{propertyName}][%d] weaviateThingsReferencesUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *WeaviateThingsReferencesUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
