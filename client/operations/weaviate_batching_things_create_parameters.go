// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewWeaviateBatchingThingsCreateParams creates a new WeaviateBatchingThingsCreateParams object
// with the default values initialized.
func NewWeaviateBatchingThingsCreateParams() *WeaviateBatchingThingsCreateParams {
	var ()
	return &WeaviateBatchingThingsCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWeaviateBatchingThingsCreateParamsWithTimeout creates a new WeaviateBatchingThingsCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWeaviateBatchingThingsCreateParamsWithTimeout(timeout time.Duration) *WeaviateBatchingThingsCreateParams {
	var ()
	return &WeaviateBatchingThingsCreateParams{

		timeout: timeout,
	}
}

// NewWeaviateBatchingThingsCreateParamsWithContext creates a new WeaviateBatchingThingsCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewWeaviateBatchingThingsCreateParamsWithContext(ctx context.Context) *WeaviateBatchingThingsCreateParams {
	var ()
	return &WeaviateBatchingThingsCreateParams{

		Context: ctx,
	}
}

// NewWeaviateBatchingThingsCreateParamsWithHTTPClient creates a new WeaviateBatchingThingsCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWeaviateBatchingThingsCreateParamsWithHTTPClient(client *http.Client) *WeaviateBatchingThingsCreateParams {
	var ()
	return &WeaviateBatchingThingsCreateParams{
		HTTPClient: client,
	}
}

/*WeaviateBatchingThingsCreateParams contains all the parameters to send to the API endpoint
for the weaviate batching things create operation typically these are written to a http.Request
*/
type WeaviateBatchingThingsCreateParams struct {

	/*Body*/
	Body WeaviateBatchingThingsCreateBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) WithTimeout(timeout time.Duration) *WeaviateBatchingThingsCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) WithContext(ctx context.Context) *WeaviateBatchingThingsCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) WithHTTPClient(client *http.Client) *WeaviateBatchingThingsCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) WithBody(body WeaviateBatchingThingsCreateBody) *WeaviateBatchingThingsCreateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the weaviate batching things create params
func (o *WeaviateBatchingThingsCreateParams) SetBody(body WeaviateBatchingThingsCreateBody) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *WeaviateBatchingThingsCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
