// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
WeaviateKeyCreate creates a new key related to this key

Creates a new key. Input expiration date is validated on being in the future and not longer than parent expiration date.
*/
func (a *Client) WeaviateKeyCreate(params *WeaviateKeyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeyCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.key.create",
		Method:             "POST",
		PathPattern:        "/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeyCreateOK), nil

}

/*
WeaviateKeysChildrenGet gets an object of this keys children related to this key

Get children of a key, only one step deep. A child can have children of its own.
*/
func (a *Client) WeaviateKeysChildrenGet(params *WeaviateKeysChildrenGetParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeysChildrenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeysChildrenGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.keys.children.get",
		Method:             "GET",
		PathPattern:        "/keys/{keyId}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeysChildrenGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeysChildrenGetOK), nil

}

/*
WeaviateKeysDelete deletes a key based on its UUID related to this key

Deletes a key. Only parent or self is allowed to delete key. When you delete a key, all its children will be deleted as well.
*/
func (a *Client) WeaviateKeysDelete(params *WeaviateKeysDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeysDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeysDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.keys.delete",
		Method:             "DELETE",
		PathPattern:        "/keys/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeysDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeysDeleteNoContent), nil

}

/*
WeaviateKeysGet gets a key based on its UUID related to this key

Get a key.
*/
func (a *Client) WeaviateKeysGet(params *WeaviateKeysGetParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeysGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeysGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.keys.get",
		Method:             "GET",
		PathPattern:        "/keys/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeysGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeysGetOK), nil

}

/*
WeaviateKeysMeChildrenGet gets an object of this keys children related to the key used for request

Get children of used key, only one step deep. A child can have children of its own.
*/
func (a *Client) WeaviateKeysMeChildrenGet(params *WeaviateKeysMeChildrenGetParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeysMeChildrenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeysMeChildrenGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.keys.me.children.get",
		Method:             "GET",
		PathPattern:        "/keys/me/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeysMeChildrenGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeysMeChildrenGetOK), nil

}

/*
WeaviateKeysMeGet gets a key based on the key used to do the request

Get the key-information of the key used.
*/
func (a *Client) WeaviateKeysMeGet(params *WeaviateKeysMeGetParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeysMeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeysMeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.keys.me.get",
		Method:             "GET",
		PathPattern:        "/keys/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeysMeGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeysMeGetOK), nil

}

/*
WeaviateKeysRenewToken renews a key based on the key given in the query string

Renews the related key. Validates being lower in tree than given key. Can not renew itself, unless being parent.
*/
func (a *Client) WeaviateKeysRenewToken(params *WeaviateKeysRenewTokenParams, authInfo runtime.ClientAuthInfoWriter) (*WeaviateKeysRenewTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWeaviateKeysRenewTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "weaviate.keys.renew.token",
		Method:             "PUT",
		PathPattern:        "/keys/{keyId}/renew-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WeaviateKeysRenewTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WeaviateKeysRenewTokenOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
