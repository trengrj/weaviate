//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2019 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package contextionary_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// C11yConceptsReader is a Reader for the C11yConcepts structure.
type C11yConceptsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *C11yConceptsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewC11yConceptsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewC11yConceptsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewC11yConceptsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewC11yConceptsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewC11yConceptsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewC11yConceptsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewC11yConceptsOK creates a C11yConceptsOK with default headers values
func NewC11yConceptsOK() *C11yConceptsOK {
	return &C11yConceptsOK{}
}

/*C11yConceptsOK handles this case with default header values.

Successful response.
*/
type C11yConceptsOK struct {
	Payload *models.C11yWordsResponse
}

func (o *C11yConceptsOK) Error() string {
	return fmt.Sprintf("[GET /c11y/concepts/{concept}][%d] c11yConceptsOK  %+v", 200, o.Payload)
}

func (o *C11yConceptsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.C11yWordsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewC11yConceptsBadRequest creates a C11yConceptsBadRequest with default headers values
func NewC11yConceptsBadRequest() *C11yConceptsBadRequest {
	return &C11yConceptsBadRequest{}
}

/*C11yConceptsBadRequest handles this case with default header values.

Incorrect request
*/
type C11yConceptsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *C11yConceptsBadRequest) Error() string {
	return fmt.Sprintf("[GET /c11y/concepts/{concept}][%d] c11yConceptsBadRequest  %+v", 400, o.Payload)
}

func (o *C11yConceptsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewC11yConceptsUnauthorized creates a C11yConceptsUnauthorized with default headers values
func NewC11yConceptsUnauthorized() *C11yConceptsUnauthorized {
	return &C11yConceptsUnauthorized{}
}

/*C11yConceptsUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type C11yConceptsUnauthorized struct {
}

func (o *C11yConceptsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /c11y/concepts/{concept}][%d] c11yConceptsUnauthorized ", 401)
}

func (o *C11yConceptsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewC11yConceptsForbidden creates a C11yConceptsForbidden with default headers values
func NewC11yConceptsForbidden() *C11yConceptsForbidden {
	return &C11yConceptsForbidden{}
}

/*C11yConceptsForbidden handles this case with default header values.

Forbidden
*/
type C11yConceptsForbidden struct {
	Payload *models.ErrorResponse
}

func (o *C11yConceptsForbidden) Error() string {
	return fmt.Sprintf("[GET /c11y/concepts/{concept}][%d] c11yConceptsForbidden  %+v", 403, o.Payload)
}

func (o *C11yConceptsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewC11yConceptsInternalServerError creates a C11yConceptsInternalServerError with default headers values
func NewC11yConceptsInternalServerError() *C11yConceptsInternalServerError {
	return &C11yConceptsInternalServerError{}
}

/*C11yConceptsInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type C11yConceptsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *C11yConceptsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /c11y/concepts/{concept}][%d] c11yConceptsInternalServerError  %+v", 500, o.Payload)
}

func (o *C11yConceptsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewC11yConceptsNotImplemented creates a C11yConceptsNotImplemented with default headers values
func NewC11yConceptsNotImplemented() *C11yConceptsNotImplemented {
	return &C11yConceptsNotImplemented{}
}

/*C11yConceptsNotImplemented handles this case with default header values.

Not (yet) implemented.
*/
type C11yConceptsNotImplemented struct {
}

func (o *C11yConceptsNotImplemented) Error() string {
	return fmt.Sprintf("[GET /c11y/concepts/{concept}][%d] c11yConceptsNotImplemented ", 501)
}

func (o *C11yConceptsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
