// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/creativesoftwarefdn/weaviate/models"
)

// WeaviateSchemaThingsUpdateReader is a Reader for the WeaviateSchemaThingsUpdate structure.
type WeaviateSchemaThingsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WeaviateSchemaThingsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewWeaviateSchemaThingsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewWeaviateSchemaThingsUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewWeaviateSchemaThingsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewWeaviateSchemaThingsUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewWeaviateSchemaThingsUpdateOK creates a WeaviateSchemaThingsUpdateOK with default headers values
func NewWeaviateSchemaThingsUpdateOK() *WeaviateSchemaThingsUpdateOK {
	return &WeaviateSchemaThingsUpdateOK{}
}

/*WeaviateSchemaThingsUpdateOK handles this case with default header values.

Changes applied
*/
type WeaviateSchemaThingsUpdateOK struct {
}

func (o *WeaviateSchemaThingsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /schema/things/{className}][%d] weaviateSchemaThingsUpdateOK ", 200)
}

func (o *WeaviateSchemaThingsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateSchemaThingsUpdateUnauthorized creates a WeaviateSchemaThingsUpdateUnauthorized with default headers values
func NewWeaviateSchemaThingsUpdateUnauthorized() *WeaviateSchemaThingsUpdateUnauthorized {
	return &WeaviateSchemaThingsUpdateUnauthorized{}
}

/*WeaviateSchemaThingsUpdateUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type WeaviateSchemaThingsUpdateUnauthorized struct {
}

func (o *WeaviateSchemaThingsUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /schema/things/{className}][%d] weaviateSchemaThingsUpdateUnauthorized ", 401)
}

func (o *WeaviateSchemaThingsUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateSchemaThingsUpdateForbidden creates a WeaviateSchemaThingsUpdateForbidden with default headers values
func NewWeaviateSchemaThingsUpdateForbidden() *WeaviateSchemaThingsUpdateForbidden {
	return &WeaviateSchemaThingsUpdateForbidden{}
}

/*WeaviateSchemaThingsUpdateForbidden handles this case with default header values.

Could not find the Thing class
*/
type WeaviateSchemaThingsUpdateForbidden struct {
}

func (o *WeaviateSchemaThingsUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /schema/things/{className}][%d] weaviateSchemaThingsUpdateForbidden ", 403)
}

func (o *WeaviateSchemaThingsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateSchemaThingsUpdateUnprocessableEntity creates a WeaviateSchemaThingsUpdateUnprocessableEntity with default headers values
func NewWeaviateSchemaThingsUpdateUnprocessableEntity() *WeaviateSchemaThingsUpdateUnprocessableEntity {
	return &WeaviateSchemaThingsUpdateUnprocessableEntity{}
}

/*WeaviateSchemaThingsUpdateUnprocessableEntity handles this case with default header values.

Invalid update
*/
type WeaviateSchemaThingsUpdateUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *WeaviateSchemaThingsUpdateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /schema/things/{className}][%d] weaviateSchemaThingsUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *WeaviateSchemaThingsUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*WeaviateSchemaThingsUpdateBody weaviate schema things update body
swagger:model WeaviateSchemaThingsUpdateBody
*/
type WeaviateSchemaThingsUpdateBody struct {

	// keywords
	Keywords models.SemanticSchemaClassKeywords `json:"keywords"`

	// The new name of the Thing
	NewName string `json:"newName,omitempty"`
}

// Validate validates this weaviate schema things update body
func (o *WeaviateSchemaThingsUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeywords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WeaviateSchemaThingsUpdateBody) validateKeywords(formats strfmt.Registry) error {

	if swag.IsZero(o.Keywords) { // not required
		return nil
	}

	if err := o.Keywords.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "keywords")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *WeaviateSchemaThingsUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WeaviateSchemaThingsUpdateBody) UnmarshalBinary(b []byte) error {
	var res WeaviateSchemaThingsUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
