//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// SchemaActionsUpdateReader is a Reader for the SchemaActionsUpdate structure.
type SchemaActionsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaActionsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchemaActionsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSchemaActionsUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSchemaActionsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSchemaActionsUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSchemaActionsUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSchemaActionsUpdateOK creates a SchemaActionsUpdateOK with default headers values
func NewSchemaActionsUpdateOK() *SchemaActionsUpdateOK {
	return &SchemaActionsUpdateOK{}
}

/*SchemaActionsUpdateOK handles this case with default header values.

Changes applied.
*/
type SchemaActionsUpdateOK struct {
}

func (o *SchemaActionsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /schema/actions/{className}][%d] schemaActionsUpdateOK ", 200)
}

func (o *SchemaActionsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaActionsUpdateUnauthorized creates a SchemaActionsUpdateUnauthorized with default headers values
func NewSchemaActionsUpdateUnauthorized() *SchemaActionsUpdateUnauthorized {
	return &SchemaActionsUpdateUnauthorized{}
}

/*SchemaActionsUpdateUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type SchemaActionsUpdateUnauthorized struct {
}

func (o *SchemaActionsUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /schema/actions/{className}][%d] schemaActionsUpdateUnauthorized ", 401)
}

func (o *SchemaActionsUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaActionsUpdateForbidden creates a SchemaActionsUpdateForbidden with default headers values
func NewSchemaActionsUpdateForbidden() *SchemaActionsUpdateForbidden {
	return &SchemaActionsUpdateForbidden{}
}

/*SchemaActionsUpdateForbidden handles this case with default header values.

Forbidden
*/
type SchemaActionsUpdateForbidden struct {
	Payload *models.ErrorResponse
}

func (o *SchemaActionsUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /schema/actions/{className}][%d] schemaActionsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SchemaActionsUpdateForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaActionsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaActionsUpdateUnprocessableEntity creates a SchemaActionsUpdateUnprocessableEntity with default headers values
func NewSchemaActionsUpdateUnprocessableEntity() *SchemaActionsUpdateUnprocessableEntity {
	return &SchemaActionsUpdateUnprocessableEntity{}
}

/*SchemaActionsUpdateUnprocessableEntity handles this case with default header values.

Invalid update.
*/
type SchemaActionsUpdateUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *SchemaActionsUpdateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /schema/actions/{className}][%d] schemaActionsUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SchemaActionsUpdateUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaActionsUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaActionsUpdateInternalServerError creates a SchemaActionsUpdateInternalServerError with default headers values
func NewSchemaActionsUpdateInternalServerError() *SchemaActionsUpdateInternalServerError {
	return &SchemaActionsUpdateInternalServerError{}
}

/*SchemaActionsUpdateInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type SchemaActionsUpdateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SchemaActionsUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /schema/actions/{className}][%d] schemaActionsUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *SchemaActionsUpdateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaActionsUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
