//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/semi-technologies/weaviate/entities/models"
)

// SchemaThingsPropertiesDeleteReader is a Reader for the SchemaThingsPropertiesDelete structure.
type SchemaThingsPropertiesDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaThingsPropertiesDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchemaThingsPropertiesDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSchemaThingsPropertiesDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSchemaThingsPropertiesDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSchemaThingsPropertiesDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSchemaThingsPropertiesDeleteOK creates a SchemaThingsPropertiesDeleteOK with default headers values
func NewSchemaThingsPropertiesDeleteOK() *SchemaThingsPropertiesDeleteOK {
	return &SchemaThingsPropertiesDeleteOK{}
}

/*SchemaThingsPropertiesDeleteOK handles this case with default header values.

Removed the property from the ontology.
*/
type SchemaThingsPropertiesDeleteOK struct {
}

func (o *SchemaThingsPropertiesDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /schema/things/{className}/properties/{propertyName}][%d] schemaThingsPropertiesDeleteOK ", 200)
}

func (o *SchemaThingsPropertiesDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaThingsPropertiesDeleteUnauthorized creates a SchemaThingsPropertiesDeleteUnauthorized with default headers values
func NewSchemaThingsPropertiesDeleteUnauthorized() *SchemaThingsPropertiesDeleteUnauthorized {
	return &SchemaThingsPropertiesDeleteUnauthorized{}
}

/*SchemaThingsPropertiesDeleteUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type SchemaThingsPropertiesDeleteUnauthorized struct {
}

func (o *SchemaThingsPropertiesDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /schema/things/{className}/properties/{propertyName}][%d] schemaThingsPropertiesDeleteUnauthorized ", 401)
}

func (o *SchemaThingsPropertiesDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaThingsPropertiesDeleteForbidden creates a SchemaThingsPropertiesDeleteForbidden with default headers values
func NewSchemaThingsPropertiesDeleteForbidden() *SchemaThingsPropertiesDeleteForbidden {
	return &SchemaThingsPropertiesDeleteForbidden{}
}

/*SchemaThingsPropertiesDeleteForbidden handles this case with default header values.

Forbidden
*/
type SchemaThingsPropertiesDeleteForbidden struct {
	Payload *models.ErrorResponse
}

func (o *SchemaThingsPropertiesDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /schema/things/{className}/properties/{propertyName}][%d] schemaThingsPropertiesDeleteForbidden  %+v", 403, o.Payload)
}

func (o *SchemaThingsPropertiesDeleteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaThingsPropertiesDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaThingsPropertiesDeleteInternalServerError creates a SchemaThingsPropertiesDeleteInternalServerError with default headers values
func NewSchemaThingsPropertiesDeleteInternalServerError() *SchemaThingsPropertiesDeleteInternalServerError {
	return &SchemaThingsPropertiesDeleteInternalServerError{}
}

/*SchemaThingsPropertiesDeleteInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type SchemaThingsPropertiesDeleteInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SchemaThingsPropertiesDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /schema/things/{className}/properties/{propertyName}][%d] schemaThingsPropertiesDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *SchemaThingsPropertiesDeleteInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaThingsPropertiesDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
