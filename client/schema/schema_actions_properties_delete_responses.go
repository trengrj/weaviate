//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2020 SeMI Holding B.V. (registered @ Dutch Chamber of Commerce no 75221632). All rights reserved.
//  LICENSE WEAVIATE OPEN SOURCE: https://www.semi.technology/playbook/playbook/contract-weaviate-OSS.html
//  LICENSE WEAVIATE ENTERPRISE: https://www.semi.technology/playbook/contract-weaviate-enterprise.html
//  CONCEPT: Bob van Luijt (@bobvanluijt)
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/semi-technologies/weaviate/entities/models"
)

// SchemaActionsPropertiesDeleteReader is a Reader for the SchemaActionsPropertiesDelete structure.
type SchemaActionsPropertiesDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaActionsPropertiesDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchemaActionsPropertiesDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSchemaActionsPropertiesDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSchemaActionsPropertiesDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSchemaActionsPropertiesDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSchemaActionsPropertiesDeleteOK creates a SchemaActionsPropertiesDeleteOK with default headers values
func NewSchemaActionsPropertiesDeleteOK() *SchemaActionsPropertiesDeleteOK {
	return &SchemaActionsPropertiesDeleteOK{}
}

/*SchemaActionsPropertiesDeleteOK handles this case with default header values.

Removed the property from the ontology.
*/
type SchemaActionsPropertiesDeleteOK struct {
}

func (o *SchemaActionsPropertiesDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /schema/actions/{className}/properties/{propertyName}][%d] schemaActionsPropertiesDeleteOK ", 200)
}

func (o *SchemaActionsPropertiesDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaActionsPropertiesDeleteUnauthorized creates a SchemaActionsPropertiesDeleteUnauthorized with default headers values
func NewSchemaActionsPropertiesDeleteUnauthorized() *SchemaActionsPropertiesDeleteUnauthorized {
	return &SchemaActionsPropertiesDeleteUnauthorized{}
}

/*SchemaActionsPropertiesDeleteUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type SchemaActionsPropertiesDeleteUnauthorized struct {
}

func (o *SchemaActionsPropertiesDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /schema/actions/{className}/properties/{propertyName}][%d] schemaActionsPropertiesDeleteUnauthorized ", 401)
}

func (o *SchemaActionsPropertiesDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaActionsPropertiesDeleteForbidden creates a SchemaActionsPropertiesDeleteForbidden with default headers values
func NewSchemaActionsPropertiesDeleteForbidden() *SchemaActionsPropertiesDeleteForbidden {
	return &SchemaActionsPropertiesDeleteForbidden{}
}

/*SchemaActionsPropertiesDeleteForbidden handles this case with default header values.

Forbidden
*/
type SchemaActionsPropertiesDeleteForbidden struct {
	Payload *models.ErrorResponse
}

func (o *SchemaActionsPropertiesDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /schema/actions/{className}/properties/{propertyName}][%d] schemaActionsPropertiesDeleteForbidden  %+v", 403, o.Payload)
}

func (o *SchemaActionsPropertiesDeleteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaActionsPropertiesDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaActionsPropertiesDeleteInternalServerError creates a SchemaActionsPropertiesDeleteInternalServerError with default headers values
func NewSchemaActionsPropertiesDeleteInternalServerError() *SchemaActionsPropertiesDeleteInternalServerError {
	return &SchemaActionsPropertiesDeleteInternalServerError{}
}

/*SchemaActionsPropertiesDeleteInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type SchemaActionsPropertiesDeleteInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SchemaActionsPropertiesDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /schema/actions/{className}/properties/{propertyName}][%d] schemaActionsPropertiesDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *SchemaActionsPropertiesDeleteInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaActionsPropertiesDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
