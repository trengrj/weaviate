/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/creativesoftwarefdn/weaviate/models"
)

// NewWeaviateActionsPatchParams creates a new WeaviateActionsPatchParams object
// with the default values initialized.
func NewWeaviateActionsPatchParams() *WeaviateActionsPatchParams {
	var ()
	return &WeaviateActionsPatchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWeaviateActionsPatchParamsWithTimeout creates a new WeaviateActionsPatchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWeaviateActionsPatchParamsWithTimeout(timeout time.Duration) *WeaviateActionsPatchParams {
	var ()
	return &WeaviateActionsPatchParams{

		timeout: timeout,
	}
}

// NewWeaviateActionsPatchParamsWithContext creates a new WeaviateActionsPatchParams object
// with the default values initialized, and the ability to set a context for a request
func NewWeaviateActionsPatchParamsWithContext(ctx context.Context) *WeaviateActionsPatchParams {
	var ()
	return &WeaviateActionsPatchParams{

		Context: ctx,
	}
}

// NewWeaviateActionsPatchParamsWithHTTPClient creates a new WeaviateActionsPatchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWeaviateActionsPatchParamsWithHTTPClient(client *http.Client) *WeaviateActionsPatchParams {
	var ()
	return &WeaviateActionsPatchParams{
		HTTPClient: client,
	}
}

/*WeaviateActionsPatchParams contains all the parameters to send to the API endpoint
for the weaviate actions patch operation typically these are written to a http.Request
*/
type WeaviateActionsPatchParams struct {

	/*ActionID
	  Unique ID of the Action.

	*/
	ActionID strfmt.UUID
	/*Async
	  If `async` is true, return a 202 if the patch is accepted. You will receive this response before the data is made persistent. If `async` is false, you will receive confirmation after the update is made persistent. The value of `async` defaults to false.

	*/
	Async *bool
	/*Body
	  JSONPatch document as defined by RFC 6902.

	*/
	Body []*models.PatchDocument

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) WithTimeout(timeout time.Duration) *WeaviateActionsPatchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) WithContext(ctx context.Context) *WeaviateActionsPatchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) WithHTTPClient(client *http.Client) *WeaviateActionsPatchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionID adds the actionID to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) WithActionID(actionID strfmt.UUID) *WeaviateActionsPatchParams {
	o.SetActionID(actionID)
	return o
}

// SetActionID adds the actionId to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) SetActionID(actionID strfmt.UUID) {
	o.ActionID = actionID
}

// WithAsync adds the async to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) WithAsync(async *bool) *WeaviateActionsPatchParams {
	o.SetAsync(async)
	return o
}

// SetAsync adds the async to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) SetAsync(async *bool) {
	o.Async = async
}

// WithBody adds the body to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) WithBody(body []*models.PatchDocument) *WeaviateActionsPatchParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the weaviate actions patch params
func (o *WeaviateActionsPatchParams) SetBody(body []*models.PatchDocument) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *WeaviateActionsPatchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param actionId
	if err := r.SetPathParam("actionId", o.ActionID.String()); err != nil {
		return err
	}

	if o.Async != nil {

		// query param async
		var qrAsync bool
		if o.Async != nil {
			qrAsync = *o.Async
		}
		qAsync := swag.FormatBool(qrAsync)
		if qAsync != "" {
			if err := r.SetQueryParam("async", qAsync); err != nil {
				return err
			}
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
