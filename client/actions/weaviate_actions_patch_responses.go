/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/creativesoftwarefdn/weaviate/models"
)

// WeaviateActionsPatchReader is a Reader for the WeaviateActionsPatch structure.
type WeaviateActionsPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WeaviateActionsPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewWeaviateActionsPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewWeaviateActionsPatchAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewWeaviateActionsPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewWeaviateActionsPatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewWeaviateActionsPatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewWeaviateActionsPatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewWeaviateActionsPatchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewWeaviateActionsPatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewWeaviateActionsPatchOK creates a WeaviateActionsPatchOK with default headers values
func NewWeaviateActionsPatchOK() *WeaviateActionsPatchOK {
	return &WeaviateActionsPatchOK{}
}

/*WeaviateActionsPatchOK handles this case with default header values.

Successfully applied.
*/
type WeaviateActionsPatchOK struct {
	Payload *models.ActionGetResponse
}

func (o *WeaviateActionsPatchOK) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchOK  %+v", 200, o.Payload)
}

func (o *WeaviateActionsPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ActionGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWeaviateActionsPatchAccepted creates a WeaviateActionsPatchAccepted with default headers values
func NewWeaviateActionsPatchAccepted() *WeaviateActionsPatchAccepted {
	return &WeaviateActionsPatchAccepted{}
}

/*WeaviateActionsPatchAccepted handles this case with default header values.

Successfully received.
*/
type WeaviateActionsPatchAccepted struct {
	Payload *models.ActionGetResponse
}

func (o *WeaviateActionsPatchAccepted) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchAccepted  %+v", 202, o.Payload)
}

func (o *WeaviateActionsPatchAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ActionGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWeaviateActionsPatchBadRequest creates a WeaviateActionsPatchBadRequest with default headers values
func NewWeaviateActionsPatchBadRequest() *WeaviateActionsPatchBadRequest {
	return &WeaviateActionsPatchBadRequest{}
}

/*WeaviateActionsPatchBadRequest handles this case with default header values.

The patch-JSON is malformed.
*/
type WeaviateActionsPatchBadRequest struct {
}

func (o *WeaviateActionsPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchBadRequest ", 400)
}

func (o *WeaviateActionsPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateActionsPatchUnauthorized creates a WeaviateActionsPatchUnauthorized with default headers values
func NewWeaviateActionsPatchUnauthorized() *WeaviateActionsPatchUnauthorized {
	return &WeaviateActionsPatchUnauthorized{}
}

/*WeaviateActionsPatchUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type WeaviateActionsPatchUnauthorized struct {
}

func (o *WeaviateActionsPatchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchUnauthorized ", 401)
}

func (o *WeaviateActionsPatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateActionsPatchForbidden creates a WeaviateActionsPatchForbidden with default headers values
func NewWeaviateActionsPatchForbidden() *WeaviateActionsPatchForbidden {
	return &WeaviateActionsPatchForbidden{}
}

/*WeaviateActionsPatchForbidden handles this case with default header values.

The used API-key has insufficient permissions.
*/
type WeaviateActionsPatchForbidden struct {
}

func (o *WeaviateActionsPatchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchForbidden ", 403)
}

func (o *WeaviateActionsPatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateActionsPatchNotFound creates a WeaviateActionsPatchNotFound with default headers values
func NewWeaviateActionsPatchNotFound() *WeaviateActionsPatchNotFound {
	return &WeaviateActionsPatchNotFound{}
}

/*WeaviateActionsPatchNotFound handles this case with default header values.

Successful query result but no resource was found.
*/
type WeaviateActionsPatchNotFound struct {
}

func (o *WeaviateActionsPatchNotFound) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchNotFound ", 404)
}

func (o *WeaviateActionsPatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWeaviateActionsPatchUnprocessableEntity creates a WeaviateActionsPatchUnprocessableEntity with default headers values
func NewWeaviateActionsPatchUnprocessableEntity() *WeaviateActionsPatchUnprocessableEntity {
	return &WeaviateActionsPatchUnprocessableEntity{}
}

/*WeaviateActionsPatchUnprocessableEntity handles this case with default header values.

The patch-JSON is valid but unprocessable.
*/
type WeaviateActionsPatchUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *WeaviateActionsPatchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *WeaviateActionsPatchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWeaviateActionsPatchInternalServerError creates a WeaviateActionsPatchInternalServerError with default headers values
func NewWeaviateActionsPatchInternalServerError() *WeaviateActionsPatchInternalServerError {
	return &WeaviateActionsPatchInternalServerError{}
}

/*WeaviateActionsPatchInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type WeaviateActionsPatchInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *WeaviateActionsPatchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /actions/{actionId}][%d] weaviateActionsPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *WeaviateActionsPatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
